{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/New490/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport Login from './login';\nimport Dashboard from './dashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RabbitMQComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [message, setMessage] = useState('');\n  const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n  //const [showDashboard, setShowDashboard] = useState(false);\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const handleLogin = (username, password) => {\n    console.log(\"Login Attempt:\", username, password);\n    //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n    sendMessage(\"/queue/backendQueue\", {\n      ID: \"True\"\n    });\n    // Here you would typically check credentials, etc.\n    // This is just a placeholder for demonstration{validation: credentials are valid}\n    setIsLoggedIn(true);\n  };\n  useEffect(() => {\n    const connect = () => {\n      const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n      const client = Stomp.over(socket);\n      const headers = {\n        login: \"admin\",\n        passcode: \"admin\"\n      };\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n\n        // Subscribe to the backend_queue\n        client.subscribe('/queue/backendQueue', receivedMessagemessage => {\n          // Assuming message body is a JSON string\n          //const receivedMessage = JSON.parse(message.body);\n          console.log(\"Received message: \", receivedMessagemessage.body);\n          if (receivedMessagemessage.body = 'True') {\n            // Handle successful authentication\n            // Using React Router for redirection as an example\n            console.log('SUCCESS');\n            //setShowDashboard(true);\n            window.location.href = '/dashboard.html';\n          } else {\n            // Handle authentication failure\n            console.log(\"SORRY\");\n          }\n          // Update state with the new message\n          setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n        });\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n      });\n    };\n    connect();\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected from RabbitMQ\");\n          setIsConnected(false);\n        });\n      }\n    };\n  }, []);\n\n  // Your sendMessage function remains unchanged\n  const sendMessage = (queue, messageContent) => {\n    if (stompClient && isConnected) {\n      // Use the `queue` parameter to dynamically set the destination\n      // Convert the `messageContent` parameter to a JSON string to send as the message body\n      stompClient.send(queue, {}, JSON.stringify(messageContent));\n      console.log(\"Message sent to\", queue, \":\", messageContent);\n    } else {\n      console.log(\"Not connected to RabbitMQ\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(RabbitMQComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(RabbitMQComponent, \"j6+ZOv1t03iUrbHsabbh/h5GHvk=\");\n_c = RabbitMQComponent;\nexport default RabbitMQComponent;\n\n// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n// import Dashboard from './dashboard';\n// import { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const navigate = useNavigate(); // Hook for navigation\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 client.subscribe('/queue/backendQueue', (message) => {\n//                     console.log(\"Received message: \", message.body);\n//                     if (message.body === 'True') { // Corrected to use comparison operator\n//                         console.log('SUCCESS');\n//                         navigate('/dashboard'); // Navigate to Dashboard\n//                     } else {\n//                         console.log(\"SORRY\");\n//                     }\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, [navigate]); // Added navigate as a dependency\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login />\n//             ) : (\n//                 <Dashboard />\n//             )}\n//         </div>\n//     );\n// };\n\n// const App = () => {\n//     return (\n//         <Router>\n//             <Routes>\n//                 <Route path=\"/\" element={<RabbitMQComponent />} />\n//                 <Route path=\"/login\" element={<Login/>}/>\n//                 <Route path=\"/dashboard\" element={<Dashboard />} />\n//             </Routes>\n//         </Router>\n//     );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"RabbitMQComponent\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","Login","Dashboard","jsxDEV","_jsxDEV","RabbitMQComponent","_s","stompClient","setStompClient","isConnected","setIsConnected","message","setMessage","receivedMessages","setReceivedMessages","isLoggedIn","setIsLoggedIn","handleLogin","username","password","console","log","sendMessage","ID","connect","socket","WebSocket","client","over","headers","login","passcode","frame","subscribe","receivedMessagemessage","body","window","location","href","prevMessages","error","disconnect","queue","messageContent","send","JSON","stringify","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/New490/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport Login from './login';\nimport Dashboard from './dashboard';\n\n\n\nconst RabbitMQComponent = () => {\n    const [stompClient, setStompClient] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [message, setMessage] = useState('');\n    const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n    //const [showDashboard, setShowDashboard] = useState(false);\n\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    const handleLogin = (username, password) => {\n        console.log(\"Login Attempt:\", username, password);\n        //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n        sendMessage(\"/queue/backendQueue\", { ID: \"True\"});\n        // Here you would typically check credentials, etc.\n        // This is just a placeholder for demonstration{validation: credentials are valid}\n        setIsLoggedIn(true);\n    };\n\n\n\n\n    useEffect(() => {\n        const connect = () => {\n            const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n            const client = Stomp.over(socket);\n\n            const headers = {\n                login: \"admin\",\n                passcode: \"admin\",\n            };\n\n            client.connect(headers, frame => {\n                console.log('Connected: ' + frame);\n                setStompClient(client);\n                setIsConnected(true);\n\n                // Subscribe to the backend_queue\n                client.subscribe('/queue/backendQueue', (receivedMessagemessage) => {\n                    // Assuming message body is a JSON string\n                    //const receivedMessage = JSON.parse(message.body);\n                    console.log(\"Received message: \", receivedMessagemessage.body);\n                    if (receivedMessagemessage.body='True') {\n                        // Handle successful authentication\n                        // Using React Router for redirection as an example\n                        console.log('SUCCESS')\n                        //setShowDashboard(true);\n                        window.location.href = '/dashboard.html';\n                    } else {\n                        // Handle authentication failure\n                        console.log(\"SORRY\")\n                    }\n                    // Update state with the new message\n                    setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n                });\n            }, error => {\n                console.error('Error connecting to RabbitMQ:', error);\n            });\n        };\n\n        connect();\n\n        return () => {\n            if (stompClient && isConnected) {\n                stompClient.disconnect(() => {\n                    console.log(\"Disconnected from RabbitMQ\");\n                    setIsConnected(false);\n                });\n            }\n        };\n    }, []);\n\n\n    // Your sendMessage function remains unchanged\n    const sendMessage = (queue, messageContent) => {\n        if (stompClient && isConnected) {\n            // Use the `queue` parameter to dynamically set the destination\n            // Convert the `messageContent` parameter to a JSON string to send as the message body\n            stompClient.send(queue, {}, JSON.stringify(messageContent));\n            console.log(\"Message sent to\", queue, \":\", messageContent);\n        } else {\n            console.log(\"Not connected to RabbitMQ\");\n        }\n    };\n\n    return (\n        <div>\n            {/* {showDashboard ? <Dashboard /> : <div>Please wait...</div>} */}\n            {!isLoggedIn ? (\n                <Login onLogin={handleLogin} />\n                \n            ) : (\n                <RabbitMQComponent />\n                \n            )}\n            \n        </div>\n    );\n};\n\nexport default RabbitMQComponent;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n// import Dashboard from './dashboard';\n// import { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const navigate = useNavigate(); // Hook for navigation\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 client.subscribe('/queue/backendQueue', (message) => {\n//                     console.log(\"Received message: \", message.body);\n//                     if (message.body === 'True') { // Corrected to use comparison operator\n//                         console.log('SUCCESS');\n//                         navigate('/dashboard'); // Navigate to Dashboard\n//                     } else {\n//                         console.log(\"SORRY\");\n//                     }\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, [navigate]); // Added navigate as a dependency\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login />\n//             ) : (\n//                 <Dashboard />\n//             )}\n//         </div>\n//     );\n// };\n\n// const App = () => {\n//     return (\n//         <Router>\n//             <Routes>\n//                 <Route path=\"/\" element={<RabbitMQComponent />} />\n//                 <Route path=\"/login\" element={<Login/>}/>\n//                 <Route path=\"/dashboard\" element={<Dashboard />} />\n//             </Routes>\n//         </Router>\n//     );\n// };\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}