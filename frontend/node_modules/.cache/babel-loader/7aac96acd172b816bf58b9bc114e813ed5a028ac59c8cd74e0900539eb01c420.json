{"ast":null,"code":"var _s = $RefreshSig$();\n// // Login.jsx\n// import React, { useState } from 'react';\n// import './style.css'; // Adjust the path as needed\n\n// const Login = ({ onLogin }) => {\n//     const [username, setUsername] = useState('');\n//     const [password, setPassword] = useState('');\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         // Implement your login logic here\n//         // For now, we'll just call onLogin with the username and password\n//         onLogin(username, password);\n//     };\n\n//     return (\n//         <div className=\"login-container\">\n//             <form className=\"login-form\" onSubmit={handleSubmit}>\n//                 <h2>Login to Your Account</h2>\n//                 <div className=\"form-control\">\n//                     <label htmlFor=\"username\">Username</label>\n//                     <input type=\"text\" id=\"username\" name=\"username\" required value={username} onChange={(e) => setUsername(e.target.value)} />\n//                 </div>\n//                 <div className=\"form-control\">\n//                     <label htmlFor=\"password\">Password</label>\n//                     <input type=\"password\" id=\"password\" name=\"password\" required value={password} onChange={(e) => setPassword(e.target.value)} />\n//                 </div>\n//                 <button type=\"submit\">Login</button>\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default Login;\n\nimport React, { useState, useEffect } from 'react';\nimport { connectToRabbitMQ, sendMessage, subscribeToQueue } from './rabbitMQService'; // Assuming you have this utility\n\nconst Login = ({\n  onLoginSuccess,\n  onLoginFailure\n}) => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  useEffect(() => {\n    subscribeToQueue('/queue/loginResponseQueue', message => {\n      const response = JSON.parse(message.body);\n      if (response.success) {\n        onLoginSuccess();\n      } else {\n        onLoginFailure(response.error || 'Username or password is incorrect.');\n      }\n    });\n    return () => {\n      // Cleanup subscription if needed\n    };\n  }, []);\n  const handleSubmit = event => {\n    event.preventDefault();\n    const loginRequest = {\n      username,\n      password\n    };\n    sendMessage(\"/queue/loginRequestQueue\", JSON.stringify(loginRequest));\n  };\n\n  // JSX for the form\n};\n_s(Login, \"1Ee1R0489EdHkYDBlGzgXw+XbCU=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","connectToRabbitMQ","sendMessage","subscribeToQueue","Login","onLoginSuccess","onLoginFailure","_s","username","setUsername","password","setPassword","message","response","JSON","parse","body","success","error","handleSubmit","event","preventDefault","loginRequest","stringify","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/New490/frontend/src/login.jsx"],"sourcesContent":["// // Login.jsx\n// import React, { useState } from 'react';\n// import './style.css'; // Adjust the path as needed\n\n// const Login = ({ onLogin }) => {\n//     const [username, setUsername] = useState('');\n//     const [password, setPassword] = useState('');\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         // Implement your login logic here\n//         // For now, we'll just call onLogin with the username and password\n//         onLogin(username, password);\n//     };\n\n//     return (\n//         <div className=\"login-container\">\n//             <form className=\"login-form\" onSubmit={handleSubmit}>\n//                 <h2>Login to Your Account</h2>\n//                 <div className=\"form-control\">\n//                     <label htmlFor=\"username\">Username</label>\n//                     <input type=\"text\" id=\"username\" name=\"username\" required value={username} onChange={(e) => setUsername(e.target.value)} />\n//                 </div>\n//                 <div className=\"form-control\">\n//                     <label htmlFor=\"password\">Password</label>\n//                     <input type=\"password\" id=\"password\" name=\"password\" required value={password} onChange={(e) => setPassword(e.target.value)} />\n//                 </div>\n//                 <button type=\"submit\">Login</button>\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default Login;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { connectToRabbitMQ, sendMessage, subscribeToQueue } from './rabbitMQService'; // Assuming you have this utility\n\nconst Login = ({ onLoginSuccess, onLoginFailure }) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    useEffect(() => {\n        subscribeToQueue('/queue/loginResponseQueue', (message) => {\n            const response = JSON.parse(message.body);\n            if (response.success) {\n                onLoginSuccess();\n            } else {\n                onLoginFailure(response.error || 'Username or password is incorrect.');\n            }\n        });\n\n        return () => {\n            // Cleanup subscription if needed\n        };\n    }, []);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const loginRequest = { username, password };\n        sendMessage(\"/queue/loginRequestQueue\", JSON.stringify(loginRequest));\n    };\n\n    // JSX for the form\n};\n\nexport default Login;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAoBA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,iBAAiB,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,mBAAmB,CAAC,CAAC;;AAEtF,MAAMC,KAAK,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZG,gBAAgB,CAAC,2BAA2B,EAAGS,OAAO,IAAK;MACvD,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MACzC,IAAIH,QAAQ,CAACI,OAAO,EAAE;QAClBZ,cAAc,CAAC,CAAC;MACpB,CAAC,MAAM;QACHC,cAAc,CAACO,QAAQ,CAACK,KAAK,IAAI,oCAAoC,CAAC;MAC1E;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACT;IAAA,CACH;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC5BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,YAAY,GAAG;MAAEd,QAAQ;MAAEE;IAAS,CAAC;IAC3CR,WAAW,CAAC,0BAA0B,EAAEY,IAAI,CAACS,SAAS,CAACD,YAAY,CAAC,CAAC;EACzE,CAAC;;EAED;AACJ,CAAC;AAACf,EAAA,CA1BIH,KAAK;AAAAoB,EAAA,GAALpB,KAAK;AA4BX,eAAeA,KAAK;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}