{"ast":null,"code":"/*import {Connection} from 'rabbitmq-client'\n\n// Initialize:\nconst rabbit = new Connection('amqp://guest:guest@192.168.192.211:15672')\nrabbit.on('error', (err) => {\n  console.log('RabbitMQ connection error', err)\n})\nrabbit.on('connection', () => {\n  console.log('Connection successfully (re)established')\n})\n\n// Consume messages from a queue:\n// See API docs for all options\nconst sub = rabbit.createConsumer({\n  queue: 'user-events',\n  queueOptions: {durable: true},\n  // handle 2 messages at a time\n  qos: {prefetchCount: 2},\n  // Optionally ensure an exchange exists\n  exchanges: [{exchange: 'my-events', type: 'topic'}],\n  // With a \"topic\" exchange, messages matching this pattern are routed to the queue\n  queueBindings: [{exchange: 'my-events', routingKey: 'users.*'}],\n}, async (msg) => {\n  console.log('received message (user-events)', msg)\n  // The message is automatically acknowledged (BasicAck) when this function ends.\n  // If this function throws an error, then msg is rejected (BasicNack) and\n  // possibly requeued or sent to a dead-letter exchange. You can also return a\n  // status code from this callback to control the ack/nack behavior\n  // per-message.\n})\n\nsub.on('error', (err) => {\n  // Maybe the consumer was cancelled, or the connection was reset before a\n  // message could be acknowledged.\n  console.log('consumer error (user-events)', err)\n})\n\n// Declare a publisher\n// See API docs for all options\nconst pub = rabbit.createPublisher({\n  // Enable publish confirmations, similar to consumer acknowledgements\n  confirm: true,\n  // Enable retries\n  maxAttempts: 2,\n  // Optionally ensure the existence of an exchange before we use it\n  exchanges: [{exchange: 'my-events', type: 'topic'}]\n})\n\n// Publish a message to a custom exchange\nawait pub.send(\n  {exchange: 'my-events', routingKey: 'users.visit'}, // metadata\n  {id: 1, name: 'Alan Turing'}) // message content\n\n// Or publish directly to a queue\nawait pub.send('user-events', {id: 1, name: 'Alan Turing'})\n*/\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"@stomp/stompjs\";\nexport function connectRabbit() {\n  let stompClient;\n  var ws = new WebSocket('ws://localhost:15674/ws');\n  const headers = {\n    'login': 'guest',\n    'passcode': 'guest',\n    'durable': 'true',\n    'auto-delete': 'false'\n  };\n  stompClient = Stomp.over(ws);\n  stompClient.connect(headers, function (frame) {\n    console.log('Connected');\n    const subscription = stompClient.subscribe('/queue/myQueue', function (message) {\n      console.log(message);\n    });\n  });\n}","map":{"version":3,"names":["SockJS","Stomp","connectRabbit","stompClient","ws","WebSocket","headers","over","connect","frame","console","log","subscription","subscribe","message"],"sources":["/home/jp228/Desktop/frontend/src/publisher.js"],"sourcesContent":["/*import {Connection} from 'rabbitmq-client'\n\n// Initialize:\nconst rabbit = new Connection('amqp://guest:guest@192.168.192.211:15672')\nrabbit.on('error', (err) => {\n  console.log('RabbitMQ connection error', err)\n})\nrabbit.on('connection', () => {\n  console.log('Connection successfully (re)established')\n})\n\n// Consume messages from a queue:\n// See API docs for all options\nconst sub = rabbit.createConsumer({\n  queue: 'user-events',\n  queueOptions: {durable: true},\n  // handle 2 messages at a time\n  qos: {prefetchCount: 2},\n  // Optionally ensure an exchange exists\n  exchanges: [{exchange: 'my-events', type: 'topic'}],\n  // With a \"topic\" exchange, messages matching this pattern are routed to the queue\n  queueBindings: [{exchange: 'my-events', routingKey: 'users.*'}],\n}, async (msg) => {\n  console.log('received message (user-events)', msg)\n  // The message is automatically acknowledged (BasicAck) when this function ends.\n  // If this function throws an error, then msg is rejected (BasicNack) and\n  // possibly requeued or sent to a dead-letter exchange. You can also return a\n  // status code from this callback to control the ack/nack behavior\n  // per-message.\n})\n\nsub.on('error', (err) => {\n  // Maybe the consumer was cancelled, or the connection was reset before a\n  // message could be acknowledged.\n  console.log('consumer error (user-events)', err)\n})\n\n// Declare a publisher\n// See API docs for all options\nconst pub = rabbit.createPublisher({\n  // Enable publish confirmations, similar to consumer acknowledgements\n  confirm: true,\n  // Enable retries\n  maxAttempts: 2,\n  // Optionally ensure the existence of an exchange before we use it\n  exchanges: [{exchange: 'my-events', type: 'topic'}]\n})\n\n// Publish a message to a custom exchange\nawait pub.send(\n  {exchange: 'my-events', routingKey: 'users.visit'}, // metadata\n  {id: 1, name: 'Alan Turing'}) // message content\n\n// Or publish directly to a queue\nawait pub.send('user-events', {id: 1, name: 'Alan Turing'})\n*/\nimport SockJS from \"sockjs-client\"\nimport Stomp from \"@stomp/stompjs\"\n\nexport function connectRabbit(){\n\nlet stompClient\n\n    var ws = new WebSocket('ws://localhost:15674/ws')\n\n    const headers = {\n        'login': 'guest',\n        'passcode': 'guest',\n        'durable': 'true',\n        'auto-delete': 'false'\n    }\n    stompClient = Stomp.over(ws)\n\n    stompClient.connect(headers , function(frame){\n                console.log('Connected')\n               const subscription = stompClient.subscribe('/queue/myQueue', function(message){\n                   console.log(message)\n               })\n    })\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,KAAK,MAAM,gBAAgB;AAElC,OAAO,SAASC,aAAaA,CAAA,EAAE;EAE/B,IAAIC,WAAW;EAEX,IAAIC,EAAE,GAAG,IAAIC,SAAS,CAAC,yBAAyB,CAAC;EAEjD,MAAMC,OAAO,GAAG;IACZ,OAAO,EAAE,OAAO;IAChB,UAAU,EAAE,OAAO;IACnB,SAAS,EAAE,MAAM;IACjB,aAAa,EAAE;EACnB,CAAC;EACDH,WAAW,GAAGF,KAAK,CAACM,IAAI,CAACH,EAAE,CAAC;EAE5BD,WAAW,CAACK,OAAO,CAACF,OAAO,EAAG,UAASG,KAAK,EAAC;IACjCC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACzB,MAAMC,YAAY,GAAGT,WAAW,CAACU,SAAS,CAAC,gBAAgB,EAAE,UAASC,OAAO,EAAC;MAC1EJ,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;IACxB,CAAC,CAAC;EACb,CAAC,CAAC;AAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}