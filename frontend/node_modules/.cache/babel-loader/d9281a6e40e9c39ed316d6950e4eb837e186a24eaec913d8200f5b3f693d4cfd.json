{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/frontend/src/publisher.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport WebSocket from 'websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketComponent = () => {\n  _s();\n  useEffect(() => {\n    // Connect to RabbitMQ WebSocket endpoint over ZeroTier network\n    const ws = new WebSocket('ws://192.168.192.211:15672');\n\n    // Listen for messages from RabbitMQ\n    ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log('Received message from RabbitMQ:', message);\n      // Handle message as needed (e.g., update state)\n    };\n\n    // Clean up WebSocket connection on component unmount\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  // Function to send message to RabbitMQ via WebSocket\n  const sendMessage = () => {\n    const message = \"From frontend\";\n    ws.send(JSON.stringify(message));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(WebSocketComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = WebSocketComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","WebSocket","jsxDEV","_jsxDEV","WebSocketComponent","_s","ws","onmessage","event","message","JSON","parse","data","console","log","close","sendMessage","send","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/frontend/src/publisher.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport WebSocket from 'websocket';\n\nconst WebSocketComponent = () => {\n    useEffect(() => {\n        // Connect to RabbitMQ WebSocket endpoint over ZeroTier network\n        const ws = new WebSocket('ws://192.168.192.211:15672');\n\n        // Listen for messages from RabbitMQ\n        ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            console.log('Received message from RabbitMQ:', message);\n            // Handle message as needed (e.g., update state)\n        };\n\n        // Clean up WebSocket connection on component unmount\n        return () => {\n            ws.close();\n        };\n    }, []);\n\n    // Function to send message to RabbitMQ via WebSocket\n    const sendMessage = () => {\n        const message = \"From frontend\";\n        ws.send(JSON.stringify(message));\n    };\n\n    return (\n        <div>\n            \n        </div>\n    );\n};\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7BL,SAAS,CAAC,MAAM;IACZ;IACA,MAAMM,EAAE,GAAG,IAAIL,SAAS,CAAC,4BAA4B,CAAC;;IAEtD;IACAK,EAAE,CAACC,SAAS,GAAIC,KAAK,IAAK;MACtB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MACtCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEL,OAAO,CAAC;MACvD;IACJ,CAAC;;IAED;IACA,OAAO,MAAM;MACTH,EAAE,CAACS,KAAK,CAAC,CAAC;IACd,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMP,OAAO,GAAG,eAAe;IAC/BH,EAAE,CAACW,IAAI,CAACP,IAAI,CAACQ,SAAS,CAACT,OAAO,CAAC,CAAC;EACpC,CAAC;EAED,oBACIN,OAAA;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEd,CAAC;AAACjB,EAAA,CA7BID,kBAAkB;AAAAmB,EAAA,GAAlBnB,kBAAkB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}