{"ast":null,"code":"/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst {\n  Stream\n} = require('readable-stream');\nconst TransportStream = require('winston-transport');\nconst jsonStringify = require('safe-stable-stringify');\n\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Http extends TransportStream {\n  /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(options = {}) {\n    super(options);\n    this.options = options;\n    this.name = options.name || 'http';\n    this.ssl = !!options.ssl;\n    this.host = options.host || 'localhost';\n    this.port = options.port;\n    this.auth = options.auth;\n    this.path = options.path || '';\n    this.agent = options.agent;\n    this.headers = options.headers || {};\n    this.headers['content-type'] = 'application/json';\n    this.batch = options.batch || false;\n    this.batchInterval = options.batchInterval || 5000;\n    this.batchCount = options.batchCount || 10;\n    this.batchOptions = [];\n    this.batchTimeoutID = -1;\n    this.batchCallback = {};\n    if (!this.port) {\n      this.port = this.ssl ? 443 : 80;\n    }\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    this._request(info, null, null, (err, res) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n      if (err) {\n        this.emit('warn', err);\n      } else {\n        this.emit('logged', info);\n      }\n    });\n\n    // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n    // and block more requests from happening?\n    if (callback) {\n      setImmediate(callback);\n    }\n  }\n\n  /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options -  Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @returns {undefined}\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = {\n      method: 'query',\n      params: this.normalizeQuery(options)\n    };\n    const auth = options.params.auth || null;\n    delete options.params.auth;\n    const path = options.params.path || null;\n    delete options.params.path;\n    this._request(options, auth, path, (err, res, body) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n      if (err) {\n        return callback(err);\n      }\n      if (typeof body === 'string') {\n        try {\n          body = JSON.parse(body);\n        } catch (e) {\n          return callback(e);\n        }\n      }\n      callback(null, body);\n    });\n  }\n\n  /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description\n   */\n  stream(options = {}) {\n    const stream = new Stream();\n    options = {\n      method: 'stream',\n      params: options\n    };\n    const path = options.params.path || null;\n    delete options.params.path;\n    const auth = options.params.auth || null;\n    delete options.params.auth;\n    let buff = '';\n    const req = this._request(options, auth, path);\n    stream.destroy = () => req.destroy();\n    req.on('data', data => {\n      data = (buff + data).split(/\\n+/);\n      const l = data.length - 1;\n      let i = 0;\n      for (; i < l; i++) {\n        try {\n          stream.emit('log', JSON.parse(data[i]));\n        } catch (e) {\n          stream.emit('error', e);\n        }\n      }\n      buff = data[l];\n    });\n    req.on('error', err => stream.emit('error', err));\n    return stream;\n  }\n\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n  _request(options, auth, path, callback) {\n    options = options || {};\n    auth = auth || this.auth;\n    path = path || this.path || '';\n    if (this.batch) {\n      this._doBatch(options, callback, auth, path);\n    } else {\n      this._doRequest(options, callback, auth, path);\n    }\n  }\n\n  /**\n   * Send or memorize the options according to batch configuration\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doBatch(options, callback, auth, path) {\n    this.batchOptions.push(options);\n    if (this.batchOptions.length === 1) {\n      // First message stored, it's time to start the timeout!\n      const me = this;\n      this.batchCallback = callback;\n      this.batchTimeoutID = setTimeout(function () {\n        // timeout is reached, send all messages to endpoint\n        me.batchTimeoutID = -1;\n        me._doBatchRequest(me.batchCallback, auth, path);\n      }, this.batchInterval);\n    }\n    if (this.batchOptions.length === this.batchCount) {\n      // max batch count is reached, send all messages to endpoint\n      this._doBatchRequest(this.batchCallback, auth, path);\n    }\n  }\n\n  /**\n   * Initiate a request with the memorized batch options, stop the batch timeout\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doBatchRequest(callback, auth, path) {\n    if (this.batchTimeoutID > 0) {\n      clearTimeout(this.batchTimeoutID);\n      this.batchTimeoutID = -1;\n    }\n    const batchOptionsCopy = this.batchOptions.slice();\n    this.batchOptions = [];\n    this._doRequest(batchOptionsCopy, callback, auth, path);\n  }\n\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doRequest(options, callback, auth, path) {\n    // Prepare options for outgoing HTTP request\n    const headers = Object.assign({}, this.headers);\n    if (auth && auth.bearer) {\n      headers.Authorization = `Bearer ${auth.bearer}`;\n    }\n    const req = (this.ssl ? https : http).request({\n      ...this.options,\n      method: 'POST',\n      host: this.host,\n      port: this.port,\n      path: `/${path.replace(/^\\//, '')}`,\n      headers: headers,\n      auth: auth && auth.username && auth.password ? `${auth.username}:${auth.password}` : '',\n      agent: this.agent\n    });\n    req.on('error', callback);\n    req.on('response', res => res.on('end', () => callback(null, res)).resume());\n    req.end(Buffer.from(jsonStringify(options, this.options.replacer), 'utf8'));\n  }\n};","map":{"version":3,"names":["http","require","https","Stream","TransportStream","jsonStringify","module","exports","Http","constructor","options","name","ssl","host","port","auth","path","agent","headers","batch","batchInterval","batchCount","batchOptions","batchTimeoutID","batchCallback","log","info","callback","_request","err","res","statusCode","Error","emit","setImmediate","query","method","params","normalizeQuery","body","JSON","parse","e","stream","buff","req","destroy","on","data","split","l","length","i","_doBatch","_doRequest","push","me","setTimeout","_doBatchRequest","clearTimeout","batchOptionsCopy","slice","Object","assign","bearer","Authorization","request","replace","username","password","resume","end","Buffer","from","replacer"],"sources":["/home/jp228/node_modules/winston/lib/winston/transports/http.js"],"sourcesContent":["/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst { Stream } = require('readable-stream');\nconst TransportStream = require('winston-transport');\nconst jsonStringify = require('safe-stable-stringify');\n\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Http extends TransportStream {\n  /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(options = {}) {\n    super(options);\n\n    this.options = options;\n    this.name = options.name || 'http';\n    this.ssl = !!options.ssl;\n    this.host = options.host || 'localhost';\n    this.port = options.port;\n    this.auth = options.auth;\n    this.path = options.path || '';\n    this.agent = options.agent;\n    this.headers = options.headers || {};\n    this.headers['content-type'] = 'application/json';\n    this.batch = options.batch || false;\n    this.batchInterval = options.batchInterval || 5000;\n    this.batchCount = options.batchCount || 10;\n    this.batchOptions = [];\n    this.batchTimeoutID = -1;\n    this.batchCallback = {};\n\n    if (!this.port) {\n      this.port = this.ssl ? 443 : 80;\n    }\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    this._request(info, null, null, (err, res) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        this.emit('warn', err);\n      } else {\n        this.emit('logged', info);\n      }\n    });\n\n    // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n    // and block more requests from happening?\n    if (callback) {\n      setImmediate(callback);\n    }\n  }\n\n  /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options -  Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @returns {undefined}\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = {\n      method: 'query',\n      params: this.normalizeQuery(options)\n    };\n\n    const auth = options.params.auth || null;\n    delete options.params.auth;\n\n    const path = options.params.path || null;\n    delete options.params.path;\n\n    this._request(options, auth, path, (err, res, body) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        return callback(err);\n      }\n\n      if (typeof body === 'string') {\n        try {\n          body = JSON.parse(body);\n        } catch (e) {\n          return callback(e);\n        }\n      }\n\n      callback(null, body);\n    });\n  }\n\n  /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description\n   */\n  stream(options = {}) {\n    const stream = new Stream();\n    options = {\n      method: 'stream',\n      params: options\n    };\n\n    const path = options.params.path || null;\n    delete options.params.path;\n\n    const auth = options.params.auth || null;\n    delete options.params.auth;\n\n    let buff = '';\n    const req = this._request(options, auth, path);\n\n    stream.destroy = () => req.destroy();\n    req.on('data', data => {\n      data = (buff + data).split(/\\n+/);\n      const l = data.length - 1;\n\n      let i = 0;\n      for (; i < l; i++) {\n        try {\n          stream.emit('log', JSON.parse(data[i]));\n        } catch (e) {\n          stream.emit('error', e);\n        }\n      }\n\n      buff = data[l];\n    });\n    req.on('error', err => stream.emit('error', err));\n\n    return stream;\n  }\n\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n  _request(options, auth, path, callback) {\n    options = options || {};\n\n    auth = auth || this.auth;\n    path = path || this.path || '';\n\n    if (this.batch) {\n      this._doBatch(options, callback, auth, path);\n    } else {\n      this._doRequest(options, callback, auth, path);\n    }\n  }\n\n  /**\n   * Send or memorize the options according to batch configuration\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doBatch(options, callback, auth, path) {\n    this.batchOptions.push(options);\n    if (this.batchOptions.length === 1) {\n      // First message stored, it's time to start the timeout!\n      const me = this;\n      this.batchCallback = callback;\n      this.batchTimeoutID = setTimeout(function () {\n        // timeout is reached, send all messages to endpoint\n        me.batchTimeoutID = -1;\n        me._doBatchRequest(me.batchCallback, auth, path);\n      }, this.batchInterval);\n    }\n    if (this.batchOptions.length === this.batchCount) {\n      // max batch count is reached, send all messages to endpoint\n      this._doBatchRequest(this.batchCallback, auth, path);\n    }\n  }\n\n  /**\n   * Initiate a request with the memorized batch options, stop the batch timeout\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doBatchRequest(callback, auth, path) {\n    if (this.batchTimeoutID > 0) {\n      clearTimeout(this.batchTimeoutID);\n      this.batchTimeoutID = -1;\n    }\n    const batchOptionsCopy = this.batchOptions.slice();\n    this.batchOptions = [];\n    this._doRequest(batchOptionsCopy, callback, auth, path);\n  }\n\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doRequest(options, callback, auth, path) {\n    // Prepare options for outgoing HTTP request\n    const headers = Object.assign({}, this.headers);\n    if (auth && auth.bearer) {\n      headers.Authorization = `Bearer ${auth.bearer}`;\n    }\n    const req = (this.ssl ? https : http).request({\n      ...this.options,\n      method: 'POST',\n      host: this.host,\n      port: this.port,\n      path: `/${path.replace(/^\\//, '')}`,\n      headers: headers,\n      auth: (auth && auth.username && auth.password) ? (`${auth.username}:${auth.password}`) : '',\n      agent: this.agent\n    });\n\n    req.on('error', callback);\n    req.on('response', res => (\n      res.on('end', () => callback(null, res)).resume()\n    ));\n    req.end(Buffer.from(jsonStringify(options, this.options.replacer), 'utf8'));\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}