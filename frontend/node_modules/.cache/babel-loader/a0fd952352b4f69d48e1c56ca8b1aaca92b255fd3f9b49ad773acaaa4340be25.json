{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/New490/frontend/src/App.js\",\n  _s = $RefreshSig$();\n//import './App.css';\n//import './publisher.js'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n//export default App\n\n// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n\n//     useEffect(() => {\n//         // Function to connect to RabbitMQ\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\", // secure your credentials for production environments\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect(); // Automatically connect on component mount\n\n//         // Cleanup function to disconnect when the component unmounts\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []); // Empty dependency array ensures this effect runs only once on mount\n\n//     const sendMessage = () => {\n//         if (stompClient && isConnected) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RabbitMQComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [message, setMessage] = useState('');\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  useEffect(() => {\n    const connect = () => {\n      const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n      const client = Stomp.over(socket);\n      client.debug = null; // Optionally disable console logging\n\n      const headers = {\n        login: \"admin\",\n        // secure your credentials\n        passcode: \"admin\"\n      };\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n\n        // Subscribe to a queue\n        const subscription = client.subscribe('/queue/frontendQueue', message => {\n          // Assuming the message body is a text message\n          const body = JSON.parse(message.body);\n          console.log('Received message:', body);\n\n          // Update state to include the new message\n          setReceivedMessages(prevMessages => [...prevMessages, body]);\n        });\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n      });\n    };\n    connect();\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected from RabbitMQ\");\n          setIsConnected(false);\n        });\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (stompClient && isConnected) {\n      stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({\n        message: message\n      }));\n      console.log(\"Message sent: \", message);\n    } else {\n      console.log(\"Not connected to RabbitMQ\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Received Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: receivedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: msg.message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n_s(RabbitMQComponent, \"qge0Vm1woAwMFzVmkyW3EF2XiIE=\");\n_c = RabbitMQComponent;\nexport default RabbitMQComponent;\nvar _c;\n$RefreshReg$(_c, \"RabbitMQComponent\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","jsxDEV","_jsxDEV","RabbitMQComponent","_s","stompClient","setStompClient","isConnected","setIsConnected","message","setMessage","receivedMessages","setReceivedMessages","connect","socket","WebSocket","client","over","debug","headers","login","passcode","frame","console","log","subscription","subscribe","body","JSON","parse","prevMessages","error","disconnect","sendMessage","send","stringify","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","msg","index","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/New490/frontend/src/App.js"],"sourcesContent":["//import './App.css';\n//import './publisher.js'\n\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n//export default App\n\n\n// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n\n//     useEffect(() => {\n//         // Function to connect to RabbitMQ\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\", // secure your credentials for production environments\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect(); // Automatically connect on component mount\n\n//         // Cleanup function to disconnect when the component unmounts\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []); // Empty dependency array ensures this effect runs only once on mount\n\n//     const sendMessage = () => {\n//         if (stompClient && isConnected) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\n\nconst RabbitMQComponent = () => {\n    const [stompClient, setStompClient] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [message, setMessage] = useState('');\n    const [receivedMessages, setReceivedMessages] = useState([]);\n\n    useEffect(() => {\n        const connect = () => {\n            const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n            const client = Stomp.over(socket);\n            client.debug = null; // Optionally disable console logging\n\n            const headers = {\n                login: \"admin\", // secure your credentials\n                passcode: \"admin\",\n            };\n\n            client.connect(headers, frame => {\n                console.log('Connected: ' + frame);\n                setStompClient(client);\n                setIsConnected(true);\n\n                // Subscribe to a queue\n                const subscription = client.subscribe('/queue/frontendQueue', (message) => {\n                    // Assuming the message body is a text message\n                    const body = JSON.parse(message.body);\n                    console.log('Received message:', body);\n\n                    // Update state to include the new message\n                    setReceivedMessages(prevMessages => [...prevMessages, body]);\n                });\n\n            }, error => {\n                console.error('Error connecting to RabbitMQ:', error);\n            });\n        };\n\n        connect();\n\n        return () => {\n            if (stompClient && isConnected) {\n                stompClient.disconnect(() => {\n                    console.log(\"Disconnected from RabbitMQ\");\n                    setIsConnected(false);\n                });\n            }\n        };\n    }, []);\n\n    const sendMessage = () => {\n        if (stompClient && isConnected) {\n            stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n            console.log(\"Message sent: \", message);\n        } else {\n            console.log(\"Not connected to RabbitMQ\");\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n            <button onClick={sendMessage}>Send Message</button>\n            <div>\n                <h3>Received Messages</h3>\n                <ul>\n                    {receivedMessages.map((msg, index) => (\n                        <li key={index}>{msg.message}</li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default RabbitMQComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}