{"ast":null,"code":"\"use strict\";\n\n/**\n * AmqpSimple.ts - provides a simple interface to read from and write to RabbitMQ amqp exchanges\n * Created by Ab on 17-9-2015.\n *\n * methods and properties starting with '_' signify that the scope of the item should be limited to\n * the inside of the enclosing namespace.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// simplified use of amqp exchanges and queues, wrapper for amqplib\nvar AmqpLib = require(\"amqplib/callback_api\");\nvar Promise = require(\"bluebird\");\nvar winston = require(\"winston\");\nvar path = require(\"path\");\nvar os = require(\"os\");\nvar events_1 = require(\"events\");\nvar ApplicationName = process.env.AMQPTS_APPLICATIONNAME || (path.parse ? path.parse(process.argv[1]).name : path.basename(process.argv[1]));\n// create a custom winston logger for amqp-ts\nvar amqp_log = new winston.Logger({\n  transports: [new winston.transports.Console({\n    level: process.env.AMQPTS_LOGLEVEL || \"error\"\n  })]\n});\nexports.log = amqp_log;\n// name for the RabbitMQ direct reply-to queue\nvar DIRECT_REPLY_TO_QUEUE = \"amq.rabbitmq.reply-to\";\n//----------------------------------------------------------------------------------------------------\n// Connection class\n//----------------------------------------------------------------------------------------------------\nvar Connection = /** @class */function (_super) {\n  __extends(Connection, _super);\n  function Connection(url, socketOptions, reconnectStrategy) {\n    if (url === void 0) {\n      url = \"amqp://localhost\";\n    }\n    if (socketOptions === void 0) {\n      socketOptions = {};\n    }\n    if (reconnectStrategy === void 0) {\n      reconnectStrategy = {\n        retries: 0,\n        interval: 1500\n      };\n    }\n    var _this = _super.call(this) || this;\n    _this.connectedBefore = false;\n    _this._rebuilding = false;\n    _this._isClosing = false;\n    _this.isConnected = false;\n    _this.url = url;\n    _this.socketOptions = socketOptions;\n    _this.reconnectStrategy = reconnectStrategy;\n    _this._exchanges = {};\n    _this._queues = {};\n    _this._bindings = {};\n    _this.rebuildConnection();\n    return _this;\n  }\n  Connection.prototype.rebuildConnection = function () {\n    var _this = this;\n    if (this._rebuilding) {\n      // only one rebuild process can be active at any time\n      exports.log.log(\"debug\", \"Connection rebuild already in progress, joining active rebuild attempt.\", {\n        module: \"amqp-ts\"\n      });\n      return this.initialized;\n    }\n    this._retry = -1;\n    this._rebuilding = true;\n    this._isClosing = false;\n    // rebuild the connection\n    this.initialized = new Promise(function (resolve, reject) {\n      _this.tryToConnect(_this, 0, function (err) {\n        /* istanbul ignore if */\n        if (err) {\n          _this._rebuilding = false;\n          reject(err);\n        } else {\n          _this._rebuilding = false;\n          if (_this.connectedBefore) {\n            exports.log.log(\"warn\", \"Connection re-established\", {\n              module: \"amqp-ts\"\n            });\n            _this.emit(\"re_established_connection\");\n          } else {\n            exports.log.log(\"info\", \"Connection established.\", {\n              module: \"amqp-ts\"\n            });\n            _this.emit(\"open_connection\");\n            _this.connectedBefore = true;\n          }\n          resolve(null);\n        }\n      });\n    });\n    /* istanbul ignore next */\n    this.initialized.catch(function (err) {\n      exports.log.log(\"warn\", \"Error creating connection!\", {\n        module: \"amqp-ts\"\n      });\n      _this.emit(\"error_connection\", err);\n      //throw (err);\n    });\n    return this.initialized;\n  };\n  Connection.prototype.tryToConnect = function (thisConnection, retry, callback) {\n    var _this = this;\n    AmqpLib.connect(thisConnection.url, thisConnection.socketOptions, function (err, connection) {\n      /* istanbul ignore if */\n      if (err) {\n        thisConnection.isConnected = false;\n        // only do every retry once, amqplib can return multiple connection errors for one connection request (error?)\n        if (retry <= _this._retry) {\n          //amqpts_log.log(\"warn\" , \"Double retry \" + retry + \", skipping.\", {module: \"amqp-ts\"});\n          return;\n        }\n        exports.log.log(\"warn\", \"Connection failed.\", {\n          module: \"amqp-ts\"\n        });\n        _this._retry = retry;\n        if (thisConnection.reconnectStrategy.retries === 0 || thisConnection.reconnectStrategy.retries > retry) {\n          exports.log.log(\"warn\", \"Connection retry \" + (retry + 1) + \" in \" + thisConnection.reconnectStrategy.interval + \"ms\", {\n            module: \"amqp-ts\"\n          });\n          thisConnection.emit(\"trying_connect\");\n          setTimeout(thisConnection.tryToConnect, thisConnection.reconnectStrategy.interval, thisConnection, retry + 1, callback);\n        } else {\n          //no reconnect strategy, or retries exhausted, so return the error\n          exports.log.log(\"warn\", \"Connection failed, exiting: No connection retries left (retry \" + retry + \").\", {\n            module: \"amqp-ts\"\n          });\n          callback(err);\n        }\n      } else {\n        var restart = function (err) {\n          exports.log.log(\"debug\", \"Connection error occurred.\", {\n            module: \"amqp-ts\"\n          });\n          connection.removeListener(\"error\", restart);\n          //connection.removeListener(\"end\", restart); // not sure this is needed\n          thisConnection._rebuildAll(err); //try to rebuild the topology when the connection  unexpectedly closes\n        };\n        var onClose = function () {\n          connection.removeListener(\"close\", onClose);\n          if (!_this._isClosing) {\n            thisConnection.emit(\"lost_connection\");\n            restart(new Error(\"Connection closed by remote host\"));\n          }\n        };\n        connection.on(\"error\", restart);\n        connection.on(\"close\", onClose);\n        //connection.on(\"end\", restart); // not sure this is needed\n        thisConnection._connection = connection;\n        thisConnection.isConnected = true;\n        callback(null);\n      }\n    });\n  };\n  Connection.prototype._rebuildAll = function (err) {\n    var _this = this;\n    exports.log.log(\"warn\", \"Connection error: \" + err.message, {\n      module: \"amqp-ts\"\n    });\n    exports.log.log(\"debug\", \"Rebuilding connection NOW.\", {\n      module: \"amqp-ts\"\n    });\n    this.rebuildConnection();\n    //re initialize exchanges, queues and bindings if they exist\n    for (var exchangeId in this._exchanges) {\n      var exchange = this._exchanges[exchangeId];\n      exports.log.log(\"debug\", \"Re-initialize Exchange '\" + exchange._name + \"'.\", {\n        module: \"amqp-ts\"\n      });\n      exchange._initialize();\n    }\n    for (var queueId in this._queues) {\n      var queue = this._queues[queueId];\n      var consumer = queue._consumer;\n      exports.log.log(\"debug\", \"Re-initialize queue '\" + queue._name + \"'.\", {\n        module: \"amqp-ts\"\n      });\n      queue._initialize();\n      if (consumer) {\n        exports.log.log(\"debug\", \"Re-initialize consumer for queue '\" + queue._name + \"'.\", {\n          module: \"amqp-ts\"\n        });\n        queue._initializeConsumer();\n      }\n    }\n    for (var bindingId in this._bindings) {\n      var binding = this._bindings[bindingId];\n      exports.log.log(\"debug\", \"Re-initialize binding from '\" + binding._source._name + \"' to '\" + binding._destination._name + \"'.\", {\n        module: \"amqp-ts\"\n      });\n      binding._initialize();\n    }\n    return new Promise(function (resolve, reject) {\n      _this.completeConfiguration().then(function () {\n        exports.log.log(\"debug\", \"Rebuild success.\", {\n          module: \"amqp-ts\"\n        });\n        resolve(null);\n      }, /* istanbul ignore next */function (rejectReason) {\n        exports.log.log(\"debug\", \"Rebuild failed.\", {\n          module: \"amqp-ts\"\n        });\n        reject(rejectReason);\n      });\n    });\n  };\n  Connection.prototype.close = function () {\n    var _this = this;\n    this._isClosing = true;\n    return new Promise(function (resolve, reject) {\n      _this.initialized.then(function () {\n        _this._connection.close(function (err) {\n          /* istanbul ignore if */\n          if (err) {\n            reject(err);\n          } else {\n            _this.isConnected = false;\n            _this.emit(\"close_connection\");\n            resolve(null);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Make sure the whole defined connection topology is configured:\n   * return promise that fulfills after all defined exchanges, queues and bindings are initialized\n   */\n  Connection.prototype.completeConfiguration = function () {\n    var promises = [];\n    for (var exchangeId in this._exchanges) {\n      var exchange = this._exchanges[exchangeId];\n      promises.push(exchange.initialized);\n    }\n    for (var queueId in this._queues) {\n      var queue = this._queues[queueId];\n      promises.push(queue.initialized);\n      if (queue._consumerInitialized) {\n        promises.push(queue._consumerInitialized);\n      }\n    }\n    for (var bindingId in this._bindings) {\n      var binding = this._bindings[bindingId];\n      promises.push(binding.initialized);\n    }\n    return Promise.all(promises);\n  };\n  /**\n   * Delete the whole defined connection topology:\n   * return promise that fulfills after all defined exchanges, queues and bindings have been removed\n   */\n  Connection.prototype.deleteConfiguration = function () {\n    var promises = [];\n    for (var bindingId in this._bindings) {\n      var binding = this._bindings[bindingId];\n      promises.push(binding.delete());\n    }\n    for (var queueId in this._queues) {\n      var queue = this._queues[queueId];\n      if (queue._consumerInitialized) {\n        promises.push(queue.stopConsumer());\n      }\n      promises.push(queue.delete());\n    }\n    for (var exchangeId in this._exchanges) {\n      var exchange = this._exchanges[exchangeId];\n      promises.push(exchange.delete());\n    }\n    return Promise.all(promises);\n  };\n  Connection.prototype.declareExchange = function (name, type, options) {\n    var exchange = this._exchanges[name];\n    if (exchange === undefined) {\n      exchange = new Exchange(this, name, type, options);\n    }\n    return exchange;\n  };\n  Connection.prototype.declareQueue = function (name, options) {\n    var queue = this._queues[name];\n    if (queue === undefined) {\n      queue = new Queue(this, name, options);\n    }\n    return queue;\n  };\n  Connection.prototype.declareTopology = function (topology) {\n    var promises = [];\n    var i;\n    var len;\n    if (topology.exchanges !== undefined) {\n      for (i = 0, len = topology.exchanges.length; i < len; i++) {\n        var exchange = topology.exchanges[i];\n        promises.push(this.declareExchange(exchange.name, exchange.type, exchange.options).initialized);\n      }\n    }\n    if (topology.queues !== undefined) {\n      for (i = 0, len = topology.queues.length; i < len; i++) {\n        var queue = topology.queues[i];\n        promises.push(this.declareQueue(queue.name, queue.options).initialized);\n      }\n    }\n    if (topology.bindings !== undefined) {\n      for (i = 0, len = topology.bindings.length; i < len; i++) {\n        var binding = topology.bindings[i];\n        var source = this.declareExchange(binding.source);\n        var destination;\n        if (binding.exchange !== undefined) {\n          destination = this.declareExchange(binding.exchange);\n        } else {\n          destination = this.declareQueue(binding.queue);\n        }\n        promises.push(destination.bind(source, binding.pattern, binding.args));\n      }\n    }\n    return Promise.all(promises);\n  };\n  Object.defineProperty(Connection.prototype, \"getConnection\", {\n    get: function () {\n      return this._connection;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Connection;\n}(events_1.EventEmitter);\nexports.Connection = Connection;\n(function (Connection) {\n  \"use strict\";\n})(Connection = exports.Connection || (exports.Connection = {}));\nexports.Connection = Connection;\n//----------------------------------------------------------------------------------------------------\n// Message class\n//----------------------------------------------------------------------------------------------------\nvar Message = /** @class */function () {\n  function Message(content, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.properties = options;\n    if (content !== undefined) {\n      this.setContent(content);\n    }\n  }\n  Message.prototype.setContent = function (content) {\n    if (typeof content === \"string\") {\n      this.content = new Buffer(content);\n    } else if (!(content instanceof Buffer)) {\n      this.content = new Buffer(JSON.stringify(content));\n      this.properties.contentType = \"application/json\";\n    } else {\n      this.content = content;\n    }\n  };\n  Message.prototype.getContent = function () {\n    var content = this.content.toString();\n    if (this.properties.contentType === \"application/json\") {\n      content = JSON.parse(content);\n    }\n    return content;\n  };\n  Message.prototype.sendTo = function (destination, routingKey) {\n    var _this = this;\n    if (routingKey === void 0) {\n      routingKey = \"\";\n    }\n    // inline function to send the message\n    var sendMessage = function () {\n      try {\n        destination._channel.publish(exchange, routingKey, _this.content, _this.properties);\n      } catch (err) {\n        exports.log.log(\"debug\", \"Publish error: \" + err.message, {\n          module: \"amqp-ts\"\n        });\n        var destinationName = destination._name;\n        var connection = destination._connection;\n        exports.log.log(\"debug\", \"Try to rebuild connection, before Call.\", {\n          module: \"amqp-ts\"\n        });\n        connection._rebuildAll(err).then(function () {\n          exports.log.log(\"debug\", \"Retransmitting message.\", {\n            module: \"amqp-ts\"\n          });\n          if (destination instanceof Queue) {\n            connection._queues[destinationName].publish(_this.content, _this.properties);\n          } else {\n            connection._exchanges[destinationName].publish(_this.content, routingKey, _this.properties);\n          }\n        });\n      }\n    };\n    var exchange;\n    if (destination instanceof Queue) {\n      exchange = \"\";\n      routingKey = destination._name;\n    } else {\n      exchange = destination._name;\n    }\n    // execute sync when possible\n    if (destination.initialized.isFulfilled()) {\n      sendMessage();\n    } else {\n      destination.initialized.then(sendMessage);\n    }\n  };\n  Message.prototype.ack = function (allUpTo) {\n    if (this._channel !== undefined) {\n      this._channel.ack(this._message, allUpTo);\n    }\n  };\n  Message.prototype.nack = function (allUpTo, requeue) {\n    if (this._channel !== undefined) {\n      this._channel.nack(this._message, allUpTo, requeue);\n    }\n  };\n  Message.prototype.reject = function (requeue) {\n    if (requeue === void 0) {\n      requeue = false;\n    }\n    if (this._channel !== undefined) {\n      this._channel.reject(this._message, requeue);\n    }\n  };\n  return Message;\n}();\nexports.Message = Message;\n//----------------------------------------------------------------------------------------------------\n// Exchange class\n//----------------------------------------------------------------------------------------------------\nvar Exchange = /** @class */function () {\n  function Exchange(connection, name, type, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._consumer_handlers = new Array();\n    this._isConsumerInitializedRcp = false;\n    this._connection = connection;\n    this._name = name;\n    this._type = type;\n    this._options = options;\n    this._initialize();\n  }\n  Object.defineProperty(Exchange.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Exchange.prototype, \"type\", {\n    get: function () {\n      return this._type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Exchange.prototype._initialize = function () {\n    var _this = this;\n    this.initialized = new Promise(function (resolve, reject) {\n      _this._connection.initialized.then(function () {\n        _this._connection._connection.createChannel(function (err, channel) {\n          /* istanbul ignore if */\n          if (err) {\n            reject(err);\n          } else {\n            _this._channel = channel;\n            var callback = function (err, ok) {\n              /* istanbul ignore if */\n              if (err) {\n                exports.log.log(\"error\", \"Failed to create exchange '\" + _this._name + \"'.\", {\n                  module: \"amqp-ts\"\n                });\n                delete _this._connection._exchanges[_this._name];\n                reject(err);\n              } else {\n                resolve(ok);\n              }\n            };\n            if (_this._options.noCreate) {\n              _this._channel.checkExchange(_this._name, callback);\n            } else {\n              _this._channel.assertExchange(_this._name, _this._type, _this._options, callback);\n            }\n          }\n        });\n      }).catch(function (err) {\n        exports.log.log(\"warn\", \"Channel failure, error caused during connection!\", {\n          module: \"amqp-ts\"\n        });\n      });\n    });\n    this._connection._exchanges[this._name] = this;\n  };\n  /**\n   * deprecated, use 'exchange.send(message: Message, routingKey?: string)' instead\n   */\n  Exchange.prototype.publish = function (content, routingKey, options) {\n    var _this = this;\n    if (routingKey === void 0) {\n      routingKey = \"\";\n    }\n    if (options === void 0) {\n      options = {};\n    }\n    if (typeof content === \"string\") {\n      content = new Buffer(content);\n    } else if (!(content instanceof Buffer)) {\n      content = new Buffer(JSON.stringify(content));\n      options.contentType = options.contentType || \"application/json\";\n    }\n    this.initialized.then(function () {\n      try {\n        _this._channel.publish(_this._name, routingKey, content, options);\n      } catch (err) {\n        exports.log.log(\"warn\", \"Exchange publish error: \" + err.message, {\n          module: \"amqp-ts\"\n        });\n        var exchangeName = _this._name;\n        var connection = _this._connection;\n        connection._rebuildAll(err).then(function () {\n          exports.log.log(\"debug\", \"Retransmitting message.\", {\n            module: \"amqp-ts\"\n          });\n          connection._exchanges[exchangeName].publish(content, routingKey, options);\n        });\n      }\n    });\n  };\n  Exchange.prototype.send = function (message, routingKey) {\n    if (routingKey === void 0) {\n      routingKey = \"\";\n    }\n    message.sendTo(this, routingKey);\n  };\n  Exchange.prototype.rpc = function (requestParameters, routingKey, callback) {\n    var _this = this;\n    if (routingKey === void 0) {\n      routingKey = \"\";\n    }\n    return new Promise(function (resolve, reject) {\n      function generateUuid() {\n        return Math.random().toString() + Math.random().toString() + Math.random().toString();\n      }\n      var processRpc = function () {\n        var uuid = generateUuid();\n        if (!_this._isConsumerInitializedRcp) {\n          _this._isConsumerInitializedRcp = true;\n          _this._channel.consume(DIRECT_REPLY_TO_QUEUE, function (resultMsg) {\n            var result = new Message(resultMsg.content, resultMsg.fields);\n            result.fields = resultMsg.fields;\n            for (var _i = 0, _a = _this._consumer_handlers; _i < _a.length; _i++) {\n              var handler = _a[_i];\n              if (handler[0] === resultMsg.properties.correlationId) {\n                var func = handler[1];\n                func.apply(\"\", [undefined, result]);\n              }\n            }\n          }, {\n            noAck: true\n          }, function (err, ok) {\n            /* istanbul ignore if */\n            if (err) {\n              reject(new Error(\"amqp-ts: Queue.rpc error: \" + err.message));\n            } else {\n              // send the rpc request\n              _this._consumer_handlers.push([uuid, callback]);\n              // consumerTag = ok.consumerTag;\n              var message = new Message(requestParameters, {\n                correlationId: uuid,\n                replyTo: DIRECT_REPLY_TO_QUEUE\n              });\n              message.sendTo(_this, routingKey);\n            }\n          });\n        } else {\n          _this._consumer_handlers.push([uuid, callback]);\n          var message = new Message(requestParameters, {\n            correlationId: uuid,\n            replyTo: DIRECT_REPLY_TO_QUEUE\n          });\n          message.sendTo(_this, routingKey);\n        }\n      };\n      // execute sync when possible\n      if (_this.initialized.isFulfilled()) {\n        processRpc();\n      } else {\n        _this.initialized.then(processRpc);\n      }\n    });\n  };\n  Exchange.prototype.delete = function () {\n    var _this = this;\n    if (this._deleting === undefined) {\n      this._deleting = new Promise(function (resolve, reject) {\n        _this.initialized.then(function () {\n          return Binding.removeBindingsContaining(_this);\n        }).then(function () {\n          _this._channel.deleteExchange(_this._name, {}, function (err, ok) {\n            /* istanbul ignore if */\n            if (err) {\n              reject(err);\n            } else {\n              _this._channel.close(function (err) {\n                delete _this.initialized; // invalidate exchange\n                delete _this._connection._exchanges[_this._name]; // remove the exchange from our administration\n                /* istanbul ignore if */\n                if (err) {\n                  reject(err);\n                } else {\n                  delete _this._channel;\n                  delete _this._connection;\n                  resolve(null);\n                }\n              });\n            }\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n    return this._deleting;\n  };\n  Exchange.prototype.close = function () {\n    var _this = this;\n    if (this._closing === undefined) {\n      this._closing = new Promise(function (resolve, reject) {\n        _this.initialized.then(function () {\n          return Binding.removeBindingsContaining(_this);\n        }).then(function () {\n          delete _this.initialized; // invalidate exchange\n          delete _this._connection._exchanges[_this._name]; // remove the exchange from our administration\n          _this._channel.close(function (err) {\n            /* istanbul ignore if */\n            if (err) {\n              reject(err);\n            } else {\n              delete _this._channel;\n              delete _this._connection;\n              resolve(null);\n            }\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n    return this._closing;\n  };\n  Exchange.prototype.bind = function (source, pattern, args) {\n    if (pattern === void 0) {\n      pattern = \"\";\n    }\n    if (args === void 0) {\n      args = {};\n    }\n    var binding = new Binding(this, source, pattern, args);\n    return binding.initialized;\n  };\n  Exchange.prototype.unbind = function (source, pattern, args) {\n    if (pattern === void 0) {\n      pattern = \"\";\n    }\n    if (args === void 0) {\n      args = {};\n    }\n    return this._connection._bindings[Binding.id(this, source, pattern)].delete();\n  };\n  Exchange.prototype.consumerQueueName = function () {\n    return this._name + \".\" + ApplicationName + \".\" + os.hostname() + \".\" + process.pid;\n  };\n  /**\n   * deprecated, use 'exchange.activateConsumer(...)' instead\n   */\n  Exchange.prototype.startConsumer = function (onMessage, options) {\n    var queueName = this.consumerQueueName();\n    if (this._connection._queues[queueName]) {\n      return new Promise(function (_, reject) {\n        reject(new Error(\"amqp-ts Exchange.startConsumer error: consumer already defined\"));\n      });\n    } else {\n      var promises = [];\n      var queue = this._connection.declareQueue(queueName, {\n        durable: false\n      });\n      promises.push(queue.initialized);\n      var binding = queue.bind(this);\n      promises.push(binding);\n      var consumer = queue.startConsumer(onMessage, options);\n      promises.push(consumer);\n      return Promise.all(promises);\n    }\n  };\n  Exchange.prototype.activateConsumer = function (onMessage, options) {\n    var queueName = this.consumerQueueName();\n    if (this._connection._queues[queueName]) {\n      return new Promise(function (_, reject) {\n        reject(new Error(\"amqp-ts Exchange.activateConsumer error: consumer already defined\"));\n      });\n    } else {\n      var promises = [];\n      var queue = this._connection.declareQueue(queueName, {\n        durable: false\n      });\n      promises.push(queue.initialized);\n      var binding = queue.bind(this);\n      promises.push(binding);\n      var consumer = queue.activateConsumer(onMessage, options);\n      promises.push(consumer);\n      return Promise.all(promises);\n    }\n  };\n  Exchange.prototype.stopConsumer = function () {\n    var queue = this._connection._queues[this.consumerQueueName()];\n    if (queue) {\n      return queue.delete();\n    } else {\n      return Promise.resolve();\n    }\n  };\n  return Exchange;\n}();\nexports.Exchange = Exchange;\n(function (Exchange) {\n  \"use strict\";\n})(Exchange = exports.Exchange || (exports.Exchange = {}));\nexports.Exchange = Exchange;\n//----------------------------------------------------------------------------------------------------\n// Queue class\n//----------------------------------------------------------------------------------------------------\nvar Queue = /** @class */function () {\n  function Queue(connection, name, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._connection = connection;\n    this._name = name;\n    this._options = options;\n    this._connection._queues[this._name] = this;\n    this._initialize();\n  }\n  Object.defineProperty(Queue.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Queue.prototype._initialize = function () {\n    var _this = this;\n    this.initialized = new Promise(function (resolve, reject) {\n      _this._connection.initialized.then(function () {\n        _this._connection._connection.createChannel(function (err, channel) {\n          /* istanbul ignore if */\n          if (err) {\n            reject(err);\n          } else {\n            _this._channel = channel;\n            var callback = function (err, ok) {\n              /* istanbul ignore if */\n              if (err) {\n                exports.log.log(\"error\", \"Failed to create queue '\" + _this._name + \"'.\", {\n                  module: \"amqp-ts\"\n                });\n                delete _this._connection._queues[_this._name];\n                reject(err);\n              } else {\n                if (_this._options.prefetch) {\n                  _this._channel.prefetch(_this._options.prefetch);\n                }\n                resolve(ok);\n              }\n            };\n            if (_this._options.noCreate) {\n              _this._channel.checkQueue(_this._name, callback);\n            } else {\n              _this._channel.assertQueue(_this._name, _this._options, callback);\n            }\n          }\n        });\n      }).catch(function (err) {\n        exports.log.log(\"warn\", \"Channel failure, error caused during connection!\", {\n          module: \"amqp-ts\"\n        });\n      });\n    });\n  };\n  Queue._packMessageContent = function (content, options) {\n    if (typeof content === \"string\") {\n      content = new Buffer(content);\n    } else if (!(content instanceof Buffer)) {\n      content = new Buffer(JSON.stringify(content));\n      options.contentType = \"application/json\";\n    }\n    return content;\n  };\n  Queue._unpackMessageContent = function (msg) {\n    var content = msg.content.toString();\n    if (msg.properties.contentType === \"application/json\") {\n      content = JSON.parse(content);\n    }\n    return content;\n  };\n  /**\n   * deprecated, use 'queue.send(message: Message)' instead\n   */\n  Queue.prototype.publish = function (content, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    // inline function to send the message\n    var sendMessage = function () {\n      try {\n        _this._channel.sendToQueue(_this._name, content, options);\n      } catch (err) {\n        exports.log.log(\"debug\", \"Queue publish error: \" + err.message, {\n          module: \"amqp-ts\"\n        });\n        var queueName = _this._name;\n        var connection = _this._connection;\n        exports.log.log(\"debug\", \"Try to rebuild connection, before Call.\", {\n          module: \"amqp-ts\"\n        });\n        connection._rebuildAll(err).then(function () {\n          exports.log.log(\"debug\", \"Retransmitting message.\", {\n            module: \"amqp-ts\"\n          });\n          connection._queues[queueName].publish(content, options);\n        });\n      }\n    };\n    content = Queue._packMessageContent(content, options);\n    // execute sync when possible\n    if (this.initialized.isFulfilled()) {\n      sendMessage();\n    } else {\n      this.initialized.then(sendMessage);\n    }\n  };\n  Queue.prototype.send = function (message) {\n    message.sendTo(this);\n  };\n  Queue.prototype.rpc = function (requestParameters) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var processRpc = function () {\n        var consumerTag;\n        _this._channel.consume(DIRECT_REPLY_TO_QUEUE, function (resultMsg) {\n          _this._channel.cancel(consumerTag);\n          var result = new Message(resultMsg.content, resultMsg.fields);\n          result.fields = resultMsg.fields;\n          resolve(result);\n        }, {\n          noAck: true\n        }, function (err, ok) {\n          /* istanbul ignore if */\n          if (err) {\n            reject(new Error(\"amqp-ts: Queue.rpc error: \" + err.message));\n          } else {\n            // send the rpc request\n            consumerTag = ok.consumerTag;\n            var message = new Message(requestParameters, {\n              replyTo: DIRECT_REPLY_TO_QUEUE\n            });\n            message.sendTo(_this);\n          }\n        });\n      };\n      // execute sync when possible\n      if (_this.initialized.isFulfilled()) {\n        processRpc();\n      } else {\n        _this.initialized.then(processRpc);\n      }\n    });\n  };\n  Queue.prototype.prefetch = function (count) {\n    var _this = this;\n    this.initialized.then(function () {\n      _this._channel.prefetch(count);\n      _this._options.prefetch = count;\n    });\n  };\n  Queue.prototype.recover = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.initialized.then(function () {\n        _this._channel.recover(function (err, ok) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * deprecated, use 'queue.activateConsumer(...)' instead\n   */\n  Queue.prototype.startConsumer = function (onMessage, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (this._consumerInitialized) {\n      return new Promise(function (_, reject) {\n        reject(new Error(\"amqp-ts Queue.startConsumer error: consumer already defined\"));\n      });\n    }\n    this._isStartConsumer = true;\n    this._rawConsumer = options.rawMessage === true;\n    delete options.rawMessage; // remove to avoid possible problems with amqplib\n    this._consumerOptions = options;\n    this._consumer = onMessage;\n    this._initializeConsumer();\n    return this._consumerInitialized;\n  };\n  Queue.prototype.activateConsumer = function (onMessage, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (this._consumerInitialized) {\n      return new Promise(function (_, reject) {\n        reject(new Error(\"amqp-ts Queue.activateConsumer error: consumer already defined\"));\n      });\n    }\n    this._consumerOptions = options;\n    this._consumer = onMessage;\n    this._initializeConsumer();\n    return this._consumerInitialized;\n  };\n  Queue.prototype._initializeConsumer = function () {\n    var _this = this;\n    var processedMsgConsumer = function (msg) {\n      try {\n        /* istanbul ignore if */\n        if (!msg) {\n          return; // ignore empty messages (for now)\n        }\n        var payload = Queue._unpackMessageContent(msg);\n        var result = _this._consumer(payload);\n        // convert the result to a promise if it isn't one already\n        Promise.resolve(result).then(function (resultValue) {\n          // check if there is a reply-to\n          if (msg.properties.replyTo) {\n            var options = {};\n            resultValue = Queue._packMessageContent(resultValue, options);\n            _this._channel.sendToQueue(msg.properties.replyTo, resultValue, options);\n          }\n          // 'hack' added to allow better manual ack control by client (less elegant, but should work)\n          if (_this._consumerOptions.manualAck !== true && _this._consumerOptions.noAck !== true) {\n            _this._channel.ack(msg);\n          }\n        }).catch(function (err) {\n          exports.log.log(\"error\", \"Queue.onMessage RPC promise returned error: \" + err.message, {\n            module: \"amqp-ts\"\n          });\n        });\n      } catch (err) {\n        /* istanbul ignore next */\n        exports.log.log(\"error\", \"Queue.onMessage consumer function returned error: \" + err.message, {\n          module: \"amqp-ts\"\n        });\n      }\n    };\n    var rawMsgConsumer = function (msg) {\n      try {\n        _this._consumer(msg, _this._channel);\n      } catch (err) {\n        /* istanbul ignore next */\n        exports.log.log(\"error\", \"Queue.onMessage consumer function returned error: \" + err.message, {\n          module: \"amqp-ts\"\n        });\n      }\n    };\n    var activateConsumerWrapper = function (msg) {\n      try {\n        var message = new Message(msg.content, msg.properties);\n        message.fields = msg.fields;\n        message._message = msg;\n        message._channel = _this._channel;\n        var result = _this._consumer(message);\n        // convert the result to a promise if it isn't one already\n        Promise.resolve(result).then(function (resultValue) {\n          // check if there is a reply-to\n          if (msg.properties.replyTo) {\n            if (!(resultValue instanceof Message)) {\n              resultValue = new Message(resultValue, {});\n            }\n            resultValue.properties.correlationId = msg.properties.correlationId;\n            _this._channel.sendToQueue(msg.properties.replyTo, resultValue.content, resultValue.properties);\n          }\n        }).catch(function (err) {\n          exports.log.log(\"error\", \"Queue.onMessage RPC promise returned error: \" + err.message, {\n            module: \"amqp-ts\"\n          });\n        });\n      } catch (err) {\n        /* istanbul ignore next */\n        exports.log.log(\"error\", \"Queue.onMessage consumer function returned error: \" + err.message, {\n          module: \"amqp-ts\"\n        });\n      }\n    };\n    this._consumerInitialized = new Promise(function (resolve, reject) {\n      _this.initialized.then(function () {\n        var consumerFunction = activateConsumerWrapper;\n        if (_this._isStartConsumer) {\n          consumerFunction = _this._rawConsumer ? rawMsgConsumer : processedMsgConsumer;\n        }\n        _this._channel.consume(_this._name, consumerFunction, _this._consumerOptions, function (err, ok) {\n          /* istanbul ignore if */\n          if (err) {\n            reject(err);\n          } else {\n            _this._consumerTag = ok.consumerTag;\n            resolve(ok);\n          }\n        });\n      });\n    });\n  };\n  Queue.prototype.stopConsumer = function () {\n    var _this = this;\n    if (!this._consumerInitialized || this._consumerStopping) {\n      return Promise.resolve();\n    }\n    this._consumerStopping = true;\n    return new Promise(function (resolve, reject) {\n      _this._consumerInitialized.then(function () {\n        _this._channel.cancel(_this._consumerTag, function (err, ok) {\n          /* istanbul ignore if */\n          if (err) {\n            reject(err);\n          } else {\n            delete _this._consumerInitialized;\n            delete _this._consumer;\n            delete _this._consumerOptions;\n            delete _this._consumerStopping;\n            resolve(null);\n          }\n        });\n      });\n    });\n  };\n  Queue.prototype.delete = function () {\n    var _this = this;\n    if (this._deleting === undefined) {\n      this._deleting = new Promise(function (resolve, reject) {\n        _this.initialized.then(function () {\n          return Binding.removeBindingsContaining(_this);\n        }).then(function () {\n          return _this.stopConsumer();\n        }).then(function () {\n          return _this._channel.deleteQueue(_this._name, {}, function (err, ok) {\n            /* istanbul ignore if */\n            if (err) {\n              reject(err);\n            } else {\n              delete _this.initialized; // invalidate queue\n              delete _this._connection._queues[_this._name]; // remove the queue from our administration\n              _this._channel.close(function (err) {\n                /* istanbul ignore if */\n                if (err) {\n                  reject(err);\n                } else {\n                  delete _this._channel;\n                  delete _this._connection;\n                  resolve(ok);\n                }\n              });\n            }\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n    return this._deleting;\n  };\n  Queue.prototype.close = function () {\n    var _this = this;\n    if (this._closing === undefined) {\n      this._closing = new Promise(function (resolve, reject) {\n        _this.initialized.then(function () {\n          return Binding.removeBindingsContaining(_this);\n        }).then(function () {\n          return _this.stopConsumer();\n        }).then(function () {\n          delete _this.initialized; // invalidate queue\n          delete _this._connection._queues[_this._name]; // remove the queue from our administration\n          _this._channel.close(function (err) {\n            /* istanbul ignore if */\n            if (err) {\n              reject(err);\n            } else {\n              delete _this._channel;\n              delete _this._connection;\n              resolve(null);\n            }\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n    return this._closing;\n  };\n  Queue.prototype.bind = function (source, pattern, args) {\n    if (pattern === void 0) {\n      pattern = \"\";\n    }\n    if (args === void 0) {\n      args = {};\n    }\n    var binding = new Binding(this, source, pattern, args);\n    return binding.initialized;\n  };\n  Queue.prototype.unbind = function (source, pattern, args) {\n    if (pattern === void 0) {\n      pattern = \"\";\n    }\n    if (args === void 0) {\n      args = {};\n    }\n    return this._connection._bindings[Binding.id(this, source, pattern)].delete();\n  };\n  return Queue;\n}();\nexports.Queue = Queue;\n(function (Queue) {\n  \"use strict\";\n})(Queue = exports.Queue || (exports.Queue = {}));\nexports.Queue = Queue;\n//----------------------------------------------------------------------------------------------------\n// Binding class\n//----------------------------------------------------------------------------------------------------\nvar Binding = /** @class */function () {\n  function Binding(destination, source, pattern, args) {\n    if (pattern === void 0) {\n      pattern = \"\";\n    }\n    if (args === void 0) {\n      args = {};\n    }\n    this._source = source;\n    this._destination = destination;\n    this._pattern = pattern;\n    this._args = args;\n    this._destination._connection._bindings[Binding.id(this._destination, this._source, this._pattern)] = this;\n    this._initialize();\n  }\n  Binding.prototype._initialize = function () {\n    var _this = this;\n    this.initialized = new Promise(function (resolve, reject) {\n      if (_this._destination instanceof Queue) {\n        var queue = _this._destination;\n        queue.initialized.then(function () {\n          queue._channel.bindQueue(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n            /* istanbul ignore if */\n            if (err) {\n              exports.log.log(\"error\", \"Failed to create queue binding (\" + _this._source._name + \"->\" + _this._destination._name + \")\", {\n                module: \"amqp-ts\"\n              });\n              delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n              reject(err);\n            } else {\n              resolve(_this);\n            }\n          });\n        });\n      } else {\n        var exchange = _this._destination;\n        exchange.initialized.then(function () {\n          exchange._channel.bindExchange(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n            /* istanbul ignore if */\n            if (err) {\n              exports.log.log(\"error\", \"Failed to create exchange binding (\" + _this._source._name + \"->\" + _this._destination._name + \")\", {\n                module: \"amqp-ts\"\n              });\n              delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n              reject(err);\n            } else {\n              resolve(_this);\n            }\n          });\n        });\n      }\n    });\n  };\n  Binding.prototype.delete = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      if (_this._destination instanceof Queue) {\n        var queue = _this._destination;\n        queue.initialized.then(function () {\n          queue._channel.unbindQueue(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n            /* istanbul ignore if */\n            if (err) {\n              reject(err);\n            } else {\n              delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n              resolve(null);\n            }\n          });\n        });\n      } else {\n        var exchange = _this._destination;\n        exchange.initialized.then(function () {\n          exchange._channel.unbindExchange(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n            /* istanbul ignore if */\n            if (err) {\n              reject(err);\n            } else {\n              delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n              resolve(null);\n            }\n          });\n        });\n      }\n    });\n  };\n  Binding.id = function (destination, source, pattern) {\n    pattern = pattern || \"\";\n    return \"[\" + source._name + \"]to\" + (destination instanceof Queue ? \"Queue\" : \"Exchange\") + \"[\" + destination._name + \"]\" + pattern;\n  };\n  Binding.removeBindingsContaining = function (connectionPoint) {\n    var connection = connectionPoint._connection;\n    var promises = [];\n    for (var bindingId in connection._bindings) {\n      var binding = connection._bindings[bindingId];\n      if (binding._source === connectionPoint || binding._destination === connectionPoint) {\n        promises.push(binding.delete());\n      }\n    }\n    return Promise.all(promises);\n  };\n  return Binding;\n}();\nexports.Binding = Binding;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","AmqpLib","require","Promise","winston","path","os","events_1","ApplicationName","process","env","AMQPTS_APPLICATIONNAME","parse","argv","name","basename","amqp_log","Logger","transports","Console","level","AMQPTS_LOGLEVEL","log","DIRECT_REPLY_TO_QUEUE","Connection","_super","url","socketOptions","reconnectStrategy","retries","interval","_this","call","connectedBefore","_rebuilding","_isClosing","isConnected","_exchanges","_queues","_bindings","rebuildConnection","module","initialized","_retry","resolve","reject","tryToConnect","err","emit","catch","thisConnection","retry","callback","connect","connection","setTimeout","restart","removeListener","_rebuildAll","onClose","Error","on","_connection","message","exchangeId","exchange","_name","_initialize","queueId","queue","consumer","_consumer","_initializeConsumer","bindingId","binding","_source","_destination","completeConfiguration","then","rejectReason","close","promises","push","_consumerInitialized","all","deleteConfiguration","delete","stopConsumer","declareExchange","type","options","undefined","Exchange","declareQueue","Queue","declareTopology","topology","i","len","exchanges","length","queues","bindings","source","destination","bind","pattern","args","get","enumerable","configurable","EventEmitter","Message","content","properties","setContent","Buffer","JSON","stringify","contentType","getContent","toString","sendTo","routingKey","sendMessage","_channel","publish","destinationName","isFulfilled","ack","allUpTo","_message","nack","requeue","_consumer_handlers","_isConsumerInitializedRcp","_type","_options","createChannel","channel","ok","noCreate","checkExchange","assertExchange","exchangeName","send","rpc","requestParameters","generateUuid","Math","random","processRpc","uuid","consume","resultMsg","result","fields","_i","_a","handler","correlationId","func","apply","noAck","replyTo","_deleting","Binding","removeBindingsContaining","deleteExchange","_closing","unbind","id","consumerQueueName","hostname","pid","startConsumer","onMessage","queueName","_","durable","activateConsumer","prefetch","checkQueue","assertQueue","_packMessageContent","_unpackMessageContent","msg","sendToQueue","consumerTag","cancel","count","recover","_isStartConsumer","_rawConsumer","rawMessage","_consumerOptions","processedMsgConsumer","payload","resultValue","manualAck","rawMsgConsumer","activateConsumerWrapper","consumerFunction","_consumerTag","_consumerStopping","deleteQueue","_pattern","_args","bindQueue","bindExchange","unbindQueue","unbindExchange","connectionPoint"],"sources":["/home/jp228/node_modules/amqp-ts/lib/amqp-ts.js"],"sourcesContent":["\"use strict\";\n/**\n * AmqpSimple.ts - provides a simple interface to read from and write to RabbitMQ amqp exchanges\n * Created by Ab on 17-9-2015.\n *\n * methods and properties starting with '_' signify that the scope of the item should be limited to\n * the inside of the enclosing namespace.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// simplified use of amqp exchanges and queues, wrapper for amqplib\nvar AmqpLib = require(\"amqplib/callback_api\");\nvar Promise = require(\"bluebird\");\nvar winston = require(\"winston\");\nvar path = require(\"path\");\nvar os = require(\"os\");\nvar events_1 = require(\"events\");\nvar ApplicationName = process.env.AMQPTS_APPLICATIONNAME ||\n    (path.parse ? path.parse(process.argv[1]).name : path.basename(process.argv[1]));\n// create a custom winston logger for amqp-ts\nvar amqp_log = new winston.Logger({\n    transports: [\n        new winston.transports.Console({\n            level: process.env.AMQPTS_LOGLEVEL || \"error\"\n        })\n    ]\n});\nexports.log = amqp_log;\n// name for the RabbitMQ direct reply-to queue\nvar DIRECT_REPLY_TO_QUEUE = \"amq.rabbitmq.reply-to\";\n//----------------------------------------------------------------------------------------------------\n// Connection class\n//----------------------------------------------------------------------------------------------------\nvar Connection = /** @class */ (function (_super) {\n    __extends(Connection, _super);\n    function Connection(url, socketOptions, reconnectStrategy) {\n        if (url === void 0) { url = \"amqp://localhost\"; }\n        if (socketOptions === void 0) { socketOptions = {}; }\n        if (reconnectStrategy === void 0) { reconnectStrategy = { retries: 0, interval: 1500 }; }\n        var _this = _super.call(this) || this;\n        _this.connectedBefore = false;\n        _this._rebuilding = false;\n        _this._isClosing = false;\n        _this.isConnected = false;\n        _this.url = url;\n        _this.socketOptions = socketOptions;\n        _this.reconnectStrategy = reconnectStrategy;\n        _this._exchanges = {};\n        _this._queues = {};\n        _this._bindings = {};\n        _this.rebuildConnection();\n        return _this;\n    }\n    Connection.prototype.rebuildConnection = function () {\n        var _this = this;\n        if (this._rebuilding) { // only one rebuild process can be active at any time\n            exports.log.log(\"debug\", \"Connection rebuild already in progress, joining active rebuild attempt.\", { module: \"amqp-ts\" });\n            return this.initialized;\n        }\n        this._retry = -1;\n        this._rebuilding = true;\n        this._isClosing = false;\n        // rebuild the connection\n        this.initialized = new Promise(function (resolve, reject) {\n            _this.tryToConnect(_this, 0, function (err) {\n                /* istanbul ignore if */\n                if (err) {\n                    _this._rebuilding = false;\n                    reject(err);\n                }\n                else {\n                    _this._rebuilding = false;\n                    if (_this.connectedBefore) {\n                        exports.log.log(\"warn\", \"Connection re-established\", { module: \"amqp-ts\" });\n                        _this.emit(\"re_established_connection\");\n                    }\n                    else {\n                        exports.log.log(\"info\", \"Connection established.\", { module: \"amqp-ts\" });\n                        _this.emit(\"open_connection\");\n                        _this.connectedBefore = true;\n                    }\n                    resolve(null);\n                }\n            });\n        });\n        /* istanbul ignore next */\n        this.initialized.catch(function (err) {\n            exports.log.log(\"warn\", \"Error creating connection!\", { module: \"amqp-ts\" });\n            _this.emit(\"error_connection\", err);\n            //throw (err);\n        });\n        return this.initialized;\n    };\n    Connection.prototype.tryToConnect = function (thisConnection, retry, callback) {\n        var _this = this;\n        AmqpLib.connect(thisConnection.url, thisConnection.socketOptions, function (err, connection) {\n            /* istanbul ignore if */\n            if (err) {\n                thisConnection.isConnected = false;\n                // only do every retry once, amqplib can return multiple connection errors for one connection request (error?)\n                if (retry <= _this._retry) {\n                    //amqpts_log.log(\"warn\" , \"Double retry \" + retry + \", skipping.\", {module: \"amqp-ts\"});\n                    return;\n                }\n                exports.log.log(\"warn\", \"Connection failed.\", { module: \"amqp-ts\" });\n                _this._retry = retry;\n                if (thisConnection.reconnectStrategy.retries === 0 || thisConnection.reconnectStrategy.retries > retry) {\n                    exports.log.log(\"warn\", \"Connection retry \" + (retry + 1) + \" in \" + thisConnection.reconnectStrategy.interval + \"ms\", { module: \"amqp-ts\" });\n                    thisConnection.emit(\"trying_connect\");\n                    setTimeout(thisConnection.tryToConnect, thisConnection.reconnectStrategy.interval, thisConnection, retry + 1, callback);\n                }\n                else { //no reconnect strategy, or retries exhausted, so return the error\n                    exports.log.log(\"warn\", \"Connection failed, exiting: No connection retries left (retry \" + retry + \").\", { module: \"amqp-ts\" });\n                    callback(err);\n                }\n            }\n            else {\n                var restart = function (err) {\n                    exports.log.log(\"debug\", \"Connection error occurred.\", { module: \"amqp-ts\" });\n                    connection.removeListener(\"error\", restart);\n                    //connection.removeListener(\"end\", restart); // not sure this is needed\n                    thisConnection._rebuildAll(err); //try to rebuild the topology when the connection  unexpectedly closes\n                };\n                var onClose = function () {\n                    connection.removeListener(\"close\", onClose);\n                    if (!_this._isClosing) {\n                        thisConnection.emit(\"lost_connection\");\n                        restart(new Error(\"Connection closed by remote host\"));\n                    }\n                };\n                connection.on(\"error\", restart);\n                connection.on(\"close\", onClose);\n                //connection.on(\"end\", restart); // not sure this is needed\n                thisConnection._connection = connection;\n                thisConnection.isConnected = true;\n                callback(null);\n            }\n        });\n    };\n    Connection.prototype._rebuildAll = function (err) {\n        var _this = this;\n        exports.log.log(\"warn\", \"Connection error: \" + err.message, { module: \"amqp-ts\" });\n        exports.log.log(\"debug\", \"Rebuilding connection NOW.\", { module: \"amqp-ts\" });\n        this.rebuildConnection();\n        //re initialize exchanges, queues and bindings if they exist\n        for (var exchangeId in this._exchanges) {\n            var exchange = this._exchanges[exchangeId];\n            exports.log.log(\"debug\", \"Re-initialize Exchange '\" + exchange._name + \"'.\", { module: \"amqp-ts\" });\n            exchange._initialize();\n        }\n        for (var queueId in this._queues) {\n            var queue = this._queues[queueId];\n            var consumer = queue._consumer;\n            exports.log.log(\"debug\", \"Re-initialize queue '\" + queue._name + \"'.\", { module: \"amqp-ts\" });\n            queue._initialize();\n            if (consumer) {\n                exports.log.log(\"debug\", \"Re-initialize consumer for queue '\" + queue._name + \"'.\", { module: \"amqp-ts\" });\n                queue._initializeConsumer();\n            }\n        }\n        for (var bindingId in this._bindings) {\n            var binding = this._bindings[bindingId];\n            exports.log.log(\"debug\", \"Re-initialize binding from '\" + binding._source._name + \"' to '\" +\n                binding._destination._name + \"'.\", { module: \"amqp-ts\" });\n            binding._initialize();\n        }\n        return new Promise(function (resolve, reject) {\n            _this.completeConfiguration().then(function () {\n                exports.log.log(\"debug\", \"Rebuild success.\", { module: \"amqp-ts\" });\n                resolve(null);\n            }, /* istanbul ignore next */ function (rejectReason) {\n                exports.log.log(\"debug\", \"Rebuild failed.\", { module: \"amqp-ts\" });\n                reject(rejectReason);\n            });\n        });\n    };\n    Connection.prototype.close = function () {\n        var _this = this;\n        this._isClosing = true;\n        return new Promise(function (resolve, reject) {\n            _this.initialized.then(function () {\n                _this._connection.close(function (err) {\n                    /* istanbul ignore if */\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        _this.isConnected = false;\n                        _this.emit(\"close_connection\");\n                        resolve(null);\n                    }\n                });\n            });\n        });\n    };\n    /**\n     * Make sure the whole defined connection topology is configured:\n     * return promise that fulfills after all defined exchanges, queues and bindings are initialized\n     */\n    Connection.prototype.completeConfiguration = function () {\n        var promises = [];\n        for (var exchangeId in this._exchanges) {\n            var exchange = this._exchanges[exchangeId];\n            promises.push(exchange.initialized);\n        }\n        for (var queueId in this._queues) {\n            var queue = this._queues[queueId];\n            promises.push(queue.initialized);\n            if (queue._consumerInitialized) {\n                promises.push(queue._consumerInitialized);\n            }\n        }\n        for (var bindingId in this._bindings) {\n            var binding = this._bindings[bindingId];\n            promises.push(binding.initialized);\n        }\n        return Promise.all(promises);\n    };\n    /**\n     * Delete the whole defined connection topology:\n     * return promise that fulfills after all defined exchanges, queues and bindings have been removed\n     */\n    Connection.prototype.deleteConfiguration = function () {\n        var promises = [];\n        for (var bindingId in this._bindings) {\n            var binding = this._bindings[bindingId];\n            promises.push(binding.delete());\n        }\n        for (var queueId in this._queues) {\n            var queue = this._queues[queueId];\n            if (queue._consumerInitialized) {\n                promises.push(queue.stopConsumer());\n            }\n            promises.push(queue.delete());\n        }\n        for (var exchangeId in this._exchanges) {\n            var exchange = this._exchanges[exchangeId];\n            promises.push(exchange.delete());\n        }\n        return Promise.all(promises);\n    };\n    Connection.prototype.declareExchange = function (name, type, options) {\n        var exchange = this._exchanges[name];\n        if (exchange === undefined) {\n            exchange = new Exchange(this, name, type, options);\n        }\n        return exchange;\n    };\n    Connection.prototype.declareQueue = function (name, options) {\n        var queue = this._queues[name];\n        if (queue === undefined) {\n            queue = new Queue(this, name, options);\n        }\n        return queue;\n    };\n    Connection.prototype.declareTopology = function (topology) {\n        var promises = [];\n        var i;\n        var len;\n        if (topology.exchanges !== undefined) {\n            for (i = 0, len = topology.exchanges.length; i < len; i++) {\n                var exchange = topology.exchanges[i];\n                promises.push(this.declareExchange(exchange.name, exchange.type, exchange.options).initialized);\n            }\n        }\n        if (topology.queues !== undefined) {\n            for (i = 0, len = topology.queues.length; i < len; i++) {\n                var queue = topology.queues[i];\n                promises.push(this.declareQueue(queue.name, queue.options).initialized);\n            }\n        }\n        if (topology.bindings !== undefined) {\n            for (i = 0, len = topology.bindings.length; i < len; i++) {\n                var binding = topology.bindings[i];\n                var source = this.declareExchange(binding.source);\n                var destination;\n                if (binding.exchange !== undefined) {\n                    destination = this.declareExchange(binding.exchange);\n                }\n                else {\n                    destination = this.declareQueue(binding.queue);\n                }\n                promises.push(destination.bind(source, binding.pattern, binding.args));\n            }\n        }\n        return Promise.all(promises);\n    };\n    Object.defineProperty(Connection.prototype, \"getConnection\", {\n        get: function () {\n            return this._connection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Connection;\n}(events_1.EventEmitter));\nexports.Connection = Connection;\n(function (Connection) {\n    \"use strict\";\n})(Connection = exports.Connection || (exports.Connection = {}));\nexports.Connection = Connection;\n//----------------------------------------------------------------------------------------------------\n// Message class\n//----------------------------------------------------------------------------------------------------\nvar Message = /** @class */ (function () {\n    function Message(content, options) {\n        if (options === void 0) { options = {}; }\n        this.properties = options;\n        if (content !== undefined) {\n            this.setContent(content);\n        }\n    }\n    Message.prototype.setContent = function (content) {\n        if (typeof content === \"string\") {\n            this.content = new Buffer(content);\n        }\n        else if (!(content instanceof Buffer)) {\n            this.content = new Buffer(JSON.stringify(content));\n            this.properties.contentType = \"application/json\";\n        }\n        else {\n            this.content = content;\n        }\n    };\n    Message.prototype.getContent = function () {\n        var content = this.content.toString();\n        if (this.properties.contentType === \"application/json\") {\n            content = JSON.parse(content);\n        }\n        return content;\n    };\n    Message.prototype.sendTo = function (destination, routingKey) {\n        var _this = this;\n        if (routingKey === void 0) { routingKey = \"\"; }\n        // inline function to send the message\n        var sendMessage = function () {\n            try {\n                destination._channel.publish(exchange, routingKey, _this.content, _this.properties);\n            }\n            catch (err) {\n                exports.log.log(\"debug\", \"Publish error: \" + err.message, { module: \"amqp-ts\" });\n                var destinationName = destination._name;\n                var connection = destination._connection;\n                exports.log.log(\"debug\", \"Try to rebuild connection, before Call.\", { module: \"amqp-ts\" });\n                connection._rebuildAll(err).then(function () {\n                    exports.log.log(\"debug\", \"Retransmitting message.\", { module: \"amqp-ts\" });\n                    if (destination instanceof Queue) {\n                        connection._queues[destinationName].publish(_this.content, _this.properties);\n                    }\n                    else {\n                        connection._exchanges[destinationName].publish(_this.content, routingKey, _this.properties);\n                    }\n                });\n            }\n        };\n        var exchange;\n        if (destination instanceof Queue) {\n            exchange = \"\";\n            routingKey = destination._name;\n        }\n        else {\n            exchange = destination._name;\n        }\n        // execute sync when possible\n        if (destination.initialized.isFulfilled()) {\n            sendMessage();\n        }\n        else {\n            destination.initialized.then(sendMessage);\n        }\n    };\n    Message.prototype.ack = function (allUpTo) {\n        if (this._channel !== undefined) {\n            this._channel.ack(this._message, allUpTo);\n        }\n    };\n    Message.prototype.nack = function (allUpTo, requeue) {\n        if (this._channel !== undefined) {\n            this._channel.nack(this._message, allUpTo, requeue);\n        }\n    };\n    Message.prototype.reject = function (requeue) {\n        if (requeue === void 0) { requeue = false; }\n        if (this._channel !== undefined) {\n            this._channel.reject(this._message, requeue);\n        }\n    };\n    return Message;\n}());\nexports.Message = Message;\n//----------------------------------------------------------------------------------------------------\n// Exchange class\n//----------------------------------------------------------------------------------------------------\nvar Exchange = /** @class */ (function () {\n    function Exchange(connection, name, type, options) {\n        if (options === void 0) { options = {}; }\n        this._consumer_handlers = new Array();\n        this._isConsumerInitializedRcp = false;\n        this._connection = connection;\n        this._name = name;\n        this._type = type;\n        this._options = options;\n        this._initialize();\n    }\n    Object.defineProperty(Exchange.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Exchange.prototype, \"type\", {\n        get: function () {\n            return this._type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Exchange.prototype._initialize = function () {\n        var _this = this;\n        this.initialized = new Promise(function (resolve, reject) {\n            _this._connection.initialized.then(function () {\n                _this._connection._connection.createChannel(function (err, channel) {\n                    /* istanbul ignore if */\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        _this._channel = channel;\n                        var callback = function (err, ok) {\n                            /* istanbul ignore if */\n                            if (err) {\n                                exports.log.log(\"error\", \"Failed to create exchange '\" + _this._name + \"'.\", { module: \"amqp-ts\" });\n                                delete _this._connection._exchanges[_this._name];\n                                reject(err);\n                            }\n                            else {\n                                resolve(ok);\n                            }\n                        };\n                        if (_this._options.noCreate) {\n                            _this._channel.checkExchange(_this._name, callback);\n                        }\n                        else {\n                            _this._channel.assertExchange(_this._name, _this._type, _this._options, callback);\n                        }\n                    }\n                });\n            }).catch(function (err) {\n                exports.log.log(\"warn\", \"Channel failure, error caused during connection!\", { module: \"amqp-ts\" });\n            });\n        });\n        this._connection._exchanges[this._name] = this;\n    };\n    /**\n     * deprecated, use 'exchange.send(message: Message, routingKey?: string)' instead\n     */\n    Exchange.prototype.publish = function (content, routingKey, options) {\n        var _this = this;\n        if (routingKey === void 0) { routingKey = \"\"; }\n        if (options === void 0) { options = {}; }\n        if (typeof content === \"string\") {\n            content = new Buffer(content);\n        }\n        else if (!(content instanceof Buffer)) {\n            content = new Buffer(JSON.stringify(content));\n            options.contentType = options.contentType || \"application/json\";\n        }\n        this.initialized.then(function () {\n            try {\n                _this._channel.publish(_this._name, routingKey, content, options);\n            }\n            catch (err) {\n                exports.log.log(\"warn\", \"Exchange publish error: \" + err.message, { module: \"amqp-ts\" });\n                var exchangeName = _this._name;\n                var connection = _this._connection;\n                connection._rebuildAll(err).then(function () {\n                    exports.log.log(\"debug\", \"Retransmitting message.\", { module: \"amqp-ts\" });\n                    connection._exchanges[exchangeName].publish(content, routingKey, options);\n                });\n            }\n        });\n    };\n    Exchange.prototype.send = function (message, routingKey) {\n        if (routingKey === void 0) { routingKey = \"\"; }\n        message.sendTo(this, routingKey);\n    };\n    Exchange.prototype.rpc = function (requestParameters, routingKey, callback) {\n        var _this = this;\n        if (routingKey === void 0) { routingKey = \"\"; }\n        return new Promise(function (resolve, reject) {\n            function generateUuid() {\n                return Math.random().toString() +\n                    Math.random().toString() +\n                    Math.random().toString();\n            }\n            var processRpc = function () {\n                var uuid = generateUuid();\n                if (!_this._isConsumerInitializedRcp) {\n                    _this._isConsumerInitializedRcp = true;\n                    _this._channel.consume(DIRECT_REPLY_TO_QUEUE, function (resultMsg) {\n                        var result = new Message(resultMsg.content, resultMsg.fields);\n                        result.fields = resultMsg.fields;\n                        for (var _i = 0, _a = _this._consumer_handlers; _i < _a.length; _i++) {\n                            var handler = _a[_i];\n                            if (handler[0] === resultMsg.properties.correlationId) {\n                                var func = handler[1];\n                                func.apply(\"\", [undefined, result]);\n                            }\n                        }\n                    }, { noAck: true }, function (err, ok) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            reject(new Error(\"amqp-ts: Queue.rpc error: \" + err.message));\n                        }\n                        else {\n                            // send the rpc request\n                            _this._consumer_handlers.push([uuid, callback]);\n                            // consumerTag = ok.consumerTag;\n                            var message = new Message(requestParameters, { correlationId: uuid, replyTo: DIRECT_REPLY_TO_QUEUE });\n                            message.sendTo(_this, routingKey);\n                        }\n                    });\n                }\n                else {\n                    _this._consumer_handlers.push([uuid, callback]);\n                    var message = new Message(requestParameters, { correlationId: uuid, replyTo: DIRECT_REPLY_TO_QUEUE });\n                    message.sendTo(_this, routingKey);\n                }\n            };\n            // execute sync when possible\n            if (_this.initialized.isFulfilled()) {\n                processRpc();\n            }\n            else {\n                _this.initialized.then(processRpc);\n            }\n        });\n    };\n    Exchange.prototype.delete = function () {\n        var _this = this;\n        if (this._deleting === undefined) {\n            this._deleting = new Promise(function (resolve, reject) {\n                _this.initialized.then(function () {\n                    return Binding.removeBindingsContaining(_this);\n                }).then(function () {\n                    _this._channel.deleteExchange(_this._name, {}, function (err, ok) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            _this._channel.close(function (err) {\n                                delete _this.initialized; // invalidate exchange\n                                delete _this._connection._exchanges[_this._name]; // remove the exchange from our administration\n                                /* istanbul ignore if */\n                                if (err) {\n                                    reject(err);\n                                }\n                                else {\n                                    delete _this._channel;\n                                    delete _this._connection;\n                                    resolve(null);\n                                }\n                            });\n                        }\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n        }\n        return this._deleting;\n    };\n    Exchange.prototype.close = function () {\n        var _this = this;\n        if (this._closing === undefined) {\n            this._closing = new Promise(function (resolve, reject) {\n                _this.initialized.then(function () {\n                    return Binding.removeBindingsContaining(_this);\n                }).then(function () {\n                    delete _this.initialized; // invalidate exchange\n                    delete _this._connection._exchanges[_this._name]; // remove the exchange from our administration\n                    _this._channel.close(function (err) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            delete _this._channel;\n                            delete _this._connection;\n                            resolve(null);\n                        }\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n        }\n        return this._closing;\n    };\n    Exchange.prototype.bind = function (source, pattern, args) {\n        if (pattern === void 0) { pattern = \"\"; }\n        if (args === void 0) { args = {}; }\n        var binding = new Binding(this, source, pattern, args);\n        return binding.initialized;\n    };\n    Exchange.prototype.unbind = function (source, pattern, args) {\n        if (pattern === void 0) { pattern = \"\"; }\n        if (args === void 0) { args = {}; }\n        return this._connection._bindings[Binding.id(this, source, pattern)].delete();\n    };\n    Exchange.prototype.consumerQueueName = function () {\n        return this._name + \".\" + ApplicationName + \".\" + os.hostname() + \".\" + process.pid;\n    };\n    /**\n     * deprecated, use 'exchange.activateConsumer(...)' instead\n     */\n    Exchange.prototype.startConsumer = function (onMessage, options) {\n        var queueName = this.consumerQueueName();\n        if (this._connection._queues[queueName]) {\n            return new Promise(function (_, reject) {\n                reject(new Error(\"amqp-ts Exchange.startConsumer error: consumer already defined\"));\n            });\n        }\n        else {\n            var promises = [];\n            var queue = this._connection.declareQueue(queueName, { durable: false });\n            promises.push(queue.initialized);\n            var binding = queue.bind(this);\n            promises.push(binding);\n            var consumer = queue.startConsumer(onMessage, options);\n            promises.push(consumer);\n            return Promise.all(promises);\n        }\n    };\n    Exchange.prototype.activateConsumer = function (onMessage, options) {\n        var queueName = this.consumerQueueName();\n        if (this._connection._queues[queueName]) {\n            return new Promise(function (_, reject) {\n                reject(new Error(\"amqp-ts Exchange.activateConsumer error: consumer already defined\"));\n            });\n        }\n        else {\n            var promises = [];\n            var queue = this._connection.declareQueue(queueName, { durable: false });\n            promises.push(queue.initialized);\n            var binding = queue.bind(this);\n            promises.push(binding);\n            var consumer = queue.activateConsumer(onMessage, options);\n            promises.push(consumer);\n            return Promise.all(promises);\n        }\n    };\n    Exchange.prototype.stopConsumer = function () {\n        var queue = this._connection._queues[this.consumerQueueName()];\n        if (queue) {\n            return queue.delete();\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    return Exchange;\n}());\nexports.Exchange = Exchange;\n(function (Exchange) {\n    \"use strict\";\n})(Exchange = exports.Exchange || (exports.Exchange = {}));\nexports.Exchange = Exchange;\n//----------------------------------------------------------------------------------------------------\n// Queue class\n//----------------------------------------------------------------------------------------------------\nvar Queue = /** @class */ (function () {\n    function Queue(connection, name, options) {\n        if (options === void 0) { options = {}; }\n        this._connection = connection;\n        this._name = name;\n        this._options = options;\n        this._connection._queues[this._name] = this;\n        this._initialize();\n    }\n    Object.defineProperty(Queue.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Queue.prototype._initialize = function () {\n        var _this = this;\n        this.initialized = new Promise(function (resolve, reject) {\n            _this._connection.initialized.then(function () {\n                _this._connection._connection.createChannel(function (err, channel) {\n                    /* istanbul ignore if */\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        _this._channel = channel;\n                        var callback = function (err, ok) {\n                            /* istanbul ignore if */\n                            if (err) {\n                                exports.log.log(\"error\", \"Failed to create queue '\" + _this._name + \"'.\", { module: \"amqp-ts\" });\n                                delete _this._connection._queues[_this._name];\n                                reject(err);\n                            }\n                            else {\n                                if (_this._options.prefetch) {\n                                    _this._channel.prefetch(_this._options.prefetch);\n                                }\n                                resolve(ok);\n                            }\n                        };\n                        if (_this._options.noCreate) {\n                            _this._channel.checkQueue(_this._name, callback);\n                        }\n                        else {\n                            _this._channel.assertQueue(_this._name, _this._options, callback);\n                        }\n                    }\n                });\n            }).catch(function (err) {\n                exports.log.log(\"warn\", \"Channel failure, error caused during connection!\", { module: \"amqp-ts\" });\n            });\n        });\n    };\n    Queue._packMessageContent = function (content, options) {\n        if (typeof content === \"string\") {\n            content = new Buffer(content);\n        }\n        else if (!(content instanceof Buffer)) {\n            content = new Buffer(JSON.stringify(content));\n            options.contentType = \"application/json\";\n        }\n        return content;\n    };\n    Queue._unpackMessageContent = function (msg) {\n        var content = msg.content.toString();\n        if (msg.properties.contentType === \"application/json\") {\n            content = JSON.parse(content);\n        }\n        return content;\n    };\n    /**\n     * deprecated, use 'queue.send(message: Message)' instead\n     */\n    Queue.prototype.publish = function (content, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // inline function to send the message\n        var sendMessage = function () {\n            try {\n                _this._channel.sendToQueue(_this._name, content, options);\n            }\n            catch (err) {\n                exports.log.log(\"debug\", \"Queue publish error: \" + err.message, { module: \"amqp-ts\" });\n                var queueName = _this._name;\n                var connection = _this._connection;\n                exports.log.log(\"debug\", \"Try to rebuild connection, before Call.\", { module: \"amqp-ts\" });\n                connection._rebuildAll(err).then(function () {\n                    exports.log.log(\"debug\", \"Retransmitting message.\", { module: \"amqp-ts\" });\n                    connection._queues[queueName].publish(content, options);\n                });\n            }\n        };\n        content = Queue._packMessageContent(content, options);\n        // execute sync when possible\n        if (this.initialized.isFulfilled()) {\n            sendMessage();\n        }\n        else {\n            this.initialized.then(sendMessage);\n        }\n    };\n    Queue.prototype.send = function (message) {\n        message.sendTo(this);\n    };\n    Queue.prototype.rpc = function (requestParameters) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var processRpc = function () {\n                var consumerTag;\n                _this._channel.consume(DIRECT_REPLY_TO_QUEUE, function (resultMsg) {\n                    _this._channel.cancel(consumerTag);\n                    var result = new Message(resultMsg.content, resultMsg.fields);\n                    result.fields = resultMsg.fields;\n                    resolve(result);\n                }, { noAck: true }, function (err, ok) {\n                    /* istanbul ignore if */\n                    if (err) {\n                        reject(new Error(\"amqp-ts: Queue.rpc error: \" + err.message));\n                    }\n                    else {\n                        // send the rpc request\n                        consumerTag = ok.consumerTag;\n                        var message = new Message(requestParameters, { replyTo: DIRECT_REPLY_TO_QUEUE });\n                        message.sendTo(_this);\n                    }\n                });\n            };\n            // execute sync when possible\n            if (_this.initialized.isFulfilled()) {\n                processRpc();\n            }\n            else {\n                _this.initialized.then(processRpc);\n            }\n        });\n    };\n    Queue.prototype.prefetch = function (count) {\n        var _this = this;\n        this.initialized.then(function () {\n            _this._channel.prefetch(count);\n            _this._options.prefetch = count;\n        });\n    };\n    Queue.prototype.recover = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.initialized.then(function () {\n                _this._channel.recover(function (err, ok) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                });\n            });\n        });\n    };\n    /**\n     * deprecated, use 'queue.activateConsumer(...)' instead\n     */\n    Queue.prototype.startConsumer = function (onMessage, options) {\n        if (options === void 0) { options = {}; }\n        if (this._consumerInitialized) {\n            return new Promise(function (_, reject) {\n                reject(new Error(\"amqp-ts Queue.startConsumer error: consumer already defined\"));\n            });\n        }\n        this._isStartConsumer = true;\n        this._rawConsumer = (options.rawMessage === true);\n        delete options.rawMessage; // remove to avoid possible problems with amqplib\n        this._consumerOptions = options;\n        this._consumer = onMessage;\n        this._initializeConsumer();\n        return this._consumerInitialized;\n    };\n    Queue.prototype.activateConsumer = function (onMessage, options) {\n        if (options === void 0) { options = {}; }\n        if (this._consumerInitialized) {\n            return new Promise(function (_, reject) {\n                reject(new Error(\"amqp-ts Queue.activateConsumer error: consumer already defined\"));\n            });\n        }\n        this._consumerOptions = options;\n        this._consumer = onMessage;\n        this._initializeConsumer();\n        return this._consumerInitialized;\n    };\n    Queue.prototype._initializeConsumer = function () {\n        var _this = this;\n        var processedMsgConsumer = function (msg) {\n            try {\n                /* istanbul ignore if */\n                if (!msg) {\n                    return; // ignore empty messages (for now)\n                }\n                var payload = Queue._unpackMessageContent(msg);\n                var result = _this._consumer(payload);\n                // convert the result to a promise if it isn't one already\n                Promise.resolve(result).then(function (resultValue) {\n                    // check if there is a reply-to\n                    if (msg.properties.replyTo) {\n                        var options = {};\n                        resultValue = Queue._packMessageContent(resultValue, options);\n                        _this._channel.sendToQueue(msg.properties.replyTo, resultValue, options);\n                    }\n                    // 'hack' added to allow better manual ack control by client (less elegant, but should work)\n                    if (_this._consumerOptions.manualAck !== true && _this._consumerOptions.noAck !== true) {\n                        _this._channel.ack(msg);\n                    }\n                }).catch(function (err) {\n                    exports.log.log(\"error\", \"Queue.onMessage RPC promise returned error: \" + err.message, { module: \"amqp-ts\" });\n                });\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                exports.log.log(\"error\", \"Queue.onMessage consumer function returned error: \" + err.message, { module: \"amqp-ts\" });\n            }\n        };\n        var rawMsgConsumer = function (msg) {\n            try {\n                _this._consumer(msg, _this._channel);\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                exports.log.log(\"error\", \"Queue.onMessage consumer function returned error: \" + err.message, { module: \"amqp-ts\" });\n            }\n        };\n        var activateConsumerWrapper = function (msg) {\n            try {\n                var message = new Message(msg.content, msg.properties);\n                message.fields = msg.fields;\n                message._message = msg;\n                message._channel = _this._channel;\n                var result = _this._consumer(message);\n                // convert the result to a promise if it isn't one already\n                Promise.resolve(result).then(function (resultValue) {\n                    // check if there is a reply-to\n                    if (msg.properties.replyTo) {\n                        if (!(resultValue instanceof Message)) {\n                            resultValue = new Message(resultValue, {});\n                        }\n                        resultValue.properties.correlationId = msg.properties.correlationId;\n                        _this._channel.sendToQueue(msg.properties.replyTo, resultValue.content, resultValue.properties);\n                    }\n                }).catch(function (err) {\n                    exports.log.log(\"error\", \"Queue.onMessage RPC promise returned error: \" + err.message, { module: \"amqp-ts\" });\n                });\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                exports.log.log(\"error\", \"Queue.onMessage consumer function returned error: \" + err.message, { module: \"amqp-ts\" });\n            }\n        };\n        this._consumerInitialized = new Promise(function (resolve, reject) {\n            _this.initialized.then(function () {\n                var consumerFunction = activateConsumerWrapper;\n                if (_this._isStartConsumer) {\n                    consumerFunction = _this._rawConsumer ? rawMsgConsumer : processedMsgConsumer;\n                }\n                _this._channel.consume(_this._name, consumerFunction, _this._consumerOptions, function (err, ok) {\n                    /* istanbul ignore if */\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        _this._consumerTag = ok.consumerTag;\n                        resolve(ok);\n                    }\n                });\n            });\n        });\n    };\n    Queue.prototype.stopConsumer = function () {\n        var _this = this;\n        if (!this._consumerInitialized || this._consumerStopping) {\n            return Promise.resolve();\n        }\n        this._consumerStopping = true;\n        return new Promise(function (resolve, reject) {\n            _this._consumerInitialized.then(function () {\n                _this._channel.cancel(_this._consumerTag, function (err, ok) {\n                    /* istanbul ignore if */\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        delete _this._consumerInitialized;\n                        delete _this._consumer;\n                        delete _this._consumerOptions;\n                        delete _this._consumerStopping;\n                        resolve(null);\n                    }\n                });\n            });\n        });\n    };\n    Queue.prototype.delete = function () {\n        var _this = this;\n        if (this._deleting === undefined) {\n            this._deleting = new Promise(function (resolve, reject) {\n                _this.initialized.then(function () {\n                    return Binding.removeBindingsContaining(_this);\n                }).then(function () {\n                    return _this.stopConsumer();\n                }).then(function () {\n                    return _this._channel.deleteQueue(_this._name, {}, function (err, ok) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            delete _this.initialized; // invalidate queue\n                            delete _this._connection._queues[_this._name]; // remove the queue from our administration\n                            _this._channel.close(function (err) {\n                                /* istanbul ignore if */\n                                if (err) {\n                                    reject(err);\n                                }\n                                else {\n                                    delete _this._channel;\n                                    delete _this._connection;\n                                    resolve(ok);\n                                }\n                            });\n                        }\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n        }\n        return this._deleting;\n    };\n    Queue.prototype.close = function () {\n        var _this = this;\n        if (this._closing === undefined) {\n            this._closing = new Promise(function (resolve, reject) {\n                _this.initialized.then(function () {\n                    return Binding.removeBindingsContaining(_this);\n                }).then(function () {\n                    return _this.stopConsumer();\n                }).then(function () {\n                    delete _this.initialized; // invalidate queue\n                    delete _this._connection._queues[_this._name]; // remove the queue from our administration\n                    _this._channel.close(function (err) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            delete _this._channel;\n                            delete _this._connection;\n                            resolve(null);\n                        }\n                    });\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n        }\n        return this._closing;\n    };\n    Queue.prototype.bind = function (source, pattern, args) {\n        if (pattern === void 0) { pattern = \"\"; }\n        if (args === void 0) { args = {}; }\n        var binding = new Binding(this, source, pattern, args);\n        return binding.initialized;\n    };\n    Queue.prototype.unbind = function (source, pattern, args) {\n        if (pattern === void 0) { pattern = \"\"; }\n        if (args === void 0) { args = {}; }\n        return this._connection._bindings[Binding.id(this, source, pattern)].delete();\n    };\n    return Queue;\n}());\nexports.Queue = Queue;\n(function (Queue) {\n    \"use strict\";\n})(Queue = exports.Queue || (exports.Queue = {}));\nexports.Queue = Queue;\n//----------------------------------------------------------------------------------------------------\n// Binding class\n//----------------------------------------------------------------------------------------------------\nvar Binding = /** @class */ (function () {\n    function Binding(destination, source, pattern, args) {\n        if (pattern === void 0) { pattern = \"\"; }\n        if (args === void 0) { args = {}; }\n        this._source = source;\n        this._destination = destination;\n        this._pattern = pattern;\n        this._args = args;\n        this._destination._connection._bindings[Binding.id(this._destination, this._source, this._pattern)] = this;\n        this._initialize();\n    }\n    Binding.prototype._initialize = function () {\n        var _this = this;\n        this.initialized = new Promise(function (resolve, reject) {\n            if (_this._destination instanceof Queue) {\n                var queue = _this._destination;\n                queue.initialized.then(function () {\n                    queue._channel.bindQueue(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            exports.log.log(\"error\", \"Failed to create queue binding (\" +\n                                _this._source._name + \"->\" + _this._destination._name + \")\", { module: \"amqp-ts\" });\n                            delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n                            reject(err);\n                        }\n                        else {\n                            resolve(_this);\n                        }\n                    });\n                });\n            }\n            else {\n                var exchange = _this._destination;\n                exchange.initialized.then(function () {\n                    exchange._channel.bindExchange(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            exports.log.log(\"error\", \"Failed to create exchange binding (\" +\n                                _this._source._name + \"->\" + _this._destination._name + \")\", { module: \"amqp-ts\" });\n                            delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n                            reject(err);\n                        }\n                        else {\n                            resolve(_this);\n                        }\n                    });\n                });\n            }\n        });\n    };\n    Binding.prototype.delete = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this._destination instanceof Queue) {\n                var queue = _this._destination;\n                queue.initialized.then(function () {\n                    queue._channel.unbindQueue(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n                            resolve(null);\n                        }\n                    });\n                });\n            }\n            else {\n                var exchange = _this._destination;\n                exchange.initialized.then(function () {\n                    exchange._channel.unbindExchange(_this._destination._name, _this._source._name, _this._pattern, _this._args, function (err, ok) {\n                        /* istanbul ignore if */\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            delete _this._destination._connection._bindings[Binding.id(_this._destination, _this._source, _this._pattern)];\n                            resolve(null);\n                        }\n                    });\n                });\n            }\n        });\n    };\n    Binding.id = function (destination, source, pattern) {\n        pattern = pattern || \"\";\n        return \"[\" + source._name + \"]to\" + (destination instanceof Queue ? \"Queue\" : \"Exchange\") + \"[\" + destination._name + \"]\" + pattern;\n    };\n    Binding.removeBindingsContaining = function (connectionPoint) {\n        var connection = connectionPoint._connection;\n        var promises = [];\n        for (var bindingId in connection._bindings) {\n            var binding = connection._bindings[bindingId];\n            if (binding._source === connectionPoint || binding._destination === connectionPoint) {\n                promises.push(binding.delete());\n            }\n        }\n        return Promise.all(promises);\n    };\n    return Binding;\n}());\nexports.Binding = Binding;\n\n//# sourceMappingURL=amqp-ts.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}