{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/frontend/src/App.js\",\n  _s = $RefreshSig$();\n//import './App.css';\n//import './publisher.js'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n/*import React, { useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [status, setStatus] = useState('');\n\n  const handleSendMessage = async () => {\n    try {\n      const connection = new window.AMQP.Connection('amqp://guest:guest@192.168.192.1:5672');\n      const queue = connection.declareQueue('your_queue_name');\n      queue.send(message);\n      setStatus('Message sent successfully!');\n      connection.close();\n    } catch (error) {\n      console.error('Error sending message:', error.message);\n      setStatus('Error sending message');\n    }\n  };\n\n  return (\n    <div>\n      <h1>RabbitMQ Form</h1>\n      <label>\n        Message:\n        <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n      </label>\n      <button onClick={handleSendMessage}>Submit</button>\n      <p>Status: {status}</p>\n      \n      <script src=\"https://cdn.jsdelivr.net/npm/amqp-ts/browser/amqp-ts.min.js\"></script>\n    </div>\n  );\n};\n/*\n//export default RabbitMQForm;\n\nconst amqp = require('amqplib');\n\nconst queue = 'hello';\nconst text = 'Hello World!';\n\n(async () => {\n  let connection;\n  try {\n    connection = await amqp.connect('amqp://192.168.192.1:5672');\n    const channel = await connection.createChannel();\n\n    await channel.assertQueue(queue, { durable: false });\n\n    // NB: `sentToQueue` and `publish` both return a boolean\n    // indicating whether it's OK to send again straight away, or\n    // (when `false`) that you should wait for the event `'drain'`\n    // to fire before writing again. We're just doing the one write,\n    // so we'll ignore it.\n    channel.sendToQueue(queue, Buffer.from(text));\n    console.log(\" [x] Sent '%s'\", text);\n    await channel.close();\n  }\n  catch (err) {\n    console.warn(err);\n  }\n  finally {\n    if (connection) await connection.close();\n  };\n})();  */\n\n//export default App;\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [client, setClient] = useState(null);\n  useEffect(() => {\n    // Connect only once when the component mounts\n    const socket = new WebSocket('ws://192.168.192.211:15672/ws'); // Change URL if needed\n    const stompClient = Stomp.over(socket);\n    stompClient.connect({}, frame => {\n      console.log('Connected: ' + frame);\n      setClient(stompClient);\n    }, error => {\n      console.error('Error connecting to RabbitMQ:', error);\n    });\n\n    // Disconnect when the component unmounts\n    return () => {\n      if (client) {\n        client.disconnect();\n      }\n    };\n  }, [client]);\n  const sendMessage = () => {\n    if (client) {\n      client.send(\"/queue/frontendQueue\", {}, JSON.stringify({\n        message: message\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"5zHhMnf9Assz+zOpDYIdsXnPSes=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","jsxDEV","_jsxDEV","App","_s","message","setMessage","client","setClient","socket","WebSocket","stompClient","over","connect","frame","console","log","error","disconnect","sendMessage","send","JSON","stringify","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/frontend/src/App.js"],"sourcesContent":["//import './App.css';\n//import './publisher.js'\n\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n/*import React, { useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [status, setStatus] = useState('');\n\n  const handleSendMessage = async () => {\n    try {\n      const connection = new window.AMQP.Connection('amqp://guest:guest@192.168.192.1:5672');\n      const queue = connection.declareQueue('your_queue_name');\n      queue.send(message);\n      setStatus('Message sent successfully!');\n      connection.close();\n    } catch (error) {\n      console.error('Error sending message:', error.message);\n      setStatus('Error sending message');\n    }\n  };\n\n  return (\n    <div>\n      <h1>RabbitMQ Form</h1>\n      <label>\n        Message:\n        <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n      </label>\n      <button onClick={handleSendMessage}>Submit</button>\n      <p>Status: {status}</p>\n      \n      <script src=\"https://cdn.jsdelivr.net/npm/amqp-ts/browser/amqp-ts.min.js\"></script>\n    </div>\n  );\n};\n/*\n//export default RabbitMQForm;\n\nconst amqp = require('amqplib');\n\nconst queue = 'hello';\nconst text = 'Hello World!';\n\n(async () => {\n  let connection;\n  try {\n    connection = await amqp.connect('amqp://192.168.192.1:5672');\n    const channel = await connection.createChannel();\n\n    await channel.assertQueue(queue, { durable: false });\n\n    // NB: `sentToQueue` and `publish` both return a boolean\n    // indicating whether it's OK to send again straight away, or\n    // (when `false`) that you should wait for the event `'drain'`\n    // to fire before writing again. We're just doing the one write,\n    // so we'll ignore it.\n    channel.sendToQueue(queue, Buffer.from(text));\n    console.log(\" [x] Sent '%s'\", text);\n    await channel.close();\n  }\n  catch (err) {\n    console.warn(err);\n  }\n  finally {\n    if (connection) await connection.close();\n  };\n})();  */\n\n\n//export default App;\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\n\nconst App = () => {\n    const [message, setMessage] = useState('');\n    const [client, setClient] = useState(null);\n\n    useEffect(() => {\n        // Connect only once when the component mounts\n        const socket = new WebSocket('ws://192.168.192.211:15672/ws'); // Change URL if needed\n        const stompClient = Stomp.over(socket);\n\n        stompClient.connect({}, frame => {\n            console.log('Connected: ' + frame);\n            setClient(stompClient);\n        }, error => {\n            console.error('Error connecting to RabbitMQ:', error);\n        });\n\n        // Disconnect when the component unmounts\n        return () => {\n            if (client) {\n                client.disconnect();\n            }\n        };\n    }, [client]);\n\n    const sendMessage = () => {\n        if (client) {\n            client.send(\"/queue/frontendQueue\", {}, JSON.stringify({message: message}));\n        }\n    };\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n            />\n            <button onClick={sendMessage}>Send Message</button>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,KAAKC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,MAAM,GAAG,IAAIC,SAAS,CAAC,+BAA+B,CAAC,CAAC,CAAC;IAC/D,MAAMC,WAAW,GAAGX,KAAK,CAACY,IAAI,CAACH,MAAM,CAAC;IAEtCE,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC,EAAEC,KAAK,IAAI;MAC7BC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,KAAK,CAAC;MAClCN,SAAS,CAACG,WAAW,CAAC;IAC1B,CAAC,EAAEM,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACT,IAAIV,MAAM,EAAE;QACRA,MAAM,CAACW,UAAU,CAAC,CAAC;MACvB;IACJ,CAAC;EACL,CAAC,EAAE,CAACX,MAAM,CAAC,CAAC;EAEZ,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIZ,MAAM,EAAE;MACRA,MAAM,CAACa,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACjB,OAAO,EAAEA;MAAO,CAAC,CAAC,CAAC;IAC/E;EACJ,CAAC;EAED,oBACIH,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MACIsB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEpB,OAAQ;MACfqB,QAAQ,EAAGC,CAAC,IAAKrB,UAAU,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACF9B,OAAA;MAAQ+B,OAAO,EAAEd,WAAY;MAAAI,QAAA,EAAC;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAxCID,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA0CT,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}