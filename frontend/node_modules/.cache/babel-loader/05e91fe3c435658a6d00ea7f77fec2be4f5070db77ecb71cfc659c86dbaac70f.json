{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/New490/frontend/src/rabbitmq.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const handleLogin = (username, password) => {\n//         console.log(\"Login Attempt:\", username, password);\n//         //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n//         sendMessage(\"/queue/backendQueue\", { ID: \"True\"});\n//         // Here you would typically check credentials, etc.\n//         // This is just a placeholder for demonstration{validation: credentials are valid}\n//         setIsLoggedIn(true);\n//     };\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/queue/backendQueue', (receivedMessagemessage) => {\n//                     // Assuming message body is a JSON string\n//                     //const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessagemessage.body);\n//                     if (receivedMessagemessage.body='True') {\n//                         // Handle successful authentication\n//                         // Using React Router for redirection as an example\n//                         console.log('SUCCESS')\n//                     } else {\n//                         // Handle authentication failure\n//                         console.log(\"SORRY\")\n//                     }\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = (queue, messageContent) => {\n//         if (stompClient && isConnected) {\n//             // Use the `queue` parameter to dynamically set the destination\n//             // Convert the `messageContent` parameter to a JSON string to send as the message body\n//             stompClient.send(queue, {}, JSON.stringify(messageContent));\n//             console.log(\"Message sent to\", queue, \":\", messageContent);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login onLogin={handleLogin} />\n//             ) : (\n//                 <RabbitMQComponent />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for redirection\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RabbitMQComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const navigate = useNavigate(); // Initialize navigate for redirection\n\n  useEffect(() => {\n    const connect = () => {\n      const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n      const client = Stomp.over(socket);\n      const headers = {\n        login: \"admin\",\n        passcode: \"admin\"\n      };\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n        client.subscribe('/queue/backendQueue', message => {\n          console.log(\"Received message: \", message.body);\n          if (message.body === 'True') {\n            console.log('SUCCESS');\n            navigate('/dashboard'); // Redirect to dashboard upon successful message receipt\n          } else {\n            console.log(\"SORRY\");\n          }\n          setReceivedMessages(prevMessages => [...prevMessages, message.body]);\n        });\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n      });\n    };\n    connect();\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected from RabbitMQ\");\n          setIsConnected(false);\n        });\n      }\n    };\n  }, [navigate]); // Add navigate to the dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"RabbitMQ Connection Established\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 12\n  }, this);\n};\n_s(RabbitMQComponent, \"Qalz8uR1ToiM5y2lbOxc846SV2Q=\", false, function () {\n  return [useNavigate];\n});\n_c = RabbitMQComponent;\nexport default RabbitMQComponent;\nvar _c;\n$RefreshReg$(_c, \"RabbitMQComponent\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","useNavigate","jsxDEV","_jsxDEV","RabbitMQComponent","_s","stompClient","setStompClient","isConnected","setIsConnected","navigate","connect","socket","WebSocket","client","over","headers","login","passcode","frame","console","log","subscribe","message","body","setReceivedMessages","prevMessages","error","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/New490/frontend/src/rabbitmq.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n\n\n\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n\n\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const handleLogin = (username, password) => {\n//         console.log(\"Login Attempt:\", username, password);\n//         //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n//         sendMessage(\"/queue/backendQueue\", { ID: \"True\"});\n//         // Here you would typically check credentials, etc.\n//         // This is just a placeholder for demonstration{validation: credentials are valid}\n//         setIsLoggedIn(true);\n//     };\n\n\n\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/queue/backendQueue', (receivedMessagemessage) => {\n//                     // Assuming message body is a JSON string\n//                     //const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessagemessage.body);\n//                     if (receivedMessagemessage.body='True') {\n//                         // Handle successful authentication\n//                         // Using React Router for redirection as an example\n//                         console.log('SUCCESS')\n//                     } else {\n//                         // Handle authentication failure\n//                         console.log(\"SORRY\")\n//                     }\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = (queue, messageContent) => {\n//         if (stompClient && isConnected) {\n//             // Use the `queue` parameter to dynamically set the destination\n//             // Convert the `messageContent` parameter to a JSON string to send as the message body\n//             stompClient.send(queue, {}, JSON.stringify(messageContent));\n//             console.log(\"Message sent to\", queue, \":\", messageContent);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login onLogin={handleLogin} />\n//             ) : (\n//                 <RabbitMQComponent />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for redirection\n\nconst RabbitMQComponent = () => {\n    const [stompClient, setStompClient] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const navigate = useNavigate(); // Initialize navigate for redirection\n\n    useEffect(() => {\n        const connect = () => {\n            const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n            const client = Stomp.over(socket);\n\n            const headers = {\n                login: \"admin\",\n                passcode: \"admin\",\n            };\n\n            client.connect(headers, frame => {\n                console.log('Connected: ' + frame);\n                setStompClient(client);\n                setIsConnected(true);\n\n                client.subscribe('/queue/backendQueue', (message) => {\n                    console.log(\"Received message: \", message.body);\n                    if (message.body === 'True') {\n                        console.log('SUCCESS');\n                        navigate('/dashboard'); // Redirect to dashboard upon successful message receipt\n                    } else {\n                        console.log(\"SORRY\");\n                    }\n                    setReceivedMessages(prevMessages => [...prevMessages, message.body]);\n                });\n            }, error => {\n                console.error('Error connecting to RabbitMQ:', error);\n            });\n        };\n\n        connect();\n\n        return () => {\n            if (stompClient && isConnected) {\n                stompClient.disconnect(() => {\n                    console.log(\"Disconnected from RabbitMQ\");\n                    setIsConnected(false);\n                });\n            }\n        };\n    }, [navigate]); // Add navigate to the dependency array\n\n    return <div>RabbitMQ Connection Established</div>;\n};\n\nexport default RabbitMQComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}