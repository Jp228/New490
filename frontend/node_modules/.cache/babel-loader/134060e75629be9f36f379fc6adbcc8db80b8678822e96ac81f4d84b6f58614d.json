{"ast":null,"code":"/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst createLogger = require('./create-logger');\n\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\nmodule.exports = class Container {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  constructor(options = {}) {\n    this.loggers = new Map();\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  add(id, options) {\n    if (!this.loggers.has(id)) {\n      // Remark: Simple shallow clone for configuration options in case we pass\n      // in instantiated protoypal objects\n      options = Object.assign({}, options || this.options);\n      const existing = options.transports || this.options.transports;\n\n      // Remark: Make sure if we have an array of transports we slice it to\n      // make copies of those references.\n      if (existing) {\n        options.transports = Array.isArray(existing) ? existing.slice() : [existing];\n      } else {\n        options.transports = [];\n      }\n      const logger = createLogger(options);\n      logger.on('close', () => this._delete(id));\n      this.loggers.set(id, logger);\n    }\n    return this.loggers.get(id);\n  }\n\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If\n   * an instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  get(id, options) {\n    return this.add(id, options);\n  }\n\n  /**\n   * Check if the container has a logger with the id.\n   * @param {?string} id - The id of the Logger instance to find.\n   * @returns {boolean} - Boolean value indicating if this instance has a\n   * logger with the specified `id`.\n   */\n  has(id) {\n    return !!this.loggers.has(id);\n  }\n\n  /**\n   * Closes a `Logger` instance with the specified `id` if it exists.\n   * If no `id` is supplied then all Loggers are closed.\n   * @param {?string} id - The id of the Logger instance to close.\n   * @returns {undefined}\n   */\n  close(id) {\n    if (id) {\n      return this._removeLogger(id);\n    }\n    this.loggers.forEach((val, key) => this._removeLogger(key));\n  }\n\n  /**\n   * Remove a logger based on the id.\n   * @param {!string} id - The id of the logger to remove.\n   * @returns {undefined}\n   * @private\n   */\n  _removeLogger(id) {\n    if (!this.loggers.has(id)) {\n      return;\n    }\n    const logger = this.loggers.get(id);\n    logger.close();\n    this._delete(id);\n  }\n\n  /**\n   * Deletes a `Logger` instance with the specified `id`.\n   * @param {!string} id - The id of the Logger instance to delete from\n   * container.\n   * @returns {undefined}\n   * @private\n   */\n  _delete(id) {\n    this.loggers.delete(id);\n  }\n};","map":{"version":3,"names":["createLogger","require","module","exports","Container","constructor","options","loggers","Map","add","id","has","Object","assign","existing","transports","Array","isArray","slice","logger","on","_delete","set","get","close","_removeLogger","forEach","val","key","delete"],"sources":["/home/jp228/node_modules/winston/lib/winston/container.js"],"sourcesContent":["/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst createLogger = require('./create-logger');\n\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\nmodule.exports = class Container {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  constructor(options = {}) {\n    this.loggers = new Map();\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  add(id, options) {\n    if (!this.loggers.has(id)) {\n      // Remark: Simple shallow clone for configuration options in case we pass\n      // in instantiated protoypal objects\n      options = Object.assign({}, options || this.options);\n      const existing = options.transports || this.options.transports;\n\n      // Remark: Make sure if we have an array of transports we slice it to\n      // make copies of those references.\n      if (existing) {\n        options.transports = Array.isArray(existing) ? existing.slice() : [existing];\n      } else {\n        options.transports = [];\n      }\n\n      const logger = createLogger(options);\n      logger.on('close', () => this._delete(id));\n      this.loggers.set(id, logger);\n    }\n\n    return this.loggers.get(id);\n  }\n\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If\n   * an instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  get(id, options) {\n    return this.add(id, options);\n  }\n\n  /**\n   * Check if the container has a logger with the id.\n   * @param {?string} id - The id of the Logger instance to find.\n   * @returns {boolean} - Boolean value indicating if this instance has a\n   * logger with the specified `id`.\n   */\n  has(id) {\n    return !!this.loggers.has(id);\n  }\n\n  /**\n   * Closes a `Logger` instance with the specified `id` if it exists.\n   * If no `id` is supplied then all Loggers are closed.\n   * @param {?string} id - The id of the Logger instance to close.\n   * @returns {undefined}\n   */\n  close(id) {\n    if (id) {\n      return this._removeLogger(id);\n    }\n\n    this.loggers.forEach((val, key) => this._removeLogger(key));\n  }\n\n  /**\n   * Remove a logger based on the id.\n   * @param {!string} id - The id of the logger to remove.\n   * @returns {undefined}\n   * @private\n   */\n  _removeLogger(id) {\n    if (!this.loggers.has(id)) {\n      return;\n    }\n\n    const logger = this.loggers.get(id);\n    logger.close();\n    this._delete(id);\n  }\n\n  /**\n   * Deletes a `Logger` instance with the specified `id`.\n   * @param {!string} id - The id of the Logger instance to delete from\n   * container.\n   * @returns {undefined}\n   * @private\n   */\n  _delete(id) {\n    this.loggers.delete(id);\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAE/C;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,MAAMC,SAAS,CAAC;EAC/B;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACxB,IAAI,CAACF,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,GAAGA,CAACC,EAAE,EAAEJ,OAAO,EAAE;IACf,IAAI,CAAC,IAAI,CAACC,OAAO,CAACI,GAAG,CAACD,EAAE,CAAC,EAAE;MACzB;MACA;MACAJ,OAAO,GAAGM,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,OAAO,IAAI,IAAI,CAACA,OAAO,CAAC;MACpD,MAAMQ,QAAQ,GAAGR,OAAO,CAACS,UAAU,IAAI,IAAI,CAACT,OAAO,CAACS,UAAU;;MAE9D;MACA;MACA,IAAID,QAAQ,EAAE;QACZR,OAAO,CAACS,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,GAAGA,QAAQ,CAACI,KAAK,CAAC,CAAC,GAAG,CAACJ,QAAQ,CAAC;MAC9E,CAAC,MAAM;QACLR,OAAO,CAACS,UAAU,GAAG,EAAE;MACzB;MAEA,MAAMI,MAAM,GAAGnB,YAAY,CAACM,OAAO,CAAC;MACpCa,MAAM,CAACC,EAAE,CAAC,OAAO,EAAE,MAAM,IAAI,CAACC,OAAO,CAACX,EAAE,CAAC,CAAC;MAC1C,IAAI,CAACH,OAAO,CAACe,GAAG,CAACZ,EAAE,EAAES,MAAM,CAAC;IAC9B;IAEA,OAAO,IAAI,CAACZ,OAAO,CAACgB,GAAG,CAACb,EAAE,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEa,GAAGA,CAACb,EAAE,EAAEJ,OAAO,EAAE;IACf,OAAO,IAAI,CAACG,GAAG,CAACC,EAAE,EAAEJ,OAAO,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,GAAGA,CAACD,EAAE,EAAE;IACN,OAAO,CAAC,CAAC,IAAI,CAACH,OAAO,CAACI,GAAG,CAACD,EAAE,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEc,KAAKA,CAACd,EAAE,EAAE;IACR,IAAIA,EAAE,EAAE;MACN,OAAO,IAAI,CAACe,aAAa,CAACf,EAAE,CAAC;IAC/B;IAEA,IAAI,CAACH,OAAO,CAACmB,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK,IAAI,CAACH,aAAa,CAACG,GAAG,CAAC,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEH,aAAaA,CAACf,EAAE,EAAE;IAChB,IAAI,CAAC,IAAI,CAACH,OAAO,CAACI,GAAG,CAACD,EAAE,CAAC,EAAE;MACzB;IACF;IAEA,MAAMS,MAAM,GAAG,IAAI,CAACZ,OAAO,CAACgB,GAAG,CAACb,EAAE,CAAC;IACnCS,MAAM,CAACK,KAAK,CAAC,CAAC;IACd,IAAI,CAACH,OAAO,CAACX,EAAE,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEW,OAAOA,CAACX,EAAE,EAAE;IACV,IAAI,CAACH,OAAO,CAACsB,MAAM,CAACnB,EAAE,CAAC;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}