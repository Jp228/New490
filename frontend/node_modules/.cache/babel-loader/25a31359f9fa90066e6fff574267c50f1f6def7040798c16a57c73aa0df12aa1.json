{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\n\n// YourComponent.js\nimport React, { useState } from 'react';\n//import RabbitMQService from './RabbitMQService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const handleMessageSend = () => {\n    RabbitMQService.sendMessage(message);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMessageSend,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n/*\nimport { connect } from 'amqplib';\n\n// Function to send a message to the queue\nconst sendMessageToQueue = async (message) => {\n  try {\n    // Connect to RabbitMQ server\n    const connection = await connect('amqp://192.168.192.1:15672'); // Replace with your RabbitMQ server URL\n\n    // Create a channel\n    const channel = await connection.createChannel();\n\n    // Declare a queue (create if not exists)\n    const queueName = 'frontend_Queue';\n    await channel.assertQueue(queueName, { durable: false });\n\n    // Send message to the queue\n    channel.sendToQueue(queueName, Buffer.from(message));\n\n    console.log(`Message sent to ${queueName}: ${message}`);\n\n    // Close the connection and channel\n    await channel.close();\n    await connection.close();\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\n\n// Example usage\nsendMessageToQueue('Hello, RabbitMQ!');\n*/\n_s(App, \"l8KXAebGu4sZHsyCIQX7P8si41w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","handleMessageSend","RabbitMQService","sendMessage","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/frontend/src/App.js"],"sourcesContent":["import './App.css';\n\n// YourComponent.js\nimport React, { useState } from 'react';\n//import RabbitMQService from './RabbitMQService';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n\n  const handleMessageSend = () => {\n    RabbitMQService.sendMessage(message);\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <button onClick={handleMessageSend}>Send Message</button>\n    </div>\n  );\n};\n/*\nimport { connect } from 'amqplib';\n\n// Function to send a message to the queue\nconst sendMessageToQueue = async (message) => {\n  try {\n    // Connect to RabbitMQ server\n    const connection = await connect('amqp://192.168.192.1:15672'); // Replace with your RabbitMQ server URL\n\n    // Create a channel\n    const channel = await connection.createChannel();\n\n    // Declare a queue (create if not exists)\n    const queueName = 'frontend_Queue';\n    await channel.assertQueue(queueName, { durable: false });\n\n    // Send message to the queue\n    channel.sendToQueue(queueName, Buffer.from(message));\n\n    console.log(`Message sent to ${queueName}: ${message}`);\n\n    // Close the connection and channel\n    await channel.close();\n    await connection.close();\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\n\n// Example usage\nsendMessageToQueue('Hello, RabbitMQ!');\n*/\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;;AAElB;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9BC,eAAe,CAACC,WAAW,CAACJ,OAAO,CAAC;IACpCC,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,oBACEJ,OAAA;IAAAQ,QAAA,gBACER,OAAA;MACES,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEP,OAAQ;MACfQ,QAAQ,EAAGC,CAAC,IAAKR,UAAU,CAACQ,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACFjB,OAAA;MAAQkB,OAAO,EAAEb,iBAAkB;MAAAG,QAAA,EAAC;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BAf,EAAA,CAnBMD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAmDT,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}