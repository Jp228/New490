{"ast":null,"code":"import './App.css';\n/*\n// YourComponent.js\nimport React, { useState } from 'react';\n//import RabbitMQService from './RabbitMQService';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n\n  const handleMessageSend = () => {\n    RabbitMQService.sendMessage(message);\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <button onClick={handleMessageSend}>Send Message</button>\n    </div>\n  );\n};\n*/\nimport { connect } from 'amqplib';\n\n// Function to send a message to the queue\nconst sendMessageToQueue = async message => {\n  try {\n    // Connect to RabbitMQ server\n    const connection = await connect('amqp://192.168.192.1:15672'); // Replace with your RabbitMQ server URL\n\n    // Create a channel\n    const channel = await connection.createChannel();\n\n    // Declare a queue (create if not exists)\n    const queueName = 'frontend_Queue';\n    await channel.assertQueue(queueName, {\n      durable: false\n    });\n\n    // Send message to the queue\n    channel.sendToQueue(queueName, Buffer.from(message));\n    console.log(`Message sent to ${queueName}: ${message}`);\n\n    // Close the connection and channel\n    await channel.close();\n    await connection.close();\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\n\n// Example usage\nsendMessageToQueue('Hello, RabbitMQ!');\nexport default App;","map":{"version":3,"names":["connect","sendMessageToQueue","message","connection","channel","createChannel","queueName","assertQueue","durable","sendToQueue","Buffer","from","console","log","close","error","App"],"sources":["/home/jp228/Desktop/frontend/src/App.js"],"sourcesContent":["import './App.css';\n/*\n// YourComponent.js\nimport React, { useState } from 'react';\n//import RabbitMQService from './RabbitMQService';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n\n  const handleMessageSend = () => {\n    RabbitMQService.sendMessage(message);\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <button onClick={handleMessageSend}>Send Message</button>\n    </div>\n  );\n};\n*/\nimport { connect } from 'amqplib';\n\n// Function to send a message to the queue\nconst sendMessageToQueue = async (message) => {\n  try {\n    // Connect to RabbitMQ server\n    const connection = await connect('amqp://192.168.192.1:15672'); // Replace with your RabbitMQ server URL\n\n    // Create a channel\n    const channel = await connection.createChannel();\n\n    // Declare a queue (create if not exists)\n    const queueName = 'frontend_Queue';\n    await channel.assertQueue(queueName, { durable: false });\n\n    // Send message to the queue\n    channel.sendToQueue(queueName, Buffer.from(message));\n\n    console.log(`Message sent to ${queueName}: ${message}`);\n\n    // Close the connection and channel\n    await channel.close();\n    await connection.close();\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\n\n// Example usage\nsendMessageToQueue('Hello, RabbitMQ!');\n\nexport default App;\n"],"mappings":"AAAA,OAAO,WAAW;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,SAAS;;AAEjC;AACA,MAAMC,kBAAkB,GAAG,MAAOC,OAAO,IAAK;EAC5C,IAAI;IACF;IACA,MAAMC,UAAU,GAAG,MAAMH,OAAO,CAAC,4BAA4B,CAAC,CAAC,CAAC;;IAEhE;IACA,MAAMI,OAAO,GAAG,MAAMD,UAAU,CAACE,aAAa,CAAC,CAAC;;IAEhD;IACA,MAAMC,SAAS,GAAG,gBAAgB;IAClC,MAAMF,OAAO,CAACG,WAAW,CAACD,SAAS,EAAE;MAAEE,OAAO,EAAE;IAAM,CAAC,CAAC;;IAExD;IACAJ,OAAO,CAACK,WAAW,CAACH,SAAS,EAAEI,MAAM,CAACC,IAAI,CAACT,OAAO,CAAC,CAAC;IAEpDU,OAAO,CAACC,GAAG,CAAE,mBAAkBP,SAAU,KAAIJ,OAAQ,EAAC,CAAC;;IAEvD;IACA,MAAME,OAAO,CAACU,KAAK,CAAC,CAAC;IACrB,MAAMX,UAAU,CAACW,KAAK,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACb,OAAO,CAAC;EACxC;AACF,CAAC;;AAED;AACAD,kBAAkB,CAAC,kBAAkB,CAAC;AAEtC,eAAee,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}