{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/New490/frontend/src/RabbitMQComponent.jsx\",\n  _s = $RefreshSig$();\n// RabbitMQComponent.jsx\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport Login from './login'; // Adjust the import path if necessary\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RabbitMQComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const connect = () => {\n      const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n      const client = Stomp.over(socket);\n      const headers = {\n        login: \"admin\",\n        passcode: \"admin\"\n      };\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n        client.subscribe('/queue/backendQueue', message => {\n          console.log(\"Received message: \", message.body);\n          if (message.body === 'True') {\n            navigate('/dashboard'); // Navigate to the dashboard on success\n          } else {\n            console.log(\"Authentication failed\");\n          }\n        });\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n      });\n    };\n    connect();\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected from RabbitMQ\");\n        });\n      }\n    };\n  }, [navigate, stompClient, isConnected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Login, {\n      stompClient: stompClient,\n      isConnected: isConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(RabbitMQComponent, \"Qalz8uR1ToiM5y2lbOxc846SV2Q=\", false, function () {\n  return [useNavigate];\n});\n_c = RabbitMQComponent;\nexport default RabbitMQComponent;\nvar _c;\n$RefreshReg$(_c, \"RabbitMQComponent\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","Login","useNavigate","jsxDEV","_jsxDEV","RabbitMQComponent","_s","stompClient","setStompClient","isConnected","setIsConnected","navigate","connect","socket","WebSocket","client","over","headers","login","passcode","frame","console","log","subscribe","message","body","error","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/New490/frontend/src/RabbitMQComponent.jsx"],"sourcesContent":["// RabbitMQComponent.jsx\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport Login from './login'; // Adjust the import path if necessary\nimport { useNavigate } from 'react-router-dom';\n\nconst RabbitMQComponent = () => {\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const connect = () => {\n      const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n      const client = Stomp.over(socket);\n      const headers = {\n        login: \"admin\",\n        passcode: \"admin\",\n      };\n\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n\n        client.subscribe('/queue/backendQueue', (message) => {\n          console.log(\"Received message: \", message.body);\n          if (message.body === 'True') {\n            navigate('/dashboard'); // Navigate to the dashboard on success\n          } else {\n            console.log(\"Authentication failed\");\n          }\n        });\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n      });\n    };\n\n    connect();\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected from RabbitMQ\");\n        });\n      }\n    };\n  }, [navigate, stompClient, isConnected]);\n\n  return (\n    <div>\n      <Login stompClient={stompClient} isConnected={isConnected} />\n    </div>\n  );\n};\n\nexport default RabbitMQComponent;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,KAAKC,KAAK,MAAM,SAAS;AAChC,OAAOC,KAAK,MAAM,SAAS,CAAC,CAAC;AAC7B,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMa,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACd,MAAMa,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,+BAA+B,CAAC;MAC7D,MAAMC,MAAM,GAAGf,KAAK,CAACgB,IAAI,CAACH,MAAM,CAAC;MACjC,MAAMI,OAAO,GAAG;QACdC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE;MACZ,CAAC;MAEDJ,MAAM,CAACH,OAAO,CAACK,OAAO,EAAEG,KAAK,IAAI;QAC/BC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,KAAK,CAAC;QAClCZ,cAAc,CAACO,MAAM,CAAC;QACtBL,cAAc,CAAC,IAAI,CAAC;QAEpBK,MAAM,CAACQ,SAAS,CAAC,qBAAqB,EAAGC,OAAO,IAAK;UACnDH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,OAAO,CAACC,IAAI,CAAC;UAC/C,IAAID,OAAO,CAACC,IAAI,KAAK,MAAM,EAAE;YAC3Bd,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;UAC1B,CAAC,MAAM;YACLU,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;UACtC;QACF,CAAC,CAAC;MACJ,CAAC,EAAEI,KAAK,IAAI;QACVL,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD,CAAC,CAAC;IACJ,CAAC;IAEDd,OAAO,CAAC,CAAC;IACT,OAAO,MAAM;MACX,IAAIL,WAAW,IAAIE,WAAW,EAAE;QAC9BF,WAAW,CAACoB,UAAU,CAAC,MAAM;UAC3BN,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QAC3C,CAAC,CAAC;MACJ;IACF,CAAC;EACH,CAAC,EAAE,CAACX,QAAQ,EAAEJ,WAAW,EAAEE,WAAW,CAAC,CAAC;EAExC,oBACEL,OAAA;IAAAwB,QAAA,eACExB,OAAA,CAACH,KAAK;MAACM,WAAW,EAAEA,WAAY;MAACE,WAAW,EAAEA;IAAY;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA/CID,iBAAiB;EAAA,QAGJH,WAAW;AAAA;AAAA+B,EAAA,GAHxB5B,iBAAiB;AAiDvB,eAAeA,iBAAiB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}