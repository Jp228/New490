{"ast":null,"code":"/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst {\n  LEVEL\n} = require('triple-beam');\nconst config = require('./config');\nconst Logger = require('./logger');\nconst debug = require('@dabh/diagnostics')('winston:create-logger');\nfunction isLevelEnabledFunctionName(level) {\n  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';\n}\n\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */\nmodule.exports = function (opts = {}) {\n  //\n  // Default levels: npm\n  //\n  opts.levels = opts.levels || config.npm.levels;\n\n  /**\n   * DerivedLogger to attach the logs level methods.\n   * @type {DerivedLogger}\n   * @extends {Logger}\n   */\n  class DerivedLogger extends Logger {\n    /**\n     * Create a new class derived logger for which the levels can be attached to\n     * the prototype of. This is a V8 optimization that is well know to increase\n     * performance of prototype functions.\n     * @param {!Object} options - Options for the created logger.\n     */\n    constructor(options) {\n      super(options);\n    }\n  }\n  const logger = new DerivedLogger(opts);\n\n  //\n  // Create the log level methods for the derived logger.\n  //\n  Object.keys(opts.levels).forEach(function (level) {\n    debug('Define prototype method for \"%s\"', level);\n    if (level === 'log') {\n      // eslint-disable-next-line no-console\n      console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n      return;\n    }\n\n    //\n    // Define prototype methods for each log level e.g.:\n    // logger.log('info', msg) implies these methods are defined:\n    // - logger.info(msg)\n    // - logger.isInfoEnabled()\n    //\n    // Remark: to support logger.child this **MUST** be a function\n    // so it'll always be called on the instance instead of a fixed\n    // place in the prototype chain.\n    //\n    DerivedLogger.prototype[level] = function (...args) {\n      // Prefer any instance scope, but default to \"root\" logger\n      const self = this || logger;\n\n      // Optimize the hot-path which is the single object.\n      if (args.length === 1) {\n        const [msg] = args;\n        const info = msg && msg.message && msg || {\n          message: msg\n        };\n        info.level = info[LEVEL] = level;\n        self._addDefaultMeta(info);\n        self.write(info);\n        return this || logger;\n      }\n\n      // When provided nothing assume the empty string\n      if (args.length === 0) {\n        self.log(level, '');\n        return self;\n      }\n\n      // Otherwise build argument list which could potentially conform to\n      // either:\n      // . v3 API: log(obj)\n      // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n      return self.log(level, ...args);\n    };\n    DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function () {\n      return (this || logger).isLevelEnabled(level);\n    };\n  });\n  return logger;\n};","map":{"version":3,"names":["LEVEL","require","config","Logger","debug","isLevelEnabledFunctionName","level","charAt","toUpperCase","slice","module","exports","opts","levels","npm","DerivedLogger","constructor","options","logger","Object","keys","forEach","console","warn","prototype","args","self","length","msg","info","message","_addDefaultMeta","write","log","isLevelEnabled"],"sources":["/home/jp228/node_modules/winston/lib/winston/create-logger.js"],"sourcesContent":["/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { LEVEL } = require('triple-beam');\nconst config = require('./config');\nconst Logger = require('./logger');\nconst debug = require('@dabh/diagnostics')('winston:create-logger');\n\nfunction isLevelEnabledFunctionName(level) {\n  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';\n}\n\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */\nmodule.exports = function (opts = {}) {\n  //\n  // Default levels: npm\n  //\n  opts.levels = opts.levels || config.npm.levels;\n\n  /**\n   * DerivedLogger to attach the logs level methods.\n   * @type {DerivedLogger}\n   * @extends {Logger}\n   */\n  class DerivedLogger extends Logger {\n    /**\n     * Create a new class derived logger for which the levels can be attached to\n     * the prototype of. This is a V8 optimization that is well know to increase\n     * performance of prototype functions.\n     * @param {!Object} options - Options for the created logger.\n     */\n    constructor(options) {\n      super(options);\n    }\n  }\n\n  const logger = new DerivedLogger(opts);\n\n  //\n  // Create the log level methods for the derived logger.\n  //\n  Object.keys(opts.levels).forEach(function (level) {\n    debug('Define prototype method for \"%s\"', level);\n    if (level === 'log') {\n      // eslint-disable-next-line no-console\n      console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n      return;\n    }\n\n    //\n    // Define prototype methods for each log level e.g.:\n    // logger.log('info', msg) implies these methods are defined:\n    // - logger.info(msg)\n    // - logger.isInfoEnabled()\n    //\n    // Remark: to support logger.child this **MUST** be a function\n    // so it'll always be called on the instance instead of a fixed\n    // place in the prototype chain.\n    //\n    DerivedLogger.prototype[level] = function (...args) {\n      // Prefer any instance scope, but default to \"root\" logger\n      const self = this || logger;\n\n      // Optimize the hot-path which is the single object.\n      if (args.length === 1) {\n        const [msg] = args;\n        const info = msg && msg.message && msg || { message: msg };\n        info.level = info[LEVEL] = level;\n        self._addDefaultMeta(info);\n        self.write(info);\n        return (this || logger);\n      }\n\n      // When provided nothing assume the empty string\n      if (args.length === 0) {\n        self.log(level, '');\n        return self;\n      }\n\n      // Otherwise build argument list which could potentially conform to\n      // either:\n      // . v3 API: log(obj)\n      // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n      return self.log(level, ...args);\n    };\n\n    DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function () {\n      return (this || logger).isLevelEnabled(level);\n    };\n  });\n\n  return logger;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMG,KAAK,GAAGH,OAAO,CAAC,mBAAmB,CAAC,CAAC,uBAAuB,CAAC;AAEnE,SAASI,0BAA0BA,CAACC,KAAK,EAAE;EACzC,OAAO,IAAI,GAAGA,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,GAAG,CAAC,CAAC,EAAE;EACpC;EACA;EACA;EACAA,IAAI,CAACC,MAAM,GAAGD,IAAI,CAACC,MAAM,IAAIX,MAAM,CAACY,GAAG,CAACD,MAAM;;EAE9C;AACF;AACA;AACA;AACA;EACE,MAAME,aAAa,SAASZ,MAAM,CAAC;IACjC;AACJ;AACA;AACA;AACA;AACA;IACIa,WAAWA,CAACC,OAAO,EAAE;MACnB,KAAK,CAACA,OAAO,CAAC;IAChB;EACF;EAEA,MAAMC,MAAM,GAAG,IAAIH,aAAa,CAACH,IAAI,CAAC;;EAEtC;EACA;EACA;EACAO,MAAM,CAACC,IAAI,CAACR,IAAI,CAACC,MAAM,CAAC,CAACQ,OAAO,CAAC,UAAUf,KAAK,EAAE;IAChDF,KAAK,CAAC,kCAAkC,EAAEE,KAAK,CAAC;IAChD,IAAIA,KAAK,KAAK,KAAK,EAAE;MACnB;MACAgB,OAAO,CAACC,IAAI,CAAC,uFAAuF,CAAC;MACrG;IACF;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAR,aAAa,CAACS,SAAS,CAAClB,KAAK,CAAC,GAAG,UAAU,GAAGmB,IAAI,EAAE;MAClD;MACA,MAAMC,IAAI,GAAG,IAAI,IAAIR,MAAM;;MAE3B;MACA,IAAIO,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;QACrB,MAAM,CAACC,GAAG,CAAC,GAAGH,IAAI;QAClB,MAAMI,IAAI,GAAGD,GAAG,IAAIA,GAAG,CAACE,OAAO,IAAIF,GAAG,IAAI;UAAEE,OAAO,EAAEF;QAAI,CAAC;QAC1DC,IAAI,CAACvB,KAAK,GAAGuB,IAAI,CAAC7B,KAAK,CAAC,GAAGM,KAAK;QAChCoB,IAAI,CAACK,eAAe,CAACF,IAAI,CAAC;QAC1BH,IAAI,CAACM,KAAK,CAACH,IAAI,CAAC;QAChB,OAAQ,IAAI,IAAIX,MAAM;MACxB;;MAEA;MACA,IAAIO,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;QACrBD,IAAI,CAACO,GAAG,CAAC3B,KAAK,EAAE,EAAE,CAAC;QACnB,OAAOoB,IAAI;MACb;;MAEA;MACA;MACA;MACA;MACA,OAAOA,IAAI,CAACO,GAAG,CAAC3B,KAAK,EAAE,GAAGmB,IAAI,CAAC;IACjC,CAAC;IAEDV,aAAa,CAACS,SAAS,CAACnB,0BAA0B,CAACC,KAAK,CAAC,CAAC,GAAG,YAAY;MACvE,OAAO,CAAC,IAAI,IAAIY,MAAM,EAAEgB,cAAc,CAAC5B,KAAK,CAAC;IAC/C,CAAC;EACH,CAAC,CAAC;EAEF,OAAOY,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}