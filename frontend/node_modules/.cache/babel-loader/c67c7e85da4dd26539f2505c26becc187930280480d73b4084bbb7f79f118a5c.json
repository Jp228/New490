{"ast":null,"code":"/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst {\n  Stream,\n  Transform\n} = require('readable-stream');\nconst asyncForEach = require('async/forEach');\nconst {\n  LEVEL,\n  SPLAT\n} = require('triple-beam');\nconst isStream = require('is-stream');\nconst ExceptionHandler = require('./exception-handler');\nconst RejectionHandler = require('./rejection-handler');\nconst LegacyTransportStream = require('winston-transport/legacy');\nconst Profiler = require('./profiler');\nconst {\n  warn\n} = require('./common');\nconst config = require('./config');\n\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\nconst formatRegExp = /%[scdjifoO%]/g;\n\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {Transform}\n */\nclass Logger extends Transform {\n  /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */\n  constructor(options) {\n    super({\n      objectMode: true\n    });\n    this.configure(options);\n  }\n  child(defaultRequestMetadata) {\n    const logger = this;\n    return Object.create(logger, {\n      write: {\n        value: function (info) {\n          const infoClone = Object.assign({}, defaultRequestMetadata, info);\n\n          // Object.assign doesn't copy inherited Error\n          // properties so we have to do that explicitly\n          //\n          // Remark (indexzero): we should remove this\n          // since the errors format will handle this case.\n          //\n          if (info instanceof Error) {\n            infoClone.stack = info.stack;\n            infoClone.message = info.message;\n          }\n          logger.write(infoClone);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */\n  configure({\n    silent,\n    format,\n    defaultMeta,\n    levels,\n    level = 'info',\n    exitOnError = true,\n    transports,\n    colors,\n    emitErrs,\n    formatters,\n    padLevels,\n    rewriters,\n    stripColors,\n    exceptionHandlers,\n    rejectionHandlers\n  } = {}) {\n    // Reset transports if we already have them\n    if (this.transports.length) {\n      this.clear();\n    }\n    this.silent = silent;\n    this.format = format || this.format || require('logform/json')();\n    this.defaultMeta = defaultMeta || null;\n    // Hoist other options onto this instance.\n    this.levels = levels || this.levels || config.npm.levels;\n    this.level = level;\n    if (this.exceptions) {\n      this.exceptions.unhandle();\n    }\n    if (this.rejections) {\n      this.rejections.unhandle();\n    }\n    this.exceptions = new ExceptionHandler(this);\n    this.rejections = new RejectionHandler(this);\n    this.profilers = {};\n    this.exitOnError = exitOnError;\n\n    // Add all transports we have been provided.\n    if (transports) {\n      transports = Array.isArray(transports) ? transports : [transports];\n      transports.forEach(transport => this.add(transport));\n    }\n    if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {\n      throw new Error(['{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.', 'Use a custom winston.format(function) instead.', 'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'].join('\\n'));\n    }\n    if (exceptionHandlers) {\n      this.exceptions.handle(exceptionHandlers);\n    }\n    if (rejectionHandlers) {\n      this.rejections.handle(rejectionHandlers);\n    }\n  }\n  isLevelEnabled(level) {\n    const givenLevelValue = getLevelValue(this.levels, level);\n    if (givenLevelValue === null) {\n      return false;\n    }\n    const configuredLevelValue = getLevelValue(this.levels, this.level);\n    if (configuredLevelValue === null) {\n      return false;\n    }\n    if (!this.transports || this.transports.length === 0) {\n      return configuredLevelValue >= givenLevelValue;\n    }\n    const index = this.transports.findIndex(transport => {\n      let transportLevelValue = getLevelValue(this.levels, transport.level);\n      if (transportLevelValue === null) {\n        transportLevelValue = configuredLevelValue;\n      }\n      return transportLevelValue >= givenLevelValue;\n    });\n    return index !== -1;\n  }\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Ensure backwards compatibility with a `log` method\n   * @param {mixed} level - Level the log message is written at.\n   * @param {mixed} msg - TODO: add param description.\n   * @param {mixed} meta - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   *\n   * @example\n   *    // Supports the existing API:\n   *    logger.log('info', 'Hello world', { custom: true });\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\n   *\n   *    // Requires winston.format.splat()\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n   *\n   *    // And the new API with a single JSON literal:\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n   *\n   *    // Also requires winston.format.splat()\n   *    logger.log({\n   *      level: 'info',\n   *      message: '%s %d%%',\n   *      [SPLAT]: ['A string', 50],\n   *      meta: { thisIsMeta: true }\n   *    });\n   *\n   */\n  /* eslint-enable valid-jsdoc */\n  log(level, msg, ...splat) {\n    // eslint-disable-line max-params\n    // Optimize for the hotpath of logging JSON literals\n    if (arguments.length === 1) {\n      // Yo dawg, I heard you like levels ... seriously ...\n      // In this context the LHS `level` here is actually the `info` so read\n      // this as: info[LEVEL] = info.level;\n      level[LEVEL] = level.level;\n      this._addDefaultMeta(level);\n      this.write(level);\n      return this;\n    }\n\n    // Slightly less hotpath, but worth optimizing for.\n    if (arguments.length === 2) {\n      if (msg && typeof msg === 'object') {\n        msg[LEVEL] = msg.level = level;\n        this._addDefaultMeta(msg);\n        this.write(msg);\n        return this;\n      }\n      msg = {\n        [LEVEL]: level,\n        level,\n        message: msg\n      };\n      this._addDefaultMeta(msg);\n      this.write(msg);\n      return this;\n    }\n    const [meta] = splat;\n    if (typeof meta === 'object' && meta !== null) {\n      // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n      const tokens = msg && msg.match && msg.match(formatRegExp);\n      if (!tokens) {\n        const info = Object.assign({}, this.defaultMeta, meta, {\n          [LEVEL]: level,\n          [SPLAT]: splat,\n          level,\n          message: msg\n        });\n        if (meta.message) info.message = `${info.message} ${meta.message}`;\n        if (meta.stack) info.stack = meta.stack;\n        this.write(info);\n        return this;\n      }\n    }\n    this.write(Object.assign({}, this.defaultMeta, {\n      [LEVEL]: level,\n      [SPLAT]: splat,\n      level,\n      message: msg\n    }));\n    return this;\n  }\n\n  /**\n   * Pushes data so that it can be picked up by all of our pipe targets.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - Continues stream processing.\n   * @returns {undefined}\n   * @private\n   */\n  _transform(info, enc, callback) {\n    if (this.silent) {\n      return callback();\n    }\n\n    // [LEVEL] is only soft guaranteed to be set here since we are a proper\n    // stream. It is likely that `info` came in through `.log(info)` or\n    // `.info(info)`. If it is not defined, however, define it.\n    // This LEVEL symbol is provided by `triple-beam` and also used in:\n    // - logform\n    // - winston-transport\n    // - abstract-winston-transport\n    if (!info[LEVEL]) {\n      info[LEVEL] = info.level;\n    }\n\n    // Remark: really not sure what to do here, but this has been reported as\n    // very confusing by pre winston@2.0.0 users as quite confusing when using\n    // custom levels.\n    if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Unknown logger level: %s', info[LEVEL]);\n    }\n\n    // Remark: not sure if we should simply error here.\n    if (!this._readableState.pipes) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Attempt to write logs with no transports, which can increase memory usage: %j', info);\n    }\n\n    // Here we write to the `format` pipe-chain, which on `readable` above will\n    // push the formatted `info` Object onto the buffer for this instance. We trap\n    // (and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      this.push(this.format.transform(info, this.format.options));\n    } finally {\n      this._writableState.sync = false;\n      // eslint-disable-next-line callback-return\n      callback();\n    }\n  }\n\n  /**\n   * Delays the 'finish' event until all transport pipe targets have\n   * also emitted 'finish' or are already finished.\n   * @param {mixed} callback - Continues stream processing.\n   */\n  _final(callback) {\n    const transports = this.transports.slice();\n    asyncForEach(transports, (transport, next) => {\n      if (!transport || transport.finished) return setImmediate(next);\n      transport.once('finish', next);\n      transport.end();\n    }, callback);\n  }\n\n  /**\n   * Adds the transport to this logger instance by piping to it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  add(transport) {\n    // Support backwards compatibility with all existing `winston < 3.x.x`\n    // transports which meet one of two criteria:\n    // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n    // 2. They expose a log method which has a length greater than 2 (i.e. more then\n    //    just `log(info, callback)`.\n    const target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({\n      transport\n    }) : transport;\n    if (!target._writableState || !target._writableState.objectMode) {\n      throw new Error('Transports must WritableStreams in objectMode. Set { objectMode: true }.');\n    }\n\n    // Listen for the `error` event and the `warn` event on the new Transport.\n    this._onEvent('error', target);\n    this._onEvent('warn', target);\n    this.pipe(target);\n    if (transport.handleExceptions) {\n      this.exceptions.handle();\n    }\n    if (transport.handleRejections) {\n      this.rejections.handle();\n    }\n    return this;\n  }\n\n  /**\n   * Removes the transport from this logger instance by unpiping from it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  remove(transport) {\n    if (!transport) return this;\n    let target = transport;\n    if (!isStream(transport) || transport.log.length > 2) {\n      target = this.transports.filter(match => match.transport === transport)[0];\n    }\n    if (target) {\n      this.unpipe(target);\n    }\n    return this;\n  }\n\n  /**\n   * Removes all transports from this logger instance.\n   * @returns {Logger} - TODO: add return description.\n   */\n  clear() {\n    this.unpipe();\n    return this;\n  }\n\n  /**\n   * Cleans up resources (streams, event listeners) for all transports\n   * associated with this instance (if necessary).\n   * @returns {Logger} - TODO: add return description.\n   */\n  close() {\n    this.exceptions.unhandle();\n    this.rejections.unhandle();\n    this.clear();\n    this.emit('close');\n    return this;\n  }\n\n  /**\n   * Sets the `target` levels specified on this instance.\n   * @param {Object} Target levels to use on this instance.\n   */\n  setLevels() {\n    warn.deprecated('setLevels');\n  }\n\n  /**\n   * Queries the all transports for this instance with the specified `options`.\n   * This will aggregate each transport's results into one object containing\n   * a property per transport.\n   * @param {Object} options - Query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    const results = {};\n    const queryObject = Object.assign({}, options.query || {});\n\n    // Helper function to query a single transport\n    function queryTransport(transport, next) {\n      if (options.query && typeof transport.formatQuery === 'function') {\n        options.query = transport.formatQuery(queryObject);\n      }\n      transport.query(options, (err, res) => {\n        if (err) {\n          return next(err);\n        }\n        if (typeof transport.formatResults === 'function') {\n          res = transport.formatResults(res, options.format);\n        }\n        next(null, res);\n      });\n    }\n\n    // Helper function to accumulate the results from `queryTransport` into\n    // the `results`.\n    function addResults(transport, next) {\n      queryTransport(transport, (err, result) => {\n        // queryTransport could potentially invoke the callback multiple times\n        // since Transport code can be unpredictable.\n        if (next) {\n          result = err || result;\n          if (result) {\n            results[transport.name] = result;\n          }\n\n          // eslint-disable-next-line callback-return\n          next();\n        }\n        next = null;\n      });\n    }\n\n    // Iterate over the transports in parallel setting the appropriate key in\n    // the `results`.\n    asyncForEach(this.transports.filter(transport => !!transport.query), addResults, () => callback(null, results));\n  }\n\n  /**\n   * Returns a log stream for all transports. Options object is optional.\n   * @param{Object} options={} - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   */\n  stream(options = {}) {\n    const out = new Stream();\n    const streams = [];\n    out._streams = streams;\n    out.destroy = () => {\n      let i = streams.length;\n      while (i--) {\n        streams[i].destroy();\n      }\n    };\n\n    // Create a list of all transports for this instance.\n    this.transports.filter(transport => !!transport.stream).forEach(transport => {\n      const str = transport.stream(options);\n      if (!str) {\n        return;\n      }\n      streams.push(str);\n      str.on('log', log => {\n        log.transport = log.transport || [];\n        log.transport.push(transport.name);\n        out.emit('log', log);\n      });\n      str.on('error', err => {\n        err.transport = err.transport || [];\n        err.transport.push(transport.name);\n        out.emit('error', err);\n      });\n    });\n    return out;\n  }\n\n  /**\n   * Returns an object corresponding to a specific timing. When done is called\n   * the timer will finish and log the duration. e.g.:\n   * @returns {Profile} - TODO: add return description.\n   * @example\n   *    const timer = winston.startTimer()\n   *    setTimeout(() => {\n   *      timer.done({\n   *        message: 'Logging message'\n   *      });\n   *    }, 1000);\n   */\n  startTimer() {\n    return new Profiler(this);\n  }\n\n  /**\n   * Tracks the time inbetween subsequent calls to this method with the same\n   * `id` parameter. The second call to this method will log the difference in\n   * milliseconds along with the message.\n   * @param {string} id Unique id of the profiler\n   * @returns {Logger} - TODO: add return description.\n   */\n  profile(id, ...args) {\n    const time = Date.now();\n    if (this.profilers[id]) {\n      const timeEnd = this.profilers[id];\n      delete this.profilers[id];\n\n      // Attempt to be kind to users if they are still using older APIs.\n      if (typeof args[args.length - 2] === 'function') {\n        // eslint-disable-next-line no-console\n        console.warn('Callback function no longer supported as of winston@3.0.0');\n        args.pop();\n      }\n\n      // Set the duration property of the metadata\n      const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n      info.level = info.level || 'info';\n      info.durationMs = time - timeEnd;\n      info.message = info.message || id;\n      return this.write(info);\n    }\n    this.profilers[id] = time;\n    return this;\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  handleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn('Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()');\n    this.exceptions.handle(...args);\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  unhandleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn('Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()');\n    this.exceptions.unhandle(...args);\n  }\n\n  /**\n   * Throw a more meaningful deprecation notice\n   * @throws {Error} - TODO: add throws description.\n   */\n  cli() {\n    throw new Error(['Logger.cli() was removed in winston@3.0.0', 'Use a custom winston.formats.cli() instead.', 'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'].join('\\n'));\n  }\n\n  /**\n   * Bubbles the `event` that occured on the specified `transport` up\n   * from this instance.\n   * @param {string} event - The event that occured\n   * @param {Object} transport - Transport on which the event occured\n   * @private\n   */\n  _onEvent(event, transport) {\n    function transportEvent(err) {\n      // https://github.com/winstonjs/winston/issues/1364\n      if (event === 'error' && !this.transports.includes(transport)) {\n        this.add(transport);\n      }\n      this.emit(event, err, transport);\n    }\n    if (!transport['__winston' + event]) {\n      transport['__winston' + event] = transportEvent.bind(this);\n      transport.on(event, transport['__winston' + event]);\n    }\n  }\n  _addDefaultMeta(msg) {\n    if (this.defaultMeta) {\n      Object.assign(msg, this.defaultMeta);\n    }\n  }\n}\nfunction getLevelValue(levels, level) {\n  const value = levels[level];\n  if (!value && value !== 0) {\n    return null;\n  }\n  return value;\n}\n\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */\nObject.defineProperty(Logger.prototype, 'transports', {\n  configurable: false,\n  enumerable: true,\n  get() {\n    const {\n      pipes\n    } = this._readableState;\n    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;\n  }\n});\nmodule.exports = Logger;","map":{"version":3,"names":["Stream","Transform","require","asyncForEach","LEVEL","SPLAT","isStream","ExceptionHandler","RejectionHandler","LegacyTransportStream","Profiler","warn","config","formatRegExp","Logger","constructor","options","objectMode","configure","child","defaultRequestMetadata","logger","Object","create","write","value","info","infoClone","assign","Error","stack","message","silent","format","defaultMeta","levels","level","exitOnError","transports","colors","emitErrs","formatters","padLevels","rewriters","stripColors","exceptionHandlers","rejectionHandlers","length","clear","npm","exceptions","unhandle","rejections","profilers","Array","isArray","forEach","transport","add","join","handle","isLevelEnabled","givenLevelValue","getLevelValue","configuredLevelValue","index","findIndex","transportLevelValue","log","msg","splat","arguments","_addDefaultMeta","meta","tokens","match","_transform","enc","callback","console","error","_readableState","pipes","push","transform","_writableState","sync","_final","slice","next","finished","setImmediate","once","end","target","_onEvent","pipe","handleExceptions","handleRejections","remove","filter","unpipe","close","emit","setLevels","deprecated","query","results","queryObject","queryTransport","formatQuery","err","res","formatResults","addResults","result","name","stream","out","streams","_streams","destroy","i","str","on","startTimer","profile","id","args","time","Date","now","timeEnd","pop","durationMs","unhandleExceptions","cli","event","transportEvent","includes","bind","defineProperty","prototype","configurable","enumerable","get","Boolean","module","exports"],"sources":["/home/jp228/node_modules/winston/lib/winston/logger.js"],"sourcesContent":["/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { Stream, Transform } = require('readable-stream');\nconst asyncForEach = require('async/forEach');\nconst { LEVEL, SPLAT } = require('triple-beam');\nconst isStream = require('is-stream');\nconst ExceptionHandler = require('./exception-handler');\nconst RejectionHandler = require('./rejection-handler');\nconst LegacyTransportStream = require('winston-transport/legacy');\nconst Profiler = require('./profiler');\nconst { warn } = require('./common');\nconst config = require('./config');\n\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\nconst formatRegExp = /%[scdjifoO%]/g;\n\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {Transform}\n */\nclass Logger extends Transform {\n  /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */\n  constructor(options) {\n    super({ objectMode: true });\n    this.configure(options);\n  }\n\n  child(defaultRequestMetadata) {\n    const logger = this;\n    return Object.create(logger, {\n      write: {\n        value: function (info) {\n          const infoClone = Object.assign(\n            {},\n            defaultRequestMetadata,\n            info\n          );\n\n          // Object.assign doesn't copy inherited Error\n          // properties so we have to do that explicitly\n          //\n          // Remark (indexzero): we should remove this\n          // since the errors format will handle this case.\n          //\n          if (info instanceof Error) {\n            infoClone.stack = info.stack;\n            infoClone.message = info.message;\n          }\n\n          logger.write(infoClone);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */\n  configure({\n    silent,\n    format,\n    defaultMeta,\n    levels,\n    level = 'info',\n    exitOnError = true,\n    transports,\n    colors,\n    emitErrs,\n    formatters,\n    padLevels,\n    rewriters,\n    stripColors,\n    exceptionHandlers,\n    rejectionHandlers\n  } = {}) {\n    // Reset transports if we already have them\n    if (this.transports.length) {\n      this.clear();\n    }\n\n    this.silent = silent;\n    this.format = format || this.format || require('logform/json')();\n\n    this.defaultMeta = defaultMeta || null;\n    // Hoist other options onto this instance.\n    this.levels = levels || this.levels || config.npm.levels;\n    this.level = level;\n    if (this.exceptions) {\n      this.exceptions.unhandle();\n    }\n    if (this.rejections) {\n      this.rejections.unhandle();\n    }\n    this.exceptions = new ExceptionHandler(this);\n    this.rejections = new RejectionHandler(this);\n    this.profilers = {};\n    this.exitOnError = exitOnError;\n\n    // Add all transports we have been provided.\n    if (transports) {\n      transports = Array.isArray(transports) ? transports : [transports];\n      transports.forEach(transport => this.add(transport));\n    }\n\n    if (\n      colors ||\n      emitErrs ||\n      formatters ||\n      padLevels ||\n      rewriters ||\n      stripColors\n    ) {\n      throw new Error(\n        [\n          '{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.',\n          'Use a custom winston.format(function) instead.',\n          'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\n        ].join('\\n')\n      );\n    }\n\n    if (exceptionHandlers) {\n      this.exceptions.handle(exceptionHandlers);\n    }\n    if (rejectionHandlers) {\n      this.rejections.handle(rejectionHandlers);\n    }\n  }\n\n  isLevelEnabled(level) {\n    const givenLevelValue = getLevelValue(this.levels, level);\n    if (givenLevelValue === null) {\n      return false;\n    }\n\n    const configuredLevelValue = getLevelValue(this.levels, this.level);\n    if (configuredLevelValue === null) {\n      return false;\n    }\n\n    if (!this.transports || this.transports.length === 0) {\n      return configuredLevelValue >= givenLevelValue;\n    }\n\n    const index = this.transports.findIndex(transport => {\n      let transportLevelValue = getLevelValue(this.levels, transport.level);\n      if (transportLevelValue === null) {\n        transportLevelValue = configuredLevelValue;\n      }\n      return transportLevelValue >= givenLevelValue;\n    });\n    return index !== -1;\n  }\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Ensure backwards compatibility with a `log` method\n   * @param {mixed} level - Level the log message is written at.\n   * @param {mixed} msg - TODO: add param description.\n   * @param {mixed} meta - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   *\n   * @example\n   *    // Supports the existing API:\n   *    logger.log('info', 'Hello world', { custom: true });\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\n   *\n   *    // Requires winston.format.splat()\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n   *\n   *    // And the new API with a single JSON literal:\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n   *\n   *    // Also requires winston.format.splat()\n   *    logger.log({\n   *      level: 'info',\n   *      message: '%s %d%%',\n   *      [SPLAT]: ['A string', 50],\n   *      meta: { thisIsMeta: true }\n   *    });\n   *\n   */\n  /* eslint-enable valid-jsdoc */\n  log(level, msg, ...splat) {\n    // eslint-disable-line max-params\n    // Optimize for the hotpath of logging JSON literals\n    if (arguments.length === 1) {\n      // Yo dawg, I heard you like levels ... seriously ...\n      // In this context the LHS `level` here is actually the `info` so read\n      // this as: info[LEVEL] = info.level;\n      level[LEVEL] = level.level;\n      this._addDefaultMeta(level);\n      this.write(level);\n      return this;\n    }\n\n    // Slightly less hotpath, but worth optimizing for.\n    if (arguments.length === 2) {\n      if (msg && typeof msg === 'object') {\n        msg[LEVEL] = msg.level = level;\n        this._addDefaultMeta(msg);\n        this.write(msg);\n        return this;\n      }\n\n      msg = { [LEVEL]: level, level, message: msg };\n      this._addDefaultMeta(msg);\n      this.write(msg);\n      return this;\n    }\n\n    const [meta] = splat;\n    if (typeof meta === 'object' && meta !== null) {\n      // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n      const tokens = msg && msg.match && msg.match(formatRegExp);\n\n      if (!tokens) {\n        const info = Object.assign({}, this.defaultMeta, meta, {\n          [LEVEL]: level,\n          [SPLAT]: splat,\n          level,\n          message: msg\n        });\n\n        if (meta.message) info.message = `${info.message} ${meta.message}`;\n        if (meta.stack) info.stack = meta.stack;\n\n        this.write(info);\n        return this;\n      }\n    }\n\n    this.write(Object.assign({}, this.defaultMeta, {\n      [LEVEL]: level,\n      [SPLAT]: splat,\n      level,\n      message: msg\n    }));\n\n    return this;\n  }\n\n  /**\n   * Pushes data so that it can be picked up by all of our pipe targets.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - Continues stream processing.\n   * @returns {undefined}\n   * @private\n   */\n  _transform(info, enc, callback) {\n    if (this.silent) {\n      return callback();\n    }\n\n    // [LEVEL] is only soft guaranteed to be set here since we are a proper\n    // stream. It is likely that `info` came in through `.log(info)` or\n    // `.info(info)`. If it is not defined, however, define it.\n    // This LEVEL symbol is provided by `triple-beam` and also used in:\n    // - logform\n    // - winston-transport\n    // - abstract-winston-transport\n    if (!info[LEVEL]) {\n      info[LEVEL] = info.level;\n    }\n\n    // Remark: really not sure what to do here, but this has been reported as\n    // very confusing by pre winston@2.0.0 users as quite confusing when using\n    // custom levels.\n    if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Unknown logger level: %s', info[LEVEL]);\n    }\n\n    // Remark: not sure if we should simply error here.\n    if (!this._readableState.pipes) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '[winston] Attempt to write logs with no transports, which can increase memory usage: %j',\n        info\n      );\n    }\n\n    // Here we write to the `format` pipe-chain, which on `readable` above will\n    // push the formatted `info` Object onto the buffer for this instance. We trap\n    // (and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      this.push(this.format.transform(info, this.format.options));\n    } finally {\n      this._writableState.sync = false;\n      // eslint-disable-next-line callback-return\n      callback();\n    }\n  }\n\n  /**\n   * Delays the 'finish' event until all transport pipe targets have\n   * also emitted 'finish' or are already finished.\n   * @param {mixed} callback - Continues stream processing.\n   */\n  _final(callback) {\n    const transports = this.transports.slice();\n    asyncForEach(\n      transports,\n      (transport, next) => {\n        if (!transport || transport.finished) return setImmediate(next);\n        transport.once('finish', next);\n        transport.end();\n      },\n      callback\n    );\n  }\n\n  /**\n   * Adds the transport to this logger instance by piping to it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  add(transport) {\n    // Support backwards compatibility with all existing `winston < 3.x.x`\n    // transports which meet one of two criteria:\n    // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n    // 2. They expose a log method which has a length greater than 2 (i.e. more then\n    //    just `log(info, callback)`.\n    const target =\n      !isStream(transport) || transport.log.length > 2\n        ? new LegacyTransportStream({ transport })\n        : transport;\n\n    if (!target._writableState || !target._writableState.objectMode) {\n      throw new Error(\n        'Transports must WritableStreams in objectMode. Set { objectMode: true }.'\n      );\n    }\n\n    // Listen for the `error` event and the `warn` event on the new Transport.\n    this._onEvent('error', target);\n    this._onEvent('warn', target);\n    this.pipe(target);\n\n    if (transport.handleExceptions) {\n      this.exceptions.handle();\n    }\n\n    if (transport.handleRejections) {\n      this.rejections.handle();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the transport from this logger instance by unpiping from it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  remove(transport) {\n    if (!transport) return this;\n    let target = transport;\n    if (!isStream(transport) || transport.log.length > 2) {\n      target = this.transports.filter(\n        match => match.transport === transport\n      )[0];\n    }\n\n    if (target) {\n      this.unpipe(target);\n    }\n    return this;\n  }\n\n  /**\n   * Removes all transports from this logger instance.\n   * @returns {Logger} - TODO: add return description.\n   */\n  clear() {\n    this.unpipe();\n    return this;\n  }\n\n  /**\n   * Cleans up resources (streams, event listeners) for all transports\n   * associated with this instance (if necessary).\n   * @returns {Logger} - TODO: add return description.\n   */\n  close() {\n    this.exceptions.unhandle();\n    this.rejections.unhandle();\n    this.clear();\n    this.emit('close');\n    return this;\n  }\n\n  /**\n   * Sets the `target` levels specified on this instance.\n   * @param {Object} Target levels to use on this instance.\n   */\n  setLevels() {\n    warn.deprecated('setLevels');\n  }\n\n  /**\n   * Queries the all transports for this instance with the specified `options`.\n   * This will aggregate each transport's results into one object containing\n   * a property per transport.\n   * @param {Object} options - Query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    const results = {};\n    const queryObject = Object.assign({}, options.query || {});\n\n    // Helper function to query a single transport\n    function queryTransport(transport, next) {\n      if (options.query && typeof transport.formatQuery === 'function') {\n        options.query = transport.formatQuery(queryObject);\n      }\n\n      transport.query(options, (err, res) => {\n        if (err) {\n          return next(err);\n        }\n\n        if (typeof transport.formatResults === 'function') {\n          res = transport.formatResults(res, options.format);\n        }\n\n        next(null, res);\n      });\n    }\n\n    // Helper function to accumulate the results from `queryTransport` into\n    // the `results`.\n    function addResults(transport, next) {\n      queryTransport(transport, (err, result) => {\n        // queryTransport could potentially invoke the callback multiple times\n        // since Transport code can be unpredictable.\n        if (next) {\n          result = err || result;\n          if (result) {\n            results[transport.name] = result;\n          }\n\n          // eslint-disable-next-line callback-return\n          next();\n        }\n\n        next = null;\n      });\n    }\n\n    // Iterate over the transports in parallel setting the appropriate key in\n    // the `results`.\n    asyncForEach(\n      this.transports.filter(transport => !!transport.query),\n      addResults,\n      () => callback(null, results)\n    );\n  }\n\n  /**\n   * Returns a log stream for all transports. Options object is optional.\n   * @param{Object} options={} - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   */\n  stream(options = {}) {\n    const out = new Stream();\n    const streams = [];\n\n    out._streams = streams;\n    out.destroy = () => {\n      let i = streams.length;\n      while (i--) {\n        streams[i].destroy();\n      }\n    };\n\n    // Create a list of all transports for this instance.\n    this.transports\n      .filter(transport => !!transport.stream)\n      .forEach(transport => {\n        const str = transport.stream(options);\n        if (!str) {\n          return;\n        }\n\n        streams.push(str);\n\n        str.on('log', log => {\n          log.transport = log.transport || [];\n          log.transport.push(transport.name);\n          out.emit('log', log);\n        });\n\n        str.on('error', err => {\n          err.transport = err.transport || [];\n          err.transport.push(transport.name);\n          out.emit('error', err);\n        });\n      });\n\n    return out;\n  }\n\n  /**\n   * Returns an object corresponding to a specific timing. When done is called\n   * the timer will finish and log the duration. e.g.:\n   * @returns {Profile} - TODO: add return description.\n   * @example\n   *    const timer = winston.startTimer()\n   *    setTimeout(() => {\n   *      timer.done({\n   *        message: 'Logging message'\n   *      });\n   *    }, 1000);\n   */\n  startTimer() {\n    return new Profiler(this);\n  }\n\n  /**\n   * Tracks the time inbetween subsequent calls to this method with the same\n   * `id` parameter. The second call to this method will log the difference in\n   * milliseconds along with the message.\n   * @param {string} id Unique id of the profiler\n   * @returns {Logger} - TODO: add return description.\n   */\n  profile(id, ...args) {\n    const time = Date.now();\n    if (this.profilers[id]) {\n      const timeEnd = this.profilers[id];\n      delete this.profilers[id];\n\n      // Attempt to be kind to users if they are still using older APIs.\n      if (typeof args[args.length - 2] === 'function') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Callback function no longer supported as of winston@3.0.0'\n        );\n        args.pop();\n      }\n\n      // Set the duration property of the metadata\n      const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n      info.level = info.level || 'info';\n      info.durationMs = time - timeEnd;\n      info.message = info.message || id;\n      return this.write(info);\n    }\n\n    this.profilers[id] = time;\n    return this;\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  handleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()'\n    );\n    this.exceptions.handle(...args);\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  unhandleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()'\n    );\n    this.exceptions.unhandle(...args);\n  }\n\n  /**\n   * Throw a more meaningful deprecation notice\n   * @throws {Error} - TODO: add throws description.\n   */\n  cli() {\n    throw new Error(\n      [\n        'Logger.cli() was removed in winston@3.0.0',\n        'Use a custom winston.formats.cli() instead.',\n        'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\n      ].join('\\n')\n    );\n  }\n\n  /**\n   * Bubbles the `event` that occured on the specified `transport` up\n   * from this instance.\n   * @param {string} event - The event that occured\n   * @param {Object} transport - Transport on which the event occured\n   * @private\n   */\n  _onEvent(event, transport) {\n    function transportEvent(err) {\n      // https://github.com/winstonjs/winston/issues/1364\n      if (event === 'error' && !this.transports.includes(transport)) {\n        this.add(transport);\n      }\n      this.emit(event, err, transport);\n    }\n\n    if (!transport['__winston' + event]) {\n      transport['__winston' + event] = transportEvent.bind(this);\n      transport.on(event, transport['__winston' + event]);\n    }\n  }\n\n  _addDefaultMeta(msg) {\n    if (this.defaultMeta) {\n      Object.assign(msg, this.defaultMeta);\n    }\n  }\n}\n\nfunction getLevelValue(levels, level) {\n  const value = levels[level];\n  if (!value && value !== 0) {\n    return null;\n  }\n  return value;\n}\n\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */\nObject.defineProperty(Logger.prototype, 'transports', {\n  configurable: false,\n  enumerable: true,\n  get() {\n    const { pipes } = this._readableState;\n    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;\n  }\n});\n\nmodule.exports = Logger;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}