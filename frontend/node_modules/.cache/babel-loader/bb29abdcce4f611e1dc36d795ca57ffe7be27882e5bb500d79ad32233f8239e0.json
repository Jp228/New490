{"ast":null,"code":"/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst isStream = require('is-stream');\nconst {\n  MESSAGE\n} = require('triple-beam');\nconst os = require('os');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Stream extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n    if (!options.stream || !isStream(options.stream)) {\n      throw new Error('options.stream is required.');\n    }\n\n    // We need to listen for drain events when write() returns false. This can\n    // make node mad at times.\n    this._stream = options.stream;\n    this._stream.setMaxListeners(Infinity);\n    this.isObjectMode = options.stream._writableState.objectMode;\n    this.eol = typeof options.eol === 'string' ? options.eol : os.EOL;\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n    if (this.isObjectMode) {\n      this._stream.write(info);\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n    this._stream.write(`${info[MESSAGE]}${this.eol}`);\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n    return;\n  }\n};","map":{"version":3,"names":["isStream","require","MESSAGE","os","TransportStream","module","exports","Stream","constructor","options","stream","Error","_stream","setMaxListeners","Infinity","isObjectMode","_writableState","objectMode","eol","EOL","log","info","callback","setImmediate","emit","write"],"sources":["/home/jp228/node_modules/winston/lib/winston/transports/stream.js"],"sourcesContent":["/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst isStream = require('is-stream');\nconst { MESSAGE } = require('triple-beam');\nconst os = require('os');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Stream extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    if (!options.stream || !isStream(options.stream)) {\n      throw new Error('options.stream is required.');\n    }\n\n    // We need to listen for drain events when write() returns false. This can\n    // make node mad at times.\n    this._stream = options.stream;\n    this._stream.setMaxListeners(Infinity);\n    this.isObjectMode = options.stream._writableState.objectMode;\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n    if (this.isObjectMode) {\n      this._stream.write(info);\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n\n    this._stream.write(`${info[MESSAGE]}${this.eol}`);\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n    return;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAG,MAAMC,MAAM,SAASH,eAAe,CAAC;EACpD;AACF;AACA;AACA;AACA;EACEI,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,KAAK,CAACA,OAAO,CAAC;IAEd,IAAI,CAACA,OAAO,CAACC,MAAM,IAAI,CAACV,QAAQ,CAACS,OAAO,CAACC,MAAM,CAAC,EAAE;MAChD,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;;IAEA;IACA;IACA,IAAI,CAACC,OAAO,GAAGH,OAAO,CAACC,MAAM;IAC7B,IAAI,CAACE,OAAO,CAACC,eAAe,CAACC,QAAQ,CAAC;IACtC,IAAI,CAACC,YAAY,GAAGN,OAAO,CAACC,MAAM,CAACM,cAAc,CAACC,UAAU;IAC5D,IAAI,CAACC,GAAG,GAAI,OAAOT,OAAO,CAACS,GAAG,KAAK,QAAQ,GAAIT,OAAO,CAACS,GAAG,GAAGf,EAAE,CAACgB,GAAG;EACrE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAClBC,YAAY,CAAC,MAAM,IAAI,CAACC,IAAI,CAAC,QAAQ,EAAEH,IAAI,CAAC,CAAC;IAC7C,IAAI,IAAI,CAACN,YAAY,EAAE;MACrB,IAAI,CAACH,OAAO,CAACa,KAAK,CAACJ,IAAI,CAAC;MACxB,IAAIC,QAAQ,EAAE;QACZA,QAAQ,CAAC,CAAC,CAAC,CAAC;MACd;MACA;IACF;IAEA,IAAI,CAACV,OAAO,CAACa,KAAK,CAAE,GAAEJ,IAAI,CAACnB,OAAO,CAAE,GAAE,IAAI,CAACgB,GAAI,EAAC,CAAC;IACjD,IAAII,QAAQ,EAAE;MACZA,QAAQ,CAAC,CAAC,CAAC,CAAC;IACd;IACA;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}