{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/frontend/src/App.js\",\n  _s = $RefreshSig$();\n//import './App.css';\n//import './publisher.js'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n//export default App\n\n// import React, { useState } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [message, setMessage] = useState('');\n\n//     const connect = () => {\n//         const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n//         const client = Stomp.over(socket);\n\n//         const headers = {\n//             login: \"admin\", // default username\n//             passcode: \"admin\", // default password\n//             // additional header options can go here if needed\n//         };\n\n//         client.connect(headers, frame => {\n//             console.log('Connected: ' + frame);\n//             setStompClient(client);\n//         }, error => {\n//             console.error('Error connecting to RabbitMQ:', error);\n//         });\n//     };\n\n//     const sendMessage = () => {\n//         if (stompClient) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <button onClick={connect}>Connect to RabbitMQ</button>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RabbitMQComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false); // New state to track if connection is in progress\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected\");\n        });\n      }\n    };\n  }, [stompClient, isConnected]);\n  const sendMessage = () => {\n    if (stompClient) {\n      stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({\n        message: message\n      }));\n      console.log(\"Message sent: \", message);\n    }\n  };\n  const connectAndSendMessage = () => {\n    if (isConnected) {\n      sendMessage();\n      return;\n    }\n    if (!isConnecting) {\n      // Proceed only if not already connecting\n      setIsConnecting(true);\n      const socket = new WebSocket('ws://192.168.192.1:15674/ws');\n      const client = Stomp.over(socket);\n      const headers = {\n        login: \"admin\",\n        passcode: \"admin\"\n      };\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n        setIsConnecting(false); // Update connecting state\n        sendMessage(); // Send message immediately after connection\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n        setIsConnecting(false); // Ensure we reset this if connection fails\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectAndSendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(RabbitMQComponent, \"46Kz0vQZ28ilG51y5Punb1MA7Q4=\");\n_c = RabbitMQComponent;\nexport default RabbitMQComponent;\nvar _c;\n$RefreshReg$(_c, \"RabbitMQComponent\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","jsxDEV","_jsxDEV","RabbitMQComponent","_s","stompClient","setStompClient","isConnected","setIsConnected","isConnecting","setIsConnecting","message","setMessage","disconnect","console","log","sendMessage","send","JSON","stringify","connectAndSendMessage","socket","WebSocket","client","over","headers","login","passcode","connect","frame","error","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/frontend/src/App.js"],"sourcesContent":["//import './App.css';\n//import './publisher.js'\n\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n//export default App\n\n\n// import React, { useState } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [message, setMessage] = useState('');\n\n//     const connect = () => {\n//         const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n//         const client = Stomp.over(socket);\n        \n//         const headers = {\n//             login: \"admin\", // default username\n//             passcode: \"admin\", // default password\n//             // additional header options can go here if needed\n//         };\n\n//         client.connect(headers, frame => {\n//             console.log('Connected: ' + frame);\n//             setStompClient(client);\n//         }, error => {\n//             console.error('Error connecting to RabbitMQ:', error);\n//         });\n//     };\n\n//     const sendMessage = () => {\n//         if (stompClient) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <button onClick={connect}>Connect to RabbitMQ</button>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\n\nconst RabbitMQComponent = () => {\n    const [stompClient, setStompClient] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [isConnecting, setIsConnecting] = useState(false); // New state to track if connection is in progress\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        return () => {\n            if (stompClient && isConnected) {\n                stompClient.disconnect(() => {\n                    console.log(\"Disconnected\");\n                });\n            }\n        };\n    }, [stompClient, isConnected]);\n\n    const sendMessage = () => {\n        if (stompClient) {\n            stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n            console.log(\"Message sent: \", message);\n        }\n    };\n\n    const connectAndSendMessage = () => {\n        if (isConnected) {\n            sendMessage();\n            return;\n        }\n\n        if (!isConnecting) { // Proceed only if not already connecting\n            setIsConnecting(true);\n            const socket = new WebSocket('ws://192.168.192.1:15674/ws');\n            const client = Stomp.over(socket);\n\n            const headers = {\n                login: \"admin\",\n                passcode: \"admin\",\n            };\n\n            client.connect(headers, frame => {\n                console.log('Connected: ' + frame);\n                setStompClient(client);\n                setIsConnected(true);\n                setIsConnecting(false); // Update connecting state\n                sendMessage(); // Send message immediately after connection\n            }, error => {\n                console.error('Error connecting to RabbitMQ:', error);\n                setIsConnecting(false); // Ensure we reset this if connection fails\n            });\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n            <button onClick={connectAndSendMessage}>Send Message</button>\n        </div>\n    );\n};\n\nexport default RabbitMQComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}