{"ast":null,"code":"/* eslint-disable no-console */\n/*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst {\n  LEVEL,\n  MESSAGE\n} = require('triple-beam');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */\nmodule.exports = class Console extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // Expose the name of this Transport on the prototype\n    this.name = options.name || 'console';\n    this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\n    this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\n    this.eol = typeof options.eol === 'string' ? options.eol : os.EOL;\n    this.setMaxListeners(30);\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n\n    // Remark: what if there is no raw...?\n    if (this.stderrLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.error adds a newline\n        console.error(info[MESSAGE]);\n      }\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    } else if (this.consoleWarnLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        // in Node.js console.warn is an alias for console.error\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.warn adds a newline\n        console.warn(info[MESSAGE]);\n      }\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n    if (console._stdout) {\n      // Node.js maps `process.stdout` to `console._stdout`.\n      console._stdout.write(`${info[MESSAGE]}${this.eol}`);\n    } else {\n      // console.log adds a newline.\n      console.log(info[MESSAGE]);\n    }\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n  }\n\n  /**\n   * Returns a Set-like object with strArray's elements as keys (each with the\n   * value true).\n   * @param {Array} strArray - Array of Set-elements as strings.\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n   * @returns {Object} - TODO: add return description.\n   * @private\n   */\n  _stringArrayToSet(strArray, errMsg) {\n    if (!strArray) return {};\n    errMsg = errMsg || 'Cannot make set from type other than Array of string elements';\n    if (!Array.isArray(strArray)) {\n      throw new Error(errMsg);\n    }\n    return strArray.reduce((set, el) => {\n      if (typeof el !== 'string') {\n        throw new Error(errMsg);\n      }\n      set[el] = true;\n      return set;\n    }, {});\n  }\n};","map":{"version":3,"names":["os","require","LEVEL","MESSAGE","TransportStream","module","exports","Console","constructor","options","name","stderrLevels","_stringArrayToSet","consoleWarnLevels","eol","EOL","setMaxListeners","log","info","callback","setImmediate","emit","console","_stderr","write","error","warn","_stdout","strArray","errMsg","Array","isArray","Error","reduce","set","el"],"sources":["/home/jp228/node_modules/winston/lib/winston/transports/console.js"],"sourcesContent":["/* eslint-disable no-console */\n/*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst { LEVEL, MESSAGE } = require('triple-beam');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */\nmodule.exports = class Console extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // Expose the name of this Transport on the prototype\n    this.name = options.name || 'console';\n    this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\n    this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\n\n    this.setMaxListeners(30);\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n\n    // Remark: what if there is no raw...?\n    if (this.stderrLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.error adds a newline\n        console.error(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    } else if (this.consoleWarnLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        // in Node.js console.warn is an alias for console.error\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.warn adds a newline\n        console.warn(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n\n    if (console._stdout) {\n      // Node.js maps `process.stdout` to `console._stdout`.\n      console._stdout.write(`${info[MESSAGE]}${this.eol}`);\n    } else {\n      // console.log adds a newline.\n      console.log(info[MESSAGE]);\n    }\n\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n  }\n\n  /**\n   * Returns a Set-like object with strArray's elements as keys (each with the\n   * value true).\n   * @param {Array} strArray - Array of Set-elements as strings.\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n   * @returns {Object} - TODO: add return description.\n   * @private\n   */\n  _stringArrayToSet(strArray, errMsg) {\n    if (!strArray)\n      return {};\n\n    errMsg = errMsg || 'Cannot make set from type other than Array of string elements';\n\n    if (!Array.isArray(strArray)) {\n      throw new Error(errMsg);\n    }\n\n    return strArray.reduce((set, el) =>  {\n      if (typeof el !== 'string') {\n        throw new Error(errMsg);\n      }\n      set[el] = true;\n\n      return set;\n    }, {});\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}