{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/New490/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/exchange/custom_direct/backend_queue', (message) => {\n//                     // Assuming message body is a JSON string\n//                     const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessage);\n\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessage]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = () => {\n//         if (stompClient && isConnected) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//             <div>\n//                 <h2>Received Messages</h2>\n//                 <ul>\n//                     {receivedMessages.map((msg, index) => (\n//                         <li key={index}>{msg.message}</li> // Adjust according to the structure of your messages\n//                     ))}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport Login from './login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RabbitMQComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [message, setMessage] = useState('');\n  const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const handleLogin = (username, password) => {\n    console.log(\"Login Attempt:\", username, password);\n    sendMessage(username);\n    // Here you would typically check credentials, etc.\n    // This is just a placeholder for demonstration\n    setIsLoggedIn(true);\n  };\n  useEffect(() => {\n    const connect = () => {\n      const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n      const client = Stomp.over(socket);\n      const headers = {\n        login: \"admin\",\n        passcode: \"admin\"\n      };\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n\n        // Subscribe to the backend_queue\n        client.subscribe('/exchange/custom_direct/backend_queue', message => {\n          // Assuming message body is a JSON string\n          const receivedMessage = JSON.parse(message.body);\n          console.log(\"Received message: \", receivedMessage);\n\n          // Update state with the new message\n          setReceivedMessages(prevMessages => [...prevMessages, receivedMessage]);\n        });\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n      });\n    };\n    connect();\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected from RabbitMQ\");\n          setIsConnected(false);\n        });\n      }\n    };\n  }, []);\n\n  // Your sendMessage function remains unchanged\n  const sendMessage = message => {\n    if (stompClient && isConnected) {\n      stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({\n        message: message\n      }));\n      console.log(\"Message sent: \", message);\n    } else {\n      console.log(\"Not connected to RabbitMQ\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(RabbitMQComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 1\n  }, this);\n};\n_s(RabbitMQComponent, \"j6+ZOv1t03iUrbHsabbh/h5GHvk=\");\n_c = RabbitMQComponent;\nexport default RabbitMQComponent;\nvar _c;\n$RefreshReg$(_c, \"RabbitMQComponent\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","Login","jsxDEV","_jsxDEV","RabbitMQComponent","_s","stompClient","setStompClient","isConnected","setIsConnected","message","setMessage","receivedMessages","setReceivedMessages","isLoggedIn","setIsLoggedIn","handleLogin","username","password","console","log","sendMessage","connect","socket","WebSocket","client","over","headers","login","passcode","frame","subscribe","receivedMessage","JSON","parse","body","prevMessages","error","disconnect","send","stringify","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/New490/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/exchange/custom_direct/backend_queue', (message) => {\n//                     // Assuming message body is a JSON string\n//                     const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessage);\n\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessage]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = () => {\n//         if (stompClient && isConnected) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//             <div>\n//                 <h2>Received Messages</h2>\n//                 <ul>\n//                     {receivedMessages.map((msg, index) => (\n//                         <li key={index}>{msg.message}</li> // Adjust according to the structure of your messages\n//                     ))}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport Login from './login';\n\nconst RabbitMQComponent = () => {\n    const [stompClient, setStompClient] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [message, setMessage] = useState('');\n    const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n\n\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    const handleLogin = (username, password) => {\n        console.log(\"Login Attempt:\", username, password);\n        sendMessage(username);\n        // Here you would typically check credentials, etc.\n        // This is just a placeholder for demonstration\n        setIsLoggedIn(true);\n    };\n\n\n\n\n    useEffect(() => {\n        const connect = () => {\n            const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n            const client = Stomp.over(socket);\n\n            const headers = {\n                login: \"admin\",\n                passcode: \"admin\",\n            };\n\n            client.connect(headers, frame => {\n                console.log('Connected: ' + frame);\n                setStompClient(client);\n                setIsConnected(true);\n\n                // Subscribe to the backend_queue\n                client.subscribe('/exchange/custom_direct/backend_queue', (message) => {\n                    // Assuming message body is a JSON string\n                    const receivedMessage = JSON.parse(message.body);\n                    console.log(\"Received message: \", receivedMessage);\n\n                    // Update state with the new message\n                    setReceivedMessages(prevMessages => [...prevMessages, receivedMessage]);\n                });\n            }, error => {\n                console.error('Error connecting to RabbitMQ:', error);\n            });\n        };\n\n        connect();\n\n        return () => {\n            if (stompClient && isConnected) {\n                stompClient.disconnect(() => {\n                    console.log(\"Disconnected from RabbitMQ\");\n                    setIsConnected(false);\n                });\n            }\n        };\n    }, []);\n\n    // Your sendMessage function remains unchanged\n    const sendMessage = (message) => {\n        if (stompClient && isConnected) {\n            stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n            console.log(\"Message sent: \", message);\n        } else {\n            console.log(\"Not connected to RabbitMQ\");\n        }\n    };\n\n    return (\n        \n\n\n<div>\n            {!isLoggedIn ? (\n                <Login onLogin={handleLogin} />\n            ) : (\n                <RabbitMQComponent />\n            )}\n        </div>\n    );\n};\n\nexport default RabbitMQComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}