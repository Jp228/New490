{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const handleLogin = (username, password) => {\n//         console.log(\"Login Attempt:\", username, password);\n//         //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n//         sendMessage(\"/queue/backendQueue\", { ID: \"True\"});\n//         // Here you would typically check credentials, etc.\n//         // This is just a placeholder for demonstration{validation: credentials are valid}\n//         setIsLoggedIn(true);\n//     };\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/queue/backendQueue', (receivedMessagemessage) => {\n//                     // Assuming message body is a JSON string\n//                     //const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessagemessage.body);\n//                     if (receivedMessagemessage.body='True') {\n//                         // Handle successful authentication\n//                         // Using React Router for redirection as an example\n//                         console.log('SUCCESS')\n//                     } else {\n//                         // Handle authentication failure\n//                         console.log(\"SORRY\")\n//                     }\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = (queue, messageContent) => {\n//         if (stompClient && isConnected) {\n//             // Use the `queue` parameter to dynamically set the destination\n//             // Convert the `messageContent` parameter to a JSON string to send as the message body\n//             stompClient.send(queue, {}, JSON.stringify(messageContent));\n//             console.log(\"Message sent to\", queue, \":\", messageContent);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login onLogin={handleLogin} />\n//             ) : (\n//                 <RabbitMQComponent />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;","map":{"version":3,"names":[],"sources":["/home/jp228/Desktop/New490/frontend/src/rabbitmq.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n\n\n\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n\n\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const handleLogin = (username, password) => {\n//         console.log(\"Login Attempt:\", username, password);\n//         //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n//         sendMessage(\"/queue/backendQueue\", { ID: \"True\"});\n//         // Here you would typically check credentials, etc.\n//         // This is just a placeholder for demonstration{validation: credentials are valid}\n//         setIsLoggedIn(true);\n//     };\n\n\n\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/queue/backendQueue', (receivedMessagemessage) => {\n//                     // Assuming message body is a JSON string\n//                     //const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessagemessage.body);\n//                     if (receivedMessagemessage.body='True') {\n//                         // Handle successful authentication\n//                         // Using React Router for redirection as an example\n//                         console.log('SUCCESS')\n//                     } else {\n//                         // Handle authentication failure\n//                         console.log(\"SORRY\")\n//                     }\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = (queue, messageContent) => {\n//         if (stompClient && isConnected) {\n//             // Use the `queue` parameter to dynamically set the destination\n//             // Convert the `messageContent` parameter to a JSON string to send as the message body\n//             stompClient.send(queue, {}, JSON.stringify(messageContent));\n//             console.log(\"Message sent to\", queue, \":\", messageContent);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login onLogin={handleLogin} />\n//             ) : (\n//                 <RabbitMQComponent />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;"],"mappings":"AAAA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}