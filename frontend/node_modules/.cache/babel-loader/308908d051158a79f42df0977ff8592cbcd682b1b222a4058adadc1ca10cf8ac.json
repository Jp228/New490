{"ast":null,"code":"//\n//\n//\n\n// Different kind of credentials that can be supplied when opening a\n// connection, corresponding to SASL mechanisms There's only two\n// useful mechanisms that RabbitMQ implements:\n//  * PLAIN (send username and password in the plain)\n//  * EXTERNAL (assume the server will figure out who you are from\n//    context, i.e., your SSL certificate)\nvar codec = require('./codec');\nmodule.exports.plain = function (user, passwd) {\n  return {\n    mechanism: 'PLAIN',\n    response: function () {\n      return Buffer.from(['', user, passwd].join(String.fromCharCode(0)));\n    },\n    username: user,\n    password: passwd\n  };\n};\nmodule.exports.amqplain = function (user, passwd) {\n  return {\n    mechanism: 'AMQPLAIN',\n    response: function () {\n      const buffer = Buffer.alloc(16384);\n      const size = codec.encodeTable(buffer, {\n        LOGIN: user,\n        PASSWORD: passwd\n      }, 0);\n      return buffer.slice(4, size);\n    },\n    username: user,\n    password: passwd\n  };\n};\nmodule.exports.external = function () {\n  return {\n    mechanism: 'EXTERNAL',\n    response: function () {\n      return Buffer.from('');\n    }\n  };\n};","map":{"version":3,"names":["codec","require","module","exports","plain","user","passwd","mechanism","response","Buffer","from","join","String","fromCharCode","username","password","amqplain","buffer","alloc","size","encodeTable","LOGIN","PASSWORD","slice","external"],"sources":["/home/jp228/Desktop/frontend/node_modules/amqplib/lib/credentials.js"],"sourcesContent":["//\n//\n//\n\n// Different kind of credentials that can be supplied when opening a\n// connection, corresponding to SASL mechanisms There's only two\n// useful mechanisms that RabbitMQ implements:\n//  * PLAIN (send username and password in the plain)\n//  * EXTERNAL (assume the server will figure out who you are from\n//    context, i.e., your SSL certificate)\nvar codec = require('./codec')\n\nmodule.exports.plain = function(user, passwd) {\n  return {\n    mechanism: 'PLAIN',\n    response: function() {\n      return Buffer.from(['', user, passwd].join(String.fromCharCode(0)))\n    },\n    username: user,\n    password: passwd\n  }\n}\n\nmodule.exports.amqplain = function(user, passwd) {\n  return {\n    mechanism: 'AMQPLAIN',\n    response: function() {\n      const buffer = Buffer.alloc(16384);\n      const size = codec.encodeTable(buffer, { LOGIN: user, PASSWORD: passwd}, 0);\n      return buffer.slice(4, size);\n    },\n    username: user,\n    password: passwd\n  }\n}\n\nmodule.exports.external = function() {\n  return {\n    mechanism: 'EXTERNAL',\n    response: function() { return Buffer.from(''); }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE9BC,MAAM,CAACC,OAAO,CAACC,KAAK,GAAG,UAASC,IAAI,EAAEC,MAAM,EAAE;EAC5C,OAAO;IACLC,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACnB,OAAOC,MAAM,CAACC,IAAI,CAAC,CAAC,EAAE,EAAEL,IAAI,EAAEC,MAAM,CAAC,CAACK,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC;IACDC,QAAQ,EAAET,IAAI;IACdU,QAAQ,EAAET;EACZ,CAAC;AACH,CAAC;AAEDJ,MAAM,CAACC,OAAO,CAACa,QAAQ,GAAG,UAASX,IAAI,EAAEC,MAAM,EAAE;EAC/C,OAAO;IACLC,SAAS,EAAE,UAAU;IACrBC,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACnB,MAAMS,MAAM,GAAGR,MAAM,CAACS,KAAK,CAAC,KAAK,CAAC;MAClC,MAAMC,IAAI,GAAGnB,KAAK,CAACoB,WAAW,CAACH,MAAM,EAAE;QAAEI,KAAK,EAAEhB,IAAI;QAAEiB,QAAQ,EAAEhB;MAAM,CAAC,EAAE,CAAC,CAAC;MAC3E,OAAOW,MAAM,CAACM,KAAK,CAAC,CAAC,EAAEJ,IAAI,CAAC;IAC9B,CAAC;IACDL,QAAQ,EAAET,IAAI;IACdU,QAAQ,EAAET;EACZ,CAAC;AACH,CAAC;AAEDJ,MAAM,CAACC,OAAO,CAACqB,QAAQ,GAAG,YAAW;EACnC,OAAO;IACLjB,SAAS,EAAE,UAAU;IACrBC,QAAQ,EAAE,SAAAA,CAAA,EAAW;MAAE,OAAOC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;IAAE;EACjD,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}