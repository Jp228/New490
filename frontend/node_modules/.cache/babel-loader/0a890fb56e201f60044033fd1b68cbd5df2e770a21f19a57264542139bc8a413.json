{"ast":null,"code":"'use strict';\n\n// JavaScript is numerically challenged\nvar SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nvar SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// The maximum contiguous integer that can be held in a IEEE754 double\nvar MAX_INT = 0x1fffffffffffff;\nfunction isContiguousInt(val) {\n  return val <= MAX_INT && val >= -MAX_INT;\n}\nfunction assertContiguousInt(val) {\n  if (!isContiguousInt(val)) {\n    throw new TypeError(\"number cannot be represented as a contiguous integer\");\n  }\n}\nmodule.exports.isContiguousInt = isContiguousInt;\nmodule.exports.assertContiguousInt = assertContiguousInt;\n\n// Fill in the regular procedures\n['UInt', 'Int'].forEach(function (sign) {\n  var suffix = sign + '8';\n  module.exports['read' + suffix] = Buffer.prototype['read' + suffix].call;\n  module.exports['write' + suffix] = Buffer.prototype['write' + suffix].call;\n  ['16', '32'].forEach(function (size) {\n    ['LE', 'BE'].forEach(function (endian) {\n      var suffix = sign + size + endian;\n      var read = Buffer.prototype['read' + suffix];\n      module.exports['read' + suffix] = function (buf, offset) {\n        return read.call(buf, offset);\n      };\n      var write = Buffer.prototype['write' + suffix];\n      module.exports['write' + suffix] = function (buf, val, offset) {\n        return write.call(buf, val, offset);\n      };\n    });\n  });\n});\n\n// Check that a value is an integer within the given range\nfunction check_value(val, min, max) {\n  val = +val;\n  if (typeof val != 'number' || val < min || val > max || Math.floor(val) !== val) {\n    throw new TypeError(\"\\\"value\\\" argument is out of bounds\");\n  }\n  return val;\n}\n\n// Check that something is within the Buffer bounds\nfunction check_bounds(buf, offset, len) {\n  if (offset < 0 || offset + len > buf.length) {\n    throw new RangeError(\"Index out of range\");\n  }\n}\nfunction readUInt24BE(buf, offset) {\n  return buf.readUInt8(offset) << 16 | buf.readUInt16BE(offset + 1);\n}\nmodule.exports.readUInt24BE = readUInt24BE;\nfunction writeUInt24BE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffff);\n  check_bounds(buf, offset, 3);\n  buf.writeUInt8(val >>> 16, offset);\n  buf.writeUInt16BE(val & 0xffff, offset + 1);\n}\nmodule.exports.writeUInt24BE = writeUInt24BE;\nfunction readUInt40BE(buf, offset) {\n  return (buf.readUInt8(offset) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1);\n}\nmodule.exports.readUInt40BE = readUInt40BE;\nfunction writeUInt40BE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffff);\n  check_bounds(buf, offset, 5);\n  buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset);\n  buf.writeInt32BE(val & -1, offset + 1);\n}\nmodule.exports.writeUInt40BE = writeUInt40BE;\nfunction readUInt48BE(buf, offset) {\n  return buf.readUInt16BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2);\n}\nmodule.exports.readUInt48BE = readUInt48BE;\nfunction writeUInt48BE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffffff);\n  check_bounds(buf, offset, 6);\n  buf.writeUInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n  buf.writeInt32BE(val & -1, offset + 2);\n}\nmodule.exports.writeUInt48BE = writeUInt48BE;\nfunction readUInt56BE(buf, offset) {\n  return ((buf.readUInt8(offset) || 0) << 16 | buf.readUInt16BE(offset + 1)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3);\n}\nmodule.exports.readUInt56BE = readUInt56BE;\nfunction writeUInt56BE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffffffff);\n  check_bounds(buf, offset, 7);\n  if (val < 0x100000000000000) {\n    var hi = Math.floor(val * SHIFT_RIGHT_32);\n    buf.writeUInt8(hi >>> 16, offset);\n    buf.writeUInt16BE(hi & 0xffff, offset + 1);\n    buf.writeInt32BE(val & -1, offset + 3);\n  } else {\n    // Special case because 2^56-1 gets rounded up to 2^56\n    buf[offset] = 0xff;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0xff;\n  }\n}\nmodule.exports.writeUInt56BE = writeUInt56BE;\nfunction readUInt64BE(buf, offset) {\n  return buf.readUInt32BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4);\n}\nmodule.exports.readUInt64BE = readUInt64BE;\nfunction writeUInt64BE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffffffffff);\n  check_bounds(buf, offset, 8);\n  if (val < 0x10000000000000000) {\n    buf.writeUInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 4);\n  } else {\n    // Special case because 2^64-1 gets rounded up to 2^64\n    buf[offset] = 0xff;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0xff;\n    buf[offset + 7] = 0xff;\n  }\n}\nmodule.exports.writeUInt64BE = writeUInt64BE;\nfunction readUInt24LE(buf, offset) {\n  return buf.readUInt8(offset + 2) << 16 | buf.readUInt16LE(offset);\n}\nmodule.exports.readUInt24LE = readUInt24LE;\nfunction writeUInt24LE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffff);\n  check_bounds(buf, offset, 3);\n  buf.writeUInt16LE(val & 0xffff, offset);\n  buf.writeUInt8(val >>> 16, offset + 2);\n}\nmodule.exports.writeUInt24LE = writeUInt24LE;\nfunction readUInt40LE(buf, offset) {\n  return (buf.readUInt8(offset + 4) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt40LE = readUInt40LE;\nfunction writeUInt40LE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffff);\n  check_bounds(buf, offset, 5);\n  buf.writeInt32LE(val & -1, offset);\n  buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeUInt40LE = writeUInt40LE;\nfunction readUInt48LE(buf, offset) {\n  return buf.readUInt16LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt48LE = readUInt48LE;\nfunction writeUInt48LE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffffff);\n  check_bounds(buf, offset, 6);\n  buf.writeInt32LE(val & -1, offset);\n  buf.writeUInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeUInt48LE = writeUInt48LE;\nfunction readUInt56LE(buf, offset) {\n  return ((buf.readUInt8(offset + 6) || 0) << 16 | buf.readUInt16LE(offset + 4)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt56LE = readUInt56LE;\nfunction writeUInt56LE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffffffff);\n  check_bounds(buf, offset, 7);\n  if (val < 0x100000000000000) {\n    buf.writeInt32LE(val & -1, offset);\n    var hi = Math.floor(val * SHIFT_RIGHT_32);\n    buf.writeUInt16LE(hi & 0xffff, offset + 4);\n    buf.writeUInt8(hi >>> 16, offset + 6);\n  } else {\n    // Special case because 2^56-1 gets rounded up to 2^56\n    buf[offset] = 0xff;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0xff;\n  }\n}\nmodule.exports.writeUInt56LE = writeUInt56LE;\nfunction readUInt64LE(buf, offset) {\n  return buf.readUInt32LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt64LE = readUInt64LE;\nfunction writeUInt64LE(buf, val, offset) {\n  val = check_value(val, 0, 0xffffffffffffffff);\n  check_bounds(buf, offset, 8);\n  if (val < 0x10000000000000000) {\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeUInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n  } else {\n    // Special case because 2^64-1 gets rounded up to 2^64\n    buf[offset] = 0xff;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0xff;\n    buf[offset + 7] = 0xff;\n  }\n}\nmodule.exports.writeUInt64LE = writeUInt64LE;\nfunction readInt24BE(buf, offset) {\n  return (buf.readInt8(offset) << 16) + buf.readUInt16BE(offset + 1);\n}\nmodule.exports.readInt24BE = readInt24BE;\nfunction writeInt24BE(buf, val, offset) {\n  val = check_value(val, -0x800000, 0x7fffff);\n  check_bounds(buf, offset, 3);\n  buf.writeInt8(val >> 16, offset);\n  buf.writeUInt16BE(val & 0xffff, offset + 1);\n}\nmodule.exports.writeInt24BE = writeInt24BE;\nfunction readInt40BE(buf, offset) {\n  return (buf.readInt8(offset) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1);\n}\nmodule.exports.readInt40BE = readInt40BE;\nfunction writeInt40BE(buf, val, offset) {\n  val = check_value(val, -0x8000000000, 0x7fffffffff);\n  check_bounds(buf, offset, 5);\n  buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset);\n  buf.writeInt32BE(val & -1, offset + 1);\n}\nmodule.exports.writeInt40BE = writeInt40BE;\nfunction readInt48BE(buf, offset) {\n  return buf.readInt16BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2);\n}\nmodule.exports.readInt48BE = readInt48BE;\nfunction writeInt48BE(buf, val, offset) {\n  val = check_value(val, -0x800000000000, 0x7fffffffffff);\n  check_bounds(buf, offset, 6);\n  buf.writeInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n  buf.writeInt32BE(val & -1, offset + 2);\n}\nmodule.exports.writeInt48BE = writeInt48BE;\nfunction readInt56BE(buf, offset) {\n  return (((buf.readInt8(offset) || 0) << 16) + buf.readUInt16BE(offset + 1)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3);\n}\nmodule.exports.readInt56BE = readInt56BE;\nfunction writeInt56BE(buf, val, offset) {\n  val = check_value(val, -0x800000000000000, 0x7fffffffffffff);\n  check_bounds(buf, offset, 7);\n  if (val < 0x80000000000000) {\n    var hi = Math.floor(val * SHIFT_RIGHT_32);\n    buf.writeInt8(hi >> 16, offset);\n    buf.writeUInt16BE(hi & 0xffff, offset + 1);\n    buf.writeInt32BE(val & -1, offset + 3);\n  } else {\n    // Special case because 2^55-1 gets rounded up to 2^55\n    buf[offset] = 0x7f;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0xff;\n  }\n}\nmodule.exports.writeInt56BE = writeInt56BE;\nfunction readInt64BE(buf, offset) {\n  return buf.readInt32BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4);\n}\nmodule.exports.readInt64BE = readInt64BE;\nfunction writeInt64BE(buf, val, offset) {\n  val = check_value(val, -0x800000000000000000, 0x7fffffffffffffff);\n  check_bounds(buf, offset, 8);\n  if (val < 0x8000000000000000) {\n    buf.writeInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 4);\n  } else {\n    // Special case because 2^63-1 gets rounded up to 2^63\n    buf[offset] = 0x7f;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0xff;\n    buf[offset + 7] = 0xff;\n  }\n}\nmodule.exports.writeInt64BE = writeInt64BE;\nfunction readInt24LE(buf, offset) {\n  return (buf.readInt8(offset + 2) << 16) + buf.readUInt16LE(offset);\n}\nmodule.exports.readInt24LE = readInt24LE;\nfunction writeInt24LE(buf, val, offset) {\n  val = check_value(val, -0x800000, 0x7fffff);\n  check_bounds(buf, offset, 3);\n  buf.writeUInt16LE(val & 0xffff, offset);\n  buf.writeInt8(val >> 16, offset + 2);\n}\nmodule.exports.writeInt24LE = writeInt24LE;\nfunction readInt40LE(buf, offset) {\n  return (buf.readInt8(offset + 4) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt40LE = readInt40LE;\nfunction writeInt40LE(buf, val, offset) {\n  val = check_value(val, -0x8000000000, 0x7fffffffff);\n  check_bounds(buf, offset, 5);\n  buf.writeInt32LE(val & -1, offset);\n  buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeInt40LE = writeInt40LE;\nfunction readInt48LE(buf, offset) {\n  return buf.readInt16LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt48LE = readInt48LE;\nfunction writeInt48LE(buf, val, offset) {\n  val = check_value(val, -0x800000000000, 0x7fffffffffff);\n  check_bounds(buf, offset, 6);\n  buf.writeInt32LE(val & -1, offset);\n  buf.writeInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeInt48LE = writeInt48LE;\nfunction readInt56LE(buf, offset) {\n  return (((buf.readInt8(offset + 6) || 0) << 16) + buf.readUInt16LE(offset + 4)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt56LE = readInt56LE;\nfunction writeInt56LE(buf, val, offset) {\n  val = check_value(val, -0x80000000000000, 0x7fffffffffffff);\n  check_bounds(buf, offset, 7);\n  if (val < 0x80000000000000) {\n    buf.writeInt32LE(val & -1, offset);\n    var hi = Math.floor(val * SHIFT_RIGHT_32);\n    buf.writeUInt16LE(hi & 0xffff, offset + 4);\n    buf.writeInt8(hi >> 16, offset + 6);\n  } else {\n    // Special case because 2^55-1 gets rounded up to 2^55\n    buf[offset] = 0xff;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0x7f;\n  }\n}\nmodule.exports.writeInt56LE = writeInt56LE;\nfunction readInt64LE(buf, offset) {\n  return buf.readInt32LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt64LE = readInt64LE;\nfunction writeInt64LE(buf, val, offset) {\n  val = check_value(val, -0x8000000000000000, 0x7fffffffffffffff);\n  check_bounds(buf, offset, 8);\n  if (val < 0x8000000000000000) {\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n  } else {\n    // Special case because 2^55-1 gets rounded up to 2^55\n    buf[offset] = 0xff;\n    buf[offset + 1] = 0xff;\n    buf[offset + 2] = 0xff;\n    buf[offset + 3] = 0xff;\n    buf[offset + 4] = 0xff;\n    buf[offset + 5] = 0xff;\n    buf[offset + 6] = 0xff;\n    buf[offset + 7] = 0x7f;\n  }\n}\nmodule.exports.writeInt64LE = writeInt64LE;","map":{"version":3,"names":["SHIFT_LEFT_32","SHIFT_RIGHT_32","MAX_INT","isContiguousInt","val","assertContiguousInt","TypeError","module","exports","forEach","sign","suffix","Buffer","prototype","call","size","endian","read","buf","offset","write","check_value","min","max","Math","floor","check_bounds","len","length","RangeError","readUInt24BE","readUInt8","readUInt16BE","writeUInt24BE","writeUInt8","writeUInt16BE","readUInt40BE","readUInt32BE","writeUInt40BE","writeInt32BE","readUInt48BE","writeUInt48BE","readUInt56BE","writeUInt56BE","hi","readUInt64BE","writeUInt64BE","writeUInt32BE","readUInt24LE","readUInt16LE","writeUInt24LE","writeUInt16LE","readUInt40LE","readUInt32LE","writeUInt40LE","writeInt32LE","readUInt48LE","writeUInt48LE","readUInt56LE","writeUInt56LE","readUInt64LE","writeUInt64LE","writeUInt32LE","readInt24BE","readInt8","writeInt24BE","writeInt8","readInt40BE","writeInt40BE","readInt48BE","readInt16BE","writeInt48BE","writeInt16BE","readInt56BE","writeInt56BE","readInt64BE","readInt32BE","writeInt64BE","readInt24LE","writeInt24LE","readInt40LE","writeInt40LE","readInt48LE","readInt16LE","writeInt48LE","writeInt16LE","readInt56LE","writeInt56LE","readInt64LE","readInt32LE","writeInt64LE"],"sources":["/home/jp228/node_modules/buffer-more-ints/buffer-more-ints.js"],"sourcesContent":["'use strict';\n\n// JavaScript is numerically challenged\nvar SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nvar SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// The maximum contiguous integer that can be held in a IEEE754 double\nvar MAX_INT = 0x1fffffffffffff;\n\nfunction isContiguousInt(val) {\n    return val <= MAX_INT && val >= -MAX_INT;\n}\n\nfunction assertContiguousInt(val) {\n    if (!isContiguousInt(val)) {\n        throw new TypeError(\"number cannot be represented as a contiguous integer\");\n    }\n}\n\nmodule.exports.isContiguousInt = isContiguousInt;\nmodule.exports.assertContiguousInt = assertContiguousInt;\n\n// Fill in the regular procedures\n['UInt', 'Int'].forEach(function (sign) {\n  var suffix = sign + '8';\n  module.exports['read' + suffix] =\n    Buffer.prototype['read' + suffix].call;\n  module.exports['write' + suffix] =\n    Buffer.prototype['write' + suffix].call;\n\n  ['16', '32'].forEach(function (size) {\n    ['LE', 'BE'].forEach(function (endian) {\n      var suffix = sign + size + endian;\n      var read = Buffer.prototype['read' + suffix];\n      module.exports['read' + suffix] =\n        function (buf, offset) {\n          return read.call(buf, offset);\n        };\n      var write = Buffer.prototype['write' + suffix];\n      module.exports['write' + suffix] =\n        function (buf, val, offset) {\n          return write.call(buf, val, offset);\n        };\n    });\n  });\n});\n\n// Check that a value is an integer within the given range\nfunction check_value(val, min, max) {\n    val = +val;\n    if (typeof(val) != 'number' || val < min || val > max || Math.floor(val) !== val) {\n        throw new TypeError(\"\\\"value\\\" argument is out of bounds\");\n    }\n    return val;\n}\n\n// Check that something is within the Buffer bounds\nfunction check_bounds(buf, offset, len) {\n    if (offset < 0 || offset + len > buf.length) {\n        throw new RangeError(\"Index out of range\");\n    }\n}\n\nfunction readUInt24BE(buf, offset) {\n  return buf.readUInt8(offset) << 16 | buf.readUInt16BE(offset + 1);\n}\nmodule.exports.readUInt24BE = readUInt24BE;\n\nfunction writeUInt24BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffff);\n    check_bounds(buf, offset, 3);\n    buf.writeUInt8(val >>> 16, offset);\n    buf.writeUInt16BE(val & 0xffff, offset + 1);\n}\nmodule.exports.writeUInt24BE = writeUInt24BE;\n\nfunction readUInt40BE(buf, offset) {\n    return (buf.readUInt8(offset) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1);\n}\nmodule.exports.readUInt40BE = readUInt40BE;\n\nfunction writeUInt40BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 1);\n}\nmodule.exports.writeUInt40BE = writeUInt40BE;\n\nfunction readUInt48BE(buf, offset) {\n    return buf.readUInt16BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2);\n}\nmodule.exports.readUInt48BE = readUInt48BE;\n\nfunction writeUInt48BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeUInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 2);\n}\nmodule.exports.writeUInt48BE = writeUInt48BE;\n\nfunction readUInt56BE(buf, offset) {\n    return ((buf.readUInt8(offset) || 0) << 16 | buf.readUInt16BE(offset + 1)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3);\n}\nmodule.exports.readUInt56BE = readUInt56BE;\n\nfunction writeUInt56BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x100000000000000) {\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeUInt8(hi >>> 16, offset);\n        buf.writeUInt16BE(hi & 0xffff, offset + 1);\n        buf.writeInt32BE(val & -1, offset + 3);\n    } else {\n        // Special case because 2^56-1 gets rounded up to 2^56\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n    }\n}\nmodule.exports.writeUInt56BE = writeUInt56BE;\n\nfunction readUInt64BE(buf, offset) {\n    return buf.readUInt32BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4);\n}\nmodule.exports.readUInt64BE = readUInt64BE;\n\nfunction writeUInt64BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x10000000000000000) {\n        buf.writeUInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n        buf.writeInt32BE(val & -1, offset + 4);\n    } else {\n        // Special case because 2^64-1 gets rounded up to 2^64\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0xff;\n    }\n}\nmodule.exports.writeUInt64BE = writeUInt64BE;\n\nfunction readUInt24LE(buf, offset) {\n    return buf.readUInt8(offset + 2) << 16 | buf.readUInt16LE(offset);\n}\nmodule.exports.readUInt24LE = readUInt24LE;\n\nfunction writeUInt24LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffff);\n    check_bounds(buf, offset, 3);\n\n    buf.writeUInt16LE(val & 0xffff, offset);\n    buf.writeUInt8(val >>> 16, offset + 2);\n}\nmodule.exports.writeUInt24LE = writeUInt24LE;\n\nfunction readUInt40LE(buf, offset) {\n    return (buf.readUInt8(offset + 4) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt40LE = readUInt40LE;\n\nfunction writeUInt40LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeUInt40LE = writeUInt40LE;\n\nfunction readUInt48LE(buf, offset) {\n    return buf.readUInt16LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt48LE = readUInt48LE;\n\nfunction writeUInt48LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeUInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeUInt48LE = writeUInt48LE;\n\nfunction readUInt56LE(buf, offset) {\n    return ((buf.readUInt8(offset + 6) || 0) << 16 | buf.readUInt16LE(offset + 4)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt56LE = readUInt56LE;\n\nfunction writeUInt56LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x100000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeUInt16LE(hi & 0xffff, offset + 4);\n        buf.writeUInt8(hi >>> 16, offset + 6);\n    } else {\n        // Special case because 2^56-1 gets rounded up to 2^56\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n    }\n}\nmodule.exports.writeUInt56LE = writeUInt56LE;\n\nfunction readUInt64LE(buf, offset) {\n    return buf.readUInt32LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt64LE = readUInt64LE;\n\nfunction writeUInt64LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x10000000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        buf.writeUInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n    } else {\n        // Special case because 2^64-1 gets rounded up to 2^64\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0xff;\n    }\n}\nmodule.exports.writeUInt64LE = writeUInt64LE;\n\n\nfunction readInt24BE(buf, offset) {\n    return (buf.readInt8(offset) << 16) + buf.readUInt16BE(offset + 1);\n}\nmodule.exports.readInt24BE = readInt24BE;\n\nfunction writeInt24BE(buf, val, offset) {\n    val = check_value(val, -0x800000, 0x7fffff);\n    check_bounds(buf, offset, 3);\n    buf.writeInt8(val >> 16, offset);\n    buf.writeUInt16BE(val & 0xffff, offset + 1);\n}\nmodule.exports.writeInt24BE = writeInt24BE;\n\nfunction readInt40BE(buf, offset) {\n    return (buf.readInt8(offset) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1);\n}\nmodule.exports.readInt40BE = readInt40BE;\n\nfunction writeInt40BE(buf, val, offset) {\n    val = check_value(val, -0x8000000000, 0x7fffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 1);\n}\nmodule.exports.writeInt40BE = writeInt40BE;\n\nfunction readInt48BE(buf, offset) {\n    return buf.readInt16BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2);\n}\nmodule.exports.readInt48BE = readInt48BE;\n\nfunction writeInt48BE(buf, val, offset) {\n    val = check_value(val, -0x800000000000, 0x7fffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 2);\n}\nmodule.exports.writeInt48BE = writeInt48BE;\n\nfunction readInt56BE(buf, offset) {\n    return (((buf.readInt8(offset) || 0) << 16) + buf.readUInt16BE(offset + 1)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3);\n}\nmodule.exports.readInt56BE = readInt56BE;\n\nfunction writeInt56BE(buf, val, offset) {\n    val = check_value(val, -0x800000000000000, 0x7fffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x80000000000000) {\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeInt8(hi >> 16, offset);\n        buf.writeUInt16BE(hi & 0xffff, offset + 1);\n        buf.writeInt32BE(val & -1, offset + 3);\n    } else {\n        // Special case because 2^55-1 gets rounded up to 2^55\n        buf[offset] = 0x7f;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n    }\n}\nmodule.exports.writeInt56BE = writeInt56BE;\n\nfunction readInt64BE(buf, offset) {\n    return buf.readInt32BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4);\n}\nmodule.exports.readInt64BE = readInt64BE;\n\nfunction writeInt64BE(buf, val, offset) {\n    val = check_value(val, -0x800000000000000000, 0x7fffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x8000000000000000) {\n        buf.writeInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n        buf.writeInt32BE(val & -1, offset + 4);\n    } else {\n        // Special case because 2^63-1 gets rounded up to 2^63\n        buf[offset] = 0x7f;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0xff;\n    }\n}\nmodule.exports.writeInt64BE = writeInt64BE;\n\nfunction readInt24LE(buf, offset) {\n    return (buf.readInt8(offset + 2) << 16) + buf.readUInt16LE(offset);\n}\nmodule.exports.readInt24LE = readInt24LE;\n\nfunction writeInt24LE(buf, val, offset) {\n    val = check_value(val, -0x800000, 0x7fffff);\n    check_bounds(buf, offset, 3);\n    buf.writeUInt16LE(val & 0xffff, offset);\n    buf.writeInt8(val >> 16, offset + 2);\n}\nmodule.exports.writeInt24LE = writeInt24LE;\n\nfunction readInt40LE(buf, offset) {\n    return (buf.readInt8(offset + 4) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt40LE = readInt40LE;\n\nfunction writeInt40LE(buf, val, offset) {\n    val = check_value(val, -0x8000000000, 0x7fffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeInt40LE = writeInt40LE;\n\nfunction readInt48LE(buf, offset) {\n    return buf.readInt16LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt48LE = readInt48LE;\n\nfunction writeInt48LE(buf, val, offset) {\n    val = check_value(val, -0x800000000000, 0x7fffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeInt48LE = writeInt48LE;\n\nfunction readInt56LE(buf, offset) {\n    return (((buf.readInt8(offset + 6) || 0) << 16) + buf.readUInt16LE(offset + 4)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt56LE = readInt56LE;\n\nfunction writeInt56LE(buf, val, offset) {\n    val = check_value(val, -0x80000000000000, 0x7fffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x80000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeUInt16LE(hi & 0xffff, offset + 4);\n        buf.writeInt8(hi >> 16, offset + 6);\n    } else {\n        // Special case because 2^55-1 gets rounded up to 2^55\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0x7f;\n    }\n}\nmodule.exports.writeInt56LE = writeInt56LE;\n\nfunction readInt64LE(buf, offset) {\n    return buf.readInt32LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt64LE = readInt64LE;\n\nfunction writeInt64LE(buf, val, offset) {\n    val = check_value(val, -0x8000000000000000, 0x7fffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x8000000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        buf.writeInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n    } else {\n        // Special case because 2^55-1 gets rounded up to 2^55\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0x7f;\n    }\n}\nmodule.exports.writeInt64LE = writeInt64LE;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}