{"ast":null,"code":"import * as amqp from 'amqplib';\nimport { EventEmitter, once } from 'events';\nimport pb from 'promise-breaker';\nimport { URL } from 'url';\nimport ChannelWrapper from './ChannelWrapper.js';\nimport { wait } from './helpers.js';\n// Default heartbeat time.\nconst HEARTBEAT_IN_SECONDS = 5;\n/* istanbul ignore next */\nfunction neverThrows() {\n  return err => setImmediate(() => {\n    throw new Error(`AmqpConnectionManager - should never get here: ${err.message}\\n` + err.stack);\n  });\n}\n//\n// Events:\n// * `connect({connection, url})` - Emitted whenever we connect to a broker.\n// * `connectFailed({err, url})` - Emitted whenever we fail to connect to a broker.\n// * `disconnect({err})` - Emitted whenever we disconnect from a broker.\n// * `blocked({reason})` - Emitted whenever connection is blocked by a broker.\n// * `unblocked()` - Emitted whenever connection is unblocked by a broker.\n//\nexport default class AmqpConnectionManager extends EventEmitter {\n  /**\n   *  Create a new AmqplibConnectionManager.\n   *\n   * @param urls - An array of brokers to connect to.\n   *   Takes url strings or objects {url: string, connectionOptions?: object}\n   *   If present, a broker's [connectionOptions] will be used instead\n   *   of [options.connectionOptions] when passed to the amqplib connect method.\n   *   AmqplibConnectionManager will round-robin between them whenever it\n   *   needs to create a new connection.\n   * @param [options={}] -\n   * @param [options.heartbeatIntervalInSeconds=5] - The interval,\n   *   in seconds, to send heartbeats.\n   * @param [options.reconnectTimeInSeconds] - The time to wait\n   *   before trying to reconnect.  If not specified, defaults to\n   *   `heartbeatIntervalInSeconds`.\n   * @param [options.connectionOptions] - Passed to the amqplib\n   *   connect method.\n   * @param [options.findServers] - A `fn(callback)` or a `fn()`\n   *   which returns a Promise.  This should resolve to one or more servers\n   *   to connect to, either a single URL or an array of URLs.  This is handy\n   *   when you're using a service discovery mechanism such as Consul or etcd.\n   *   Note that if this is supplied, then `urls` is ignored.\n   */\n  constructor(urls, options = {}) {\n    super();\n    this._closed = false;\n    if (!urls && !options.findServers) {\n      throw new Error('Must supply either `urls` or `findServers`');\n    }\n    this._channels = [];\n    this._currentUrl = 0;\n    this.connectionOptions = options.connectionOptions;\n    this.heartbeatIntervalInSeconds = options.heartbeatIntervalInSeconds || options.heartbeatIntervalInSeconds === 0 ? options.heartbeatIntervalInSeconds : HEARTBEAT_IN_SECONDS;\n    this.reconnectTimeInSeconds = options.reconnectTimeInSeconds || this.heartbeatIntervalInSeconds;\n    // There will be one listener per channel, and there could be a lot of channels, so disable warnings from node.\n    this.setMaxListeners(0);\n    this._findServers = options.findServers || (() => Promise.resolve(urls));\n  }\n  /**\n   * Start the connect retries and await the first connect result. Even if the initial connect fails or timeouts, the\n   * reconnect attempts will continue in the background.\n   * @param [options={}] -\n   * @param [options.timeout] - Time to wait for initial connect\n   */\n  async connect({\n    timeout\n  } = {}) {\n    this._connect();\n    let reject;\n    const onConnectFailed = ({\n      err\n    }) => {\n      // Ignore disconnects caused bad credentials.\n      if (err.message.includes('ACCESS-REFUSED') || err.message.includes('403')) {\n        reject(err);\n      }\n    };\n    let waitTimeout;\n    if (timeout) {\n      waitTimeout = wait(timeout);\n    }\n    try {\n      await Promise.race([once(this, 'connect'), new Promise((_resolve, innerReject) => {\n        reject = innerReject;\n        this.on('connectFailed', onConnectFailed);\n      }), ...(waitTimeout ? [waitTimeout.promise.then(() => {\n        throw new Error('amqp-connection-manager: connect timeout');\n      })] : [])]);\n    } finally {\n      waitTimeout === null || waitTimeout === void 0 ? void 0 : waitTimeout.cancel();\n      this.removeListener('connectFailed', onConnectFailed);\n    }\n  }\n  // `options` here are any options that can be passed to ChannelWrapper.\n  createChannel(options = {}) {\n    const channel = new ChannelWrapper(this, options);\n    this._channels.push(channel);\n    channel.once('close', () => {\n      this._channels = this._channels.filter(c => c !== channel);\n    });\n    return channel;\n  }\n  close() {\n    if (this._closed) {\n      return Promise.resolve();\n    }\n    this._closed = true;\n    if (this._cancelRetriesHandler) {\n      this._cancelRetriesHandler();\n      this._cancelRetriesHandler = undefined;\n    }\n    return Promise.resolve(this._connectPromise).then(() => {\n      return Promise.all(this._channels.map(channel => channel.close())).catch(function () {\n        // Ignore errors closing channels.\n      }).then(() => {\n        this._channels = [];\n        if (this._currentConnection) {\n          this._currentConnection.removeAllListeners('close');\n          return this._currentConnection.close();\n        } else {\n          return null;\n        }\n      }).then(() => {\n        this._currentConnection = undefined;\n      });\n    });\n  }\n  isConnected() {\n    return !!this._currentConnection;\n  }\n  /** Force reconnect - noop unless connected */\n  reconnect() {\n    if (this._closed) {\n      throw new Error('cannot reconnect after close');\n    }\n    // If we have a connection, close it and immediately connect again.\n    // Wait for ordinary reconnect otherwise.\n    if (this._currentConnection) {\n      this._currentConnection.removeAllListeners();\n      this._currentConnection.close().catch(() => {\n        // noop\n      }).then(() => {\n        this._currentConnection = undefined;\n        this.emit('disconnect', {\n          err: new Error('forced reconnect')\n        });\n        return this._connect();\n      }).catch(neverThrows);\n    }\n  }\n  /** The current connection. */\n  get connection() {\n    return this._currentConnection;\n  }\n  /** Returns the number of registered channels. */\n  get channelCount() {\n    return this._channels.length;\n  }\n  _connect() {\n    if (this._connectPromise) {\n      return this._connectPromise;\n    }\n    if (this._closed || this.isConnected()) {\n      return Promise.resolve(null);\n    }\n    let attemptedUrl;\n    const result = this._connectPromise = Promise.resolve().then(() => {\n      if (!this._urls || this._currentUrl >= this._urls.length) {\n        this._currentUrl = 0;\n        return pb.call(this._findServers, 0, null);\n      } else {\n        return this._urls;\n      }\n    }).then(urls => {\n      var _a;\n      if (Array.isArray(urls)) {\n        this._urls = urls;\n      } else if (urls) {\n        this._urls = [urls];\n      }\n      if (!this._urls || this._urls.length === 0) {\n        throw new Error('amqp-connection-manager: No servers found');\n      }\n      // Round robin between brokers\n      const url = this._urls[this._currentUrl];\n      this._currentUrl++;\n      // Set connectionOptions to the setting in the class instance (which came via the constructor)\n      let connectionOptions = this.connectionOptions;\n      let originalUrl;\n      let connect;\n      if (typeof url === 'object' && 'url' in url) {\n        originalUrl = connect = url.url;\n        // If URL is an object, pull out any specific URL connectionOptions for it or use the\n        // instance connectionOptions if none were provided for this specific URL.\n        connectionOptions = url.connectionOptions || this.connectionOptions;\n      } else if (typeof url === 'string') {\n        originalUrl = connect = url;\n      } else {\n        originalUrl = url;\n        connect = {\n          ...url,\n          heartbeat: (_a = url.heartbeat) !== null && _a !== void 0 ? _a : this.heartbeatIntervalInSeconds\n        };\n      }\n      attemptedUrl = originalUrl;\n      // Add the `heartbeastIntervalInSeconds` to the connection options.\n      if (typeof connect === 'string') {\n        const u = new URL(connect);\n        if (!u.searchParams.get('heartbeat')) {\n          u.searchParams.set('heartbeat', `${this.heartbeatIntervalInSeconds}`);\n        }\n        connect = u.toString();\n      }\n      return amqp.connect(connect, connectionOptions).then(connection => {\n        this._currentConnection = connection;\n        //emit 'blocked' when RabbitMQ server decides to block the connection (resources running low)\n        connection.on('blocked', reason => this.emit('blocked', {\n          reason\n        }));\n        connection.on('unblocked', () => this.emit('unblocked'));\n        connection.on('error', ( /* err */\n        ) => {\n          // if this event was emitted, then the connection was already closed,\n          // so no need to call #close here\n          // also, 'close' is emitted after 'error',\n          // so no need for work already done in 'close' handler\n        });\n        // Reconnect if the connection closes\n        connection.on('close', err => {\n          this._currentConnection = undefined;\n          this.emit('disconnect', {\n            err\n          });\n          const handle = wait(this.reconnectTimeInSeconds * 1000);\n          this._cancelRetriesHandler = handle.cancel;\n          handle.promise.then(() => this._connect())\n          // `_connect()` should never throw.\n          .catch(neverThrows);\n        });\n        this._connectPromise = undefined;\n        this.emit('connect', {\n          connection,\n          url: originalUrl\n        });\n        // Need to return null here, or Bluebird will complain - #171.\n        return null;\n      });\n    }).catch(err => {\n      this.emit('connectFailed', {\n        err,\n        url: attemptedUrl\n      });\n      // Connection failed...\n      this._currentConnection = undefined;\n      this._connectPromise = undefined;\n      let handle;\n      if (err.name === 'OperationalError' && err.message === 'connect ETIMEDOUT') {\n        handle = wait(0);\n      } else {\n        handle = wait(this.reconnectTimeInSeconds * 1000);\n      }\n      this._cancelRetriesHandler = handle.cancel;\n      return handle.promise.then(() => this._connect());\n    });\n    return result;\n  }\n}","map":{"version":3,"names":["amqp","EventEmitter","once","pb","URL","ChannelWrapper","wait","HEARTBEAT_IN_SECONDS","neverThrows","err","setImmediate","Error","message","stack","AmqpConnectionManager","constructor","urls","options","_closed","findServers","_channels","_currentUrl","connectionOptions","heartbeatIntervalInSeconds","reconnectTimeInSeconds","setMaxListeners","_findServers","Promise","resolve","connect","timeout","_connect","reject","onConnectFailed","includes","waitTimeout","race","_resolve","innerReject","on","promise","then","cancel","removeListener","createChannel","channel","push","filter","c","close","_cancelRetriesHandler","undefined","_connectPromise","all","map","catch","_currentConnection","removeAllListeners","isConnected","reconnect","emit","connection","channelCount","length","attemptedUrl","result","_urls","call","Array","isArray","url","originalUrl","heartbeat","_a","u","searchParams","get","set","toString","reason","handle","name"],"sources":["../../src/AmqpConnectionManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}