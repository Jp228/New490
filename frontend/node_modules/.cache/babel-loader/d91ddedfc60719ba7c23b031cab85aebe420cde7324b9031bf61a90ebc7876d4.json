{"ast":null,"code":"/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst asyncForEach = require('async/forEach');\nconst debug = require('@dabh/diagnostics')('winston:rejection');\nconst once = require('one-time');\nconst stackTrace = require('stack-trace');\nconst RejectionStream = require('./rejection-stream');\n\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */\nmodule.exports = class RejectionHandler {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  constructor(logger) {\n    if (!logger) {\n      throw new Error('Logger is required to handle rejections');\n    }\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n\n  /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n  handle(...args) {\n    args.forEach(arg => {\n      if (Array.isArray(arg)) {\n        return arg.forEach(handler => this._addHandler(handler));\n      }\n      this._addHandler(arg);\n    });\n    if (!this.catcher) {\n      this.catcher = this._unhandledRejection.bind(this);\n      process.on('unhandledRejection', this.catcher);\n    }\n  }\n\n  /**\n   * Removes any handlers to `unhandledRejection` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */\n  unhandle() {\n    if (this.catcher) {\n      process.removeListener('unhandledRejection', this.catcher);\n      this.catcher = false;\n      Array.from(this.handlers.values()).forEach(wrapper => this.logger.unpipe(wrapper));\n    }\n  }\n\n  /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getAllInfo(err) {\n    let message = null;\n    if (err) {\n      message = typeof err === 'string' ? err : err.message;\n    }\n    return {\n      error: err,\n      // TODO (indexzero): how do we configure this?\n      level: 'error',\n      message: [`unhandledRejection: ${message || '(no error message)'}`, err && err.stack || '  No stack trace'].join('\\n'),\n      stack: err && err.stack,\n      rejection: true,\n      date: new Date().toString(),\n      process: this.getProcessInfo(),\n      os: this.getOsInfo(),\n      trace: this.getTrace(err)\n    };\n  }\n\n  /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getProcessInfo() {\n    return {\n      pid: process.pid,\n      uid: process.getuid ? process.getuid() : null,\n      gid: process.getgid ? process.getgid() : null,\n      cwd: process.cwd(),\n      execPath: process.execPath,\n      version: process.version,\n      argv: process.argv,\n      memoryUsage: process.memoryUsage()\n    };\n  }\n\n  /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getOsInfo() {\n    return {\n      loadavg: os.loadavg(),\n      uptime: os.uptime()\n    };\n  }\n\n  /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getTrace(err) {\n    const trace = err ? stackTrace.parse(err) : stackTrace.get();\n    return trace.map(site => {\n      return {\n        column: site.getColumnNumber(),\n        file: site.getFileName(),\n        function: site.getFunctionName(),\n        line: site.getLineNumber(),\n        method: site.getMethodName(),\n        native: site.isNative()\n      };\n    });\n  }\n\n  /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */\n  _addHandler(handler) {\n    if (!this.handlers.has(handler)) {\n      handler.handleRejections = true;\n      const wrapper = new RejectionStream(handler);\n      this.handlers.set(handler, wrapper);\n      this.logger.pipe(wrapper);\n    }\n  }\n\n  /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  _unhandledRejection(err) {\n    const info = this.getAllInfo(err);\n    const handlers = this._getRejectionHandlers();\n    // Calculate if we should exit on this error\n    let doExit = typeof this.logger.exitOnError === 'function' ? this.logger.exitOnError(err) : this.logger.exitOnError;\n    let timeout;\n    if (!handlers.length && doExit) {\n      // eslint-disable-next-line no-console\n      console.warn('winston: exitOnError cannot be true with no rejection handlers.');\n      // eslint-disable-next-line no-console\n      console.warn('winston: not exiting process.');\n      doExit = false;\n    }\n    function gracefulExit() {\n      debug('doExit', doExit);\n      debug('process._exiting', process._exiting);\n      if (doExit && !process._exiting) {\n        // Remark: Currently ignoring any rejections from transports when\n        // catching unhandled rejections.\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        // eslint-disable-next-line no-process-exit\n        process.exit(1);\n      }\n    }\n    if (!handlers || handlers.length === 0) {\n      return process.nextTick(gracefulExit);\n    }\n\n    // Log to all transports attempting to listen for when they are completed.\n    asyncForEach(handlers, (handler, next) => {\n      const done = once(next);\n      const transport = handler.transport || handler;\n\n      // Debug wrapping so that we can inspect what's going on under the covers.\n      function onDone(event) {\n        return () => {\n          debug(event);\n          done();\n        };\n      }\n      transport._ending = true;\n      transport.once('finish', onDone('finished'));\n      transport.once('error', onDone('error'));\n    }, () => doExit && gracefulExit());\n    this.logger.log(info);\n\n    // If exitOnError is true, then only allow the logging of exceptions to\n    // take up to `3000ms`.\n    if (doExit) {\n      timeout = setTimeout(gracefulExit, 3000);\n    }\n  }\n\n  /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */\n  _getRejectionHandlers() {\n    // Remark (indexzero): since `logger.transports` returns all of the pipes\n    // from the _readableState of the stream we actually get the join of the\n    // explicit handlers and the implicit transports with\n    // `handleRejections: true`\n    return this.logger.transports.filter(wrap => {\n      const transport = wrap.transport || wrap;\n      return transport.handleRejections;\n    });\n  }\n};","map":{"version":3,"names":["os","require","asyncForEach","debug","once","stackTrace","RejectionStream","module","exports","RejectionHandler","constructor","logger","Error","handlers","Map","handle","args","forEach","arg","Array","isArray","handler","_addHandler","catcher","_unhandledRejection","bind","process","on","unhandle","removeListener","from","values","wrapper","unpipe","getAllInfo","err","message","error","level","stack","join","rejection","date","Date","toString","getProcessInfo","getOsInfo","trace","getTrace","pid","uid","getuid","gid","getgid","cwd","execPath","version","argv","memoryUsage","loadavg","uptime","parse","get","map","site","column","getColumnNumber","file","getFileName","function","getFunctionName","line","getLineNumber","method","getMethodName","native","isNative","has","handleRejections","set","pipe","info","_getRejectionHandlers","doExit","exitOnError","timeout","length","console","warn","gracefulExit","_exiting","clearTimeout","exit","nextTick","next","done","transport","onDone","event","_ending","log","setTimeout","transports","filter","wrap"],"sources":["/home/jp228/node_modules/winston/lib/winston/rejection-handler.js"],"sourcesContent":["/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst asyncForEach = require('async/forEach');\nconst debug = require('@dabh/diagnostics')('winston:rejection');\nconst once = require('one-time');\nconst stackTrace = require('stack-trace');\nconst RejectionStream = require('./rejection-stream');\n\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */\nmodule.exports = class RejectionHandler {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  constructor(logger) {\n    if (!logger) {\n      throw new Error('Logger is required to handle rejections');\n    }\n\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n\n  /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n  handle(...args) {\n    args.forEach(arg => {\n      if (Array.isArray(arg)) {\n        return arg.forEach(handler => this._addHandler(handler));\n      }\n\n      this._addHandler(arg);\n    });\n\n    if (!this.catcher) {\n      this.catcher = this._unhandledRejection.bind(this);\n      process.on('unhandledRejection', this.catcher);\n    }\n  }\n\n  /**\n   * Removes any handlers to `unhandledRejection` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */\n  unhandle() {\n    if (this.catcher) {\n      process.removeListener('unhandledRejection', this.catcher);\n      this.catcher = false;\n\n      Array.from(this.handlers.values()).forEach(wrapper =>\n        this.logger.unpipe(wrapper)\n      );\n    }\n  }\n\n  /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getAllInfo(err) {\n    let message = null;\n    if (err) {\n      message = typeof err === 'string' ? err : err.message;\n    }\n\n    return {\n      error: err,\n      // TODO (indexzero): how do we configure this?\n      level: 'error',\n      message: [\n        `unhandledRejection: ${message || '(no error message)'}`,\n        err && err.stack || '  No stack trace'\n      ].join('\\n'),\n      stack: err && err.stack,\n      rejection: true,\n      date: new Date().toString(),\n      process: this.getProcessInfo(),\n      os: this.getOsInfo(),\n      trace: this.getTrace(err)\n    };\n  }\n\n  /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getProcessInfo() {\n    return {\n      pid: process.pid,\n      uid: process.getuid ? process.getuid() : null,\n      gid: process.getgid ? process.getgid() : null,\n      cwd: process.cwd(),\n      execPath: process.execPath,\n      version: process.version,\n      argv: process.argv,\n      memoryUsage: process.memoryUsage()\n    };\n  }\n\n  /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getOsInfo() {\n    return {\n      loadavg: os.loadavg(),\n      uptime: os.uptime()\n    };\n  }\n\n  /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getTrace(err) {\n    const trace = err ? stackTrace.parse(err) : stackTrace.get();\n    return trace.map(site => {\n      return {\n        column: site.getColumnNumber(),\n        file: site.getFileName(),\n        function: site.getFunctionName(),\n        line: site.getLineNumber(),\n        method: site.getMethodName(),\n        native: site.isNative()\n      };\n    });\n  }\n\n  /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */\n  _addHandler(handler) {\n    if (!this.handlers.has(handler)) {\n      handler.handleRejections = true;\n      const wrapper = new RejectionStream(handler);\n      this.handlers.set(handler, wrapper);\n      this.logger.pipe(wrapper);\n    }\n  }\n\n  /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  _unhandledRejection(err) {\n    const info = this.getAllInfo(err);\n    const handlers = this._getRejectionHandlers();\n    // Calculate if we should exit on this error\n    let doExit =\n      typeof this.logger.exitOnError === 'function'\n        ? this.logger.exitOnError(err)\n        : this.logger.exitOnError;\n    let timeout;\n\n    if (!handlers.length && doExit) {\n      // eslint-disable-next-line no-console\n      console.warn('winston: exitOnError cannot be true with no rejection handlers.');\n      // eslint-disable-next-line no-console\n      console.warn('winston: not exiting process.');\n      doExit = false;\n    }\n\n    function gracefulExit() {\n      debug('doExit', doExit);\n      debug('process._exiting', process._exiting);\n\n      if (doExit && !process._exiting) {\n        // Remark: Currently ignoring any rejections from transports when\n        // catching unhandled rejections.\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        // eslint-disable-next-line no-process-exit\n        process.exit(1);\n      }\n    }\n\n    if (!handlers || handlers.length === 0) {\n      return process.nextTick(gracefulExit);\n    }\n\n    // Log to all transports attempting to listen for when they are completed.\n    asyncForEach(\n      handlers,\n      (handler, next) => {\n        const done = once(next);\n        const transport = handler.transport || handler;\n\n        // Debug wrapping so that we can inspect what's going on under the covers.\n        function onDone(event) {\n          return () => {\n            debug(event);\n            done();\n          };\n        }\n\n        transport._ending = true;\n        transport.once('finish', onDone('finished'));\n        transport.once('error', onDone('error'));\n      },\n      () => doExit && gracefulExit()\n    );\n\n    this.logger.log(info);\n\n    // If exitOnError is true, then only allow the logging of exceptions to\n    // take up to `3000ms`.\n    if (doExit) {\n      timeout = setTimeout(gracefulExit, 3000);\n    }\n  }\n\n  /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */\n  _getRejectionHandlers() {\n    // Remark (indexzero): since `logger.transports` returns all of the pipes\n    // from the _readableState of the stream we actually get the join of the\n    // explicit handlers and the implicit transports with\n    // `handleRejections: true`\n    return this.logger.transports.filter(wrap => {\n      const transport = wrap.transport || wrap;\n      return transport.handleRejections;\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}