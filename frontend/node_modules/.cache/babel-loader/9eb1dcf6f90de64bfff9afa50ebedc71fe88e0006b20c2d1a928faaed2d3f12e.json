{"ast":null,"code":"import { Connection } from 'rabbitmq-client';\n\n// Initialize:\nconst rabbit = new Connection('amqp://guest:guest@192.168.192.211:15672');\nrabbit.on('error', err => {\n  console.log('RabbitMQ connection error', err);\n});\nrabbit.on('connection', () => {\n  console.log('Connection successfully (re)established');\n});\n\n// Consume messages from a queue:\n// See API docs for all options\nconst sub = rabbit.createConsumer({\n  queue: 'user-events',\n  queueOptions: {\n    durable: true\n  },\n  // handle 2 messages at a time\n  qos: {\n    prefetchCount: 2\n  },\n  // Optionally ensure an exchange exists\n  exchanges: [{\n    exchange: 'my-events',\n    type: 'topic'\n  }],\n  // With a \"topic\" exchange, messages matching this pattern are routed to the queue\n  queueBindings: [{\n    exchange: 'my-events',\n    routingKey: 'users.*'\n  }]\n}, async msg => {\n  console.log('received message (user-events)', msg);\n  // The message is automatically acknowledged (BasicAck) when this function ends.\n  // If this function throws an error, then msg is rejected (BasicNack) and\n  // possibly requeued or sent to a dead-letter exchange. You can also return a\n  // status code from this callback to control the ack/nack behavior\n  // per-message.\n});\nsub.on('error', err => {\n  // Maybe the consumer was cancelled, or the connection was reset before a\n  // message could be acknowledged.\n  console.log('consumer error (user-events)', err);\n});\n\n// Declare a publisher\n// See API docs for all options\nconst pub = rabbit.createPublisher({\n  // Enable publish confirmations, similar to consumer acknowledgements\n  confirm: true,\n  // Enable retries\n  maxAttempts: 2,\n  // Optionally ensure the existence of an exchange before we use it\n  exchanges: [{\n    exchange: 'my-events',\n    type: 'topic'\n  }]\n});\n\n// Publish a message to a custom exchange\nawait pub.send({\n  exchange: 'my-events',\n  routingKey: 'users.visit'\n},\n// metadata\n{\n  id: 1,\n  name: 'Alan Turing'\n}); // message content\n\n// Or publish directly to a queue\nawait pub.send('user-events', {\n  id: 1,\n  name: 'Alan Turing'\n});","map":{"version":3,"names":["Connection","rabbit","on","err","console","log","sub","createConsumer","queue","queueOptions","durable","qos","prefetchCount","exchanges","exchange","type","queueBindings","routingKey","msg","pub","createPublisher","confirm","maxAttempts","send","id","name"],"sources":["/home/jp228/Desktop/frontend/src/publisher.js"],"sourcesContent":["import {Connection} from 'rabbitmq-client'\n\n// Initialize:\nconst rabbit = new Connection('amqp://guest:guest@192.168.192.211:15672')\nrabbit.on('error', (err) => {\n  console.log('RabbitMQ connection error', err)\n})\nrabbit.on('connection', () => {\n  console.log('Connection successfully (re)established')\n})\n\n// Consume messages from a queue:\n// See API docs for all options\nconst sub = rabbit.createConsumer({\n  queue: 'user-events',\n  queueOptions: {durable: true},\n  // handle 2 messages at a time\n  qos: {prefetchCount: 2},\n  // Optionally ensure an exchange exists\n  exchanges: [{exchange: 'my-events', type: 'topic'}],\n  // With a \"topic\" exchange, messages matching this pattern are routed to the queue\n  queueBindings: [{exchange: 'my-events', routingKey: 'users.*'}],\n}, async (msg) => {\n  console.log('received message (user-events)', msg)\n  // The message is automatically acknowledged (BasicAck) when this function ends.\n  // If this function throws an error, then msg is rejected (BasicNack) and\n  // possibly requeued or sent to a dead-letter exchange. You can also return a\n  // status code from this callback to control the ack/nack behavior\n  // per-message.\n})\n\nsub.on('error', (err) => {\n  // Maybe the consumer was cancelled, or the connection was reset before a\n  // message could be acknowledged.\n  console.log('consumer error (user-events)', err)\n})\n\n// Declare a publisher\n// See API docs for all options\nconst pub = rabbit.createPublisher({\n  // Enable publish confirmations, similar to consumer acknowledgements\n  confirm: true,\n  // Enable retries\n  maxAttempts: 2,\n  // Optionally ensure the existence of an exchange before we use it\n  exchanges: [{exchange: 'my-events', type: 'topic'}]\n})\n\n// Publish a message to a custom exchange\nawait pub.send(\n  {exchange: 'my-events', routingKey: 'users.visit'}, // metadata\n  {id: 1, name: 'Alan Turing'}) // message content\n\n// Or publish directly to a queue\nawait pub.send('user-events', {id: 1, name: 'Alan Turing'})\n"],"mappings":"AAAA,SAAQA,UAAU,QAAO,iBAAiB;;AAE1C;AACA,MAAMC,MAAM,GAAG,IAAID,UAAU,CAAC,0CAA0C,CAAC;AACzEC,MAAM,CAACC,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAK;EAC1BC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,GAAG,CAAC;AAC/C,CAAC,CAAC;AACFF,MAAM,CAACC,EAAE,CAAC,YAAY,EAAE,MAAM;EAC5BE,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;AACxD,CAAC,CAAC;;AAEF;AACA;AACA,MAAMC,GAAG,GAAGL,MAAM,CAACM,cAAc,CAAC;EAChCC,KAAK,EAAE,aAAa;EACpBC,YAAY,EAAE;IAACC,OAAO,EAAE;EAAI,CAAC;EAC7B;EACAC,GAAG,EAAE;IAACC,aAAa,EAAE;EAAC,CAAC;EACvB;EACAC,SAAS,EAAE,CAAC;IAACC,QAAQ,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAO,CAAC,CAAC;EACnD;EACAC,aAAa,EAAE,CAAC;IAACF,QAAQ,EAAE,WAAW;IAAEG,UAAU,EAAE;EAAS,CAAC;AAChE,CAAC,EAAE,MAAOC,GAAG,IAAK;EAChBd,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEa,GAAG,CAAC;EAClD;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;AAEFZ,GAAG,CAACJ,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAK;EACvB;EACA;EACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,GAAG,CAAC;AAClD,CAAC,CAAC;;AAEF;AACA;AACA,MAAMgB,GAAG,GAAGlB,MAAM,CAACmB,eAAe,CAAC;EACjC;EACAC,OAAO,EAAE,IAAI;EACb;EACAC,WAAW,EAAE,CAAC;EACd;EACAT,SAAS,EAAE,CAAC;IAACC,QAAQ,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAO,CAAC;AACpD,CAAC,CAAC;;AAEF;AACA,MAAMI,GAAG,CAACI,IAAI,CACZ;EAACT,QAAQ,EAAE,WAAW;EAAEG,UAAU,EAAE;AAAa,CAAC;AAAE;AACpD;EAACO,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAa,CAAC,CAAC,EAAC;;AAEhC;AACA,MAAMN,GAAG,CAACI,IAAI,CAAC,aAAa,EAAE;EAACC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}