{"ast":null,"code":"/*import {Connection} from 'rabbitmq-client'\n\n// Initialize:\nconst rabbit = new Connection('amqp://guest:guest@192.168.192.211:15672')\nrabbit.on('error', (err) => {\n  console.log('RabbitMQ connection error', err)\n})\nrabbit.on('connection', () => {\n  console.log('Connection successfully (re)established')\n})\n\n// Consume messages from a queue:\n// See API docs for all options\nconst sub = rabbit.createConsumer({\n  queue: 'user-events',\n  queueOptions: {durable: true},\n  // handle 2 messages at a time\n  qos: {prefetchCount: 2},\n  // Optionally ensure an exchange exists\n  exchanges: [{exchange: 'my-events', type: 'topic'}],\n  // With a \"topic\" exchange, messages matching this pattern are routed to the queue\n  queueBindings: [{exchange: 'my-events', routingKey: 'users.*'}],\n}, async (msg) => {\n  console.log('received message (user-events)', msg)\n  // The message is automatically acknowledged (BasicAck) when this function ends.\n  // If this function throws an error, then msg is rejected (BasicNack) and\n  // possibly requeued or sent to a dead-letter exchange. You can also return a\n  // status code from this callback to control the ack/nack behavior\n  // per-message.\n})\n\nsub.on('error', (err) => {\n  // Maybe the consumer was cancelled, or the connection was reset before a\n  // message could be acknowledged.\n  console.log('consumer error (user-events)', err)\n})\n\n// Declare a publisher\n// See API docs for all options\nconst pub = rabbit.createPublisher({\n  // Enable publish confirmations, similar to consumer acknowledgements\n  confirm: true,\n  // Enable retries\n  maxAttempts: 2,\n  // Optionally ensure the existence of an exchange before we use it\n  exchanges: [{exchange: 'my-events', type: 'topic'}]\n})\n\n// Publish a message to a custom exchange\nawait pub.send(\n  {exchange: 'my-events', routingKey: 'users.visit'}, // metadata\n  {id: 1, name: 'Alan Turing'}) // message content\n\n// Or publish directly to a queue\nawait pub.send('user-events', {id: 1, name: 'Alan Turing'})\n*/\nimport { Client } from '@stomp/stompjs';\nimport { WebSocket } from 'ws';\nObject.assign(global, {\n  WebSocket\n});\nconst client = new Client({\n  brokerURL: 'ws://localhost:15674/ws',\n  onConnect: () => {\n    client.subscribe('/topic/test01', message => console.log(`Received: ${message.body}`));\n    client.publish({\n      destination: '/topic/test01',\n      body: 'First Message'\n    });\n  }\n});\nclient.activate();","map":{"version":3,"names":["Client","WebSocket","Object","assign","global","client","brokerURL","onConnect","subscribe","message","console","log","body","publish","destination","activate"],"sources":["/home/jp228/Desktop/frontend/src/publisher.js"],"sourcesContent":["/*import {Connection} from 'rabbitmq-client'\n\n// Initialize:\nconst rabbit = new Connection('amqp://guest:guest@192.168.192.211:15672')\nrabbit.on('error', (err) => {\n  console.log('RabbitMQ connection error', err)\n})\nrabbit.on('connection', () => {\n  console.log('Connection successfully (re)established')\n})\n\n// Consume messages from a queue:\n// See API docs for all options\nconst sub = rabbit.createConsumer({\n  queue: 'user-events',\n  queueOptions: {durable: true},\n  // handle 2 messages at a time\n  qos: {prefetchCount: 2},\n  // Optionally ensure an exchange exists\n  exchanges: [{exchange: 'my-events', type: 'topic'}],\n  // With a \"topic\" exchange, messages matching this pattern are routed to the queue\n  queueBindings: [{exchange: 'my-events', routingKey: 'users.*'}],\n}, async (msg) => {\n  console.log('received message (user-events)', msg)\n  // The message is automatically acknowledged (BasicAck) when this function ends.\n  // If this function throws an error, then msg is rejected (BasicNack) and\n  // possibly requeued or sent to a dead-letter exchange. You can also return a\n  // status code from this callback to control the ack/nack behavior\n  // per-message.\n})\n\nsub.on('error', (err) => {\n  // Maybe the consumer was cancelled, or the connection was reset before a\n  // message could be acknowledged.\n  console.log('consumer error (user-events)', err)\n})\n\n// Declare a publisher\n// See API docs for all options\nconst pub = rabbit.createPublisher({\n  // Enable publish confirmations, similar to consumer acknowledgements\n  confirm: true,\n  // Enable retries\n  maxAttempts: 2,\n  // Optionally ensure the existence of an exchange before we use it\n  exchanges: [{exchange: 'my-events', type: 'topic'}]\n})\n\n// Publish a message to a custom exchange\nawait pub.send(\n  {exchange: 'my-events', routingKey: 'users.visit'}, // metadata\n  {id: 1, name: 'Alan Turing'}) // message content\n\n// Or publish directly to a queue\nawait pub.send('user-events', {id: 1, name: 'Alan Turing'})\n*/\nimport { Client } from '@stomp/stompjs';\n\nimport { WebSocket } from 'ws';\nObject.assign(global, { WebSocket });\n\nconst client = new Client({\n  brokerURL: 'ws://localhost:15674/ws',\n  onConnect: () => {\n    client.subscribe('/topic/test01', message =>\n      console.log(`Received: ${message.body}`)\n    );\n    client.publish({ destination: '/topic/test01', body: 'First Message' });\n  },\n});\n\nclient.activate();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,gBAAgB;AAEvC,SAASC,SAAS,QAAQ,IAAI;AAC9BC,MAAM,CAACC,MAAM,CAACC,MAAM,EAAE;EAAEH;AAAU,CAAC,CAAC;AAEpC,MAAMI,MAAM,GAAG,IAAIL,MAAM,CAAC;EACxBM,SAAS,EAAE,yBAAyB;EACpCC,SAAS,EAAEA,CAAA,KAAM;IACfF,MAAM,CAACG,SAAS,CAAC,eAAe,EAAEC,OAAO,IACvCC,OAAO,CAACC,GAAG,CAAE,aAAYF,OAAO,CAACG,IAAK,EAAC,CACzC,CAAC;IACDP,MAAM,CAACQ,OAAO,CAAC;MAAEC,WAAW,EAAE,eAAe;MAAEF,IAAI,EAAE;IAAgB,CAAC,CAAC;EACzE;AACF,CAAC,CAAC;AAEFP,MAAM,CAACU,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}