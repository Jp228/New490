{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/frontend/src/App.js\",\n  _s = $RefreshSig$();\n//import './App.css';\n//import './publisher.js'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n//export default App\n\n// import React, { useState } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [message, setMessage] = useState('');\n\n//     const connect = () => {\n//         const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n//         const client = Stomp.over(socket);\n\n//         const headers = {\n//             login: \"admin\", // default username\n//             passcode: \"admin\", // default password\n//             // additional header options can go here if needed\n//         };\n\n//         client.connect(headers, frame => {\n//             console.log('Connected: ' + frame);\n//             setStompClient(client);\n//         }, error => {\n//             console.error('Error connecting to RabbitMQ:', error);\n//         });\n//     };\n\n//     const sendMessage = () => {\n//         if (stompClient) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <button onClick={connect}>Connect to RabbitMQ</button>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RabbitMQComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    // Function to connect to RabbitMQ\n    const connect = () => {\n      const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n      const client = Stomp.over(socket);\n      const headers = {\n        login: \"admin\",\n        // secure your credentials for production environments\n        passcode: \"admin\"\n      };\n      client.connect(headers, frame => {\n        console.log('Connected: ' + frame);\n        setStompClient(client);\n        setIsConnected(true);\n      }, error => {\n        console.error('Error connecting to RabbitMQ:', error);\n      });\n    };\n    connect(); // Automatically connect on component mount\n\n    // Cleanup function to disconnect when the component unmounts\n    return () => {\n      if (stompClient && isConnected) {\n        stompClient.disconnect(() => {\n          console.log(\"Disconnected from RabbitMQ\");\n          setIsConnected(false);\n        });\n      }\n    };\n  }, []); // Empty dependency array ensures this effect runs only once on mount\n\n  const sendMessage = () => {\n    if (stompClient && isConnected) {\n      stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({\n        message: message\n      }));\n      console.log(\"Message sent: \", message);\n    } else {\n      console.log(\"Not connected to RabbitMQ\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(RabbitMQComponent, \"j7xyo4KwoQAqCmXpFjPbruX0ehA=\");\n_c = RabbitMQComponent;\nexport default RabbitMQComponent;\nvar _c;\n$RefreshReg$(_c, \"RabbitMQComponent\");","map":{"version":3,"names":["React","useState","useEffect","Stomp","jsxDEV","_jsxDEV","RabbitMQComponent","_s","stompClient","setStompClient","isConnected","setIsConnected","message","setMessage","connect","socket","WebSocket","client","over","headers","login","passcode","frame","console","log","error","disconnect","sendMessage","send","JSON","stringify","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/frontend/src/App.js"],"sourcesContent":["//import './App.css';\n//import './publisher.js'\n\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}*/\n\n//export default App\n\n\n// import React, { useState } from 'react';\n// import * as Stomp from 'stompjs';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [message, setMessage] = useState('');\n\n//     const connect = () => {\n//         const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n//         const client = Stomp.over(socket);\n        \n//         const headers = {\n//             login: \"admin\", // default username\n//             passcode: \"admin\", // default password\n//             // additional header options can go here if needed\n//         };\n\n//         client.connect(headers, frame => {\n//             console.log('Connected: ' + frame);\n//             setStompClient(client);\n//         }, error => {\n//             console.error('Error connecting to RabbitMQ:', error);\n//         });\n//     };\n\n//     const sendMessage = () => {\n//         if (stompClient) {\n//             stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n//             console.log(\"Message sent: \", message);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <button onClick={connect}>Connect to RabbitMQ</button>\n//             <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n//             <button onClick={sendMessage}>Send Message</button>\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\n\nimport React, { useState, useEffect } from 'react';\nimport * as Stomp from 'stompjs';\n\nconst RabbitMQComponent = () => {\n    const [stompClient, setStompClient] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        // Function to connect to RabbitMQ\n        const connect = () => {\n            const socket = new WebSocket('ws://192.168.192.1:15674/ws'); // Use your RabbitMQ Web-STOMP endpoint\n            const client = Stomp.over(socket);\n\n            const headers = {\n                login: \"admin\", // secure your credentials for production environments\n                passcode: \"admin\",\n            };\n\n            client.connect(headers, frame => {\n                console.log('Connected: ' + frame);\n                setStompClient(client);\n                setIsConnected(true);\n            }, error => {\n                console.error('Error connecting to RabbitMQ:', error);\n            });\n        };\n\n        connect(); // Automatically connect on component mount\n\n        // Cleanup function to disconnect when the component unmounts\n        return () => {\n            if (stompClient && isConnected) {\n                stompClient.disconnect(() => {\n                    console.log(\"Disconnected from RabbitMQ\");\n                    setIsConnected(false);\n                });\n            }\n        };\n    }, []); // Empty dependency array ensures this effect runs only once on mount\n\n    const sendMessage = () => {\n        if (stompClient && isConnected) {\n            stompClient.send(\"/queue/frontendQueue\", {}, JSON.stringify({ message: message }));\n            console.log(\"Message sent: \", message);\n        } else {\n            console.log(\"Not connected to RabbitMQ\");\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n            <button onClick={sendMessage}>Send Message</button>\n        </div>\n    );\n};\n\nexport default RabbitMQComponent;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}