{"ast":null,"code":"var _jsxFileName = \"/home/jp228/Desktop/New490/frontend/src/App.js\";\n// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const handleLogin = (username, password) => {\n//         console.log(\"Login Attempt:\", username, password);\n//         //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n//         sendMessage(\"/queue/backendQueue\", { ID: \"True\"});\n//         // Here you would typically check credentials, etc.\n//         // This is just a placeholder for demonstration{validation: credentials are valid}\n//         setIsLoggedIn(true);\n//     };\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/queue/backendQueue', (receivedMessagemessage) => {\n//                     // Assuming message body is a JSON string\n//                     //const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessagemessage.body);\n//                     if (receivedMessagemessage.body='True') {\n//                         // Handle successful authentication\n//                         // Using React Router for redirection as an example\n//                         console.log('SUCCESS')\n//                     } else {\n//                         // Handle authentication failure\n//                         console.log(\"SORRY\")\n//                     }\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = (queue, messageContent) => {\n//         if (stompClient && isConnected) {\n//             // Use the `queue` parameter to dynamically set the destination\n//             // Convert the `messageContent` parameter to a JSON string to send as the message body\n//             stompClient.send(queue, {}, JSON.stringify(messageContent));\n//             console.log(\"Message sent to\", queue, \":\", messageContent);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login onLogin={handleLogin} />\n//             ) : (\n//                 <RabbitMQComponent />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Dashboard from './dashboard'; // Import your Dashboard component\nimport Login from './login'; // Import your Dashboard component\nimport RabbitMQComponent from './rabbitmq'; // Import your Dashboard component\n// Other imports as necessary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/rabbitmq\",\n        element: /*#__PURE__*/_jsxDEV(RabbitMQComponent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Dashboard","Login","RabbitMQComponent","jsxDEV","_jsxDEV","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jp228/Desktop/New490/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import * as Stomp from 'stompjs';\n// import Login from './login';\n\n\n\n\n// const RabbitMQComponent = () => {\n//     const [stompClient, setStompClient] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [receivedMessages, setReceivedMessages] = useState([]); // Store received messages\n\n\n\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//     const handleLogin = (username, password) => {\n//         console.log(\"Login Attempt:\", username, password);\n//         //sendMessage(\"/queue/frontendQueue\", { ID: \"Login\", username: username, password: password });\n//         sendMessage(\"/queue/backendQueue\", { ID: \"True\"});\n//         // Here you would typically check credentials, etc.\n//         // This is just a placeholder for demonstration{validation: credentials are valid}\n//         setIsLoggedIn(true);\n//     };\n\n\n\n\n//     useEffect(() => {\n//         const connect = () => {\n//             const socket = new WebSocket('ws://192.168.192.211:15674/ws');\n//             const client = Stomp.over(socket);\n\n//             const headers = {\n//                 login: \"admin\",\n//                 passcode: \"admin\",\n//             };\n\n//             client.connect(headers, frame => {\n//                 console.log('Connected: ' + frame);\n//                 setStompClient(client);\n//                 setIsConnected(true);\n\n//                 // Subscribe to the backend_queue\n//                 client.subscribe('/queue/backendQueue', (receivedMessagemessage) => {\n//                     // Assuming message body is a JSON string\n//                     //const receivedMessage = JSON.parse(message.body);\n//                     console.log(\"Received message: \", receivedMessagemessage.body);\n//                     if (receivedMessagemessage.body='True') {\n//                         // Handle successful authentication\n//                         // Using React Router for redirection as an example\n//                         console.log('SUCCESS')\n//                     } else {\n//                         // Handle authentication failure\n//                         console.log(\"SORRY\")\n//                     }\n//                     // Update state with the new message\n//                     setReceivedMessages(prevMessages => [...prevMessages, receivedMessagemessage.body]);\n//                 });\n//             }, error => {\n//                 console.error('Error connecting to RabbitMQ:', error);\n//             });\n//         };\n\n//         connect();\n\n//         return () => {\n//             if (stompClient && isConnected) {\n//                 stompClient.disconnect(() => {\n//                     console.log(\"Disconnected from RabbitMQ\");\n//                     setIsConnected(false);\n//                 });\n//             }\n//         };\n//     }, []);\n\n\n//     // Your sendMessage function remains unchanged\n//     const sendMessage = (queue, messageContent) => {\n//         if (stompClient && isConnected) {\n//             // Use the `queue` parameter to dynamically set the destination\n//             // Convert the `messageContent` parameter to a JSON string to send as the message body\n//             stompClient.send(queue, {}, JSON.stringify(messageContent));\n//             console.log(\"Message sent to\", queue, \":\", messageContent);\n//         } else {\n//             console.log(\"Not connected to RabbitMQ\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             {!isLoggedIn ? (\n//                 <Login onLogin={handleLogin} />\n//             ) : (\n//                 <RabbitMQComponent />\n//             )}\n//         </div>\n//     );\n// };\n\n// export default RabbitMQComponent;\n\n\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Dashboard from './dashboard'; // Import your Dashboard component\nimport Login from './login'; // Import your Dashboard component\nimport RabbitMQComponent from './rabbitmq'; // Import your Dashboard component\n// Other imports as necessary\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/rabbitmq\" element={<RabbitMQComponent />} /> {/* Adjust the path as necessary */}\n        <Route path=\"/dashboard\" element={<Dashboard />} />\n        <Route path=\"/login\" element={<Login />} />\n        {/* Define other routes as needed */}\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;AACrC,OAAOC,KAAK,MAAM,SAAS,CAAC,CAAC;AAC7B,OAAOC,iBAAiB,MAAM,YAAY,CAAC,CAAC;AAC5C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA,CAACP,MAAM;IAAAS,QAAA,eACLF,OAAA,CAACN,MAAM;MAAAQ,QAAA,gBACLF,OAAA,CAACL,KAAK;QAACQ,IAAI,EAAC,WAAW;QAACC,OAAO,eAAEJ,OAAA,CAACF,iBAAiB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,eAC3DR,OAAA,CAACL,KAAK;QAACQ,IAAI,EAAC,YAAY;QAACC,OAAO,eAAEJ,OAAA,CAACJ,SAAS;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnDR,OAAA,CAACL,KAAK;QAACQ,IAAI,EAAC,QAAQ;QAACC,OAAO,eAAEJ,OAAA,CAACH,KAAK;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAErC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAACC,EAAA,GAXQR,GAAG;AAaZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}